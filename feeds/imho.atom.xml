<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>- IMHO</title><link href="https://blog.zoomquiet.io/" rel="alternate"></link><link href="https://blog.zoomquiet.io/feeds/imho.atom.xml" rel="self"></link><id>https://blog.zoomquiet.io/</id><updated>2020-01-31T16:42:24+08:00</updated><entry><title>什么是开放社区初探….</title><link href="https://blog.zoomquiet.io/200131-what-is-community.html" rel="alternate"></link><published>2020-01-31T16:42:24+08:00</published><updated>2020-01-31T16:42:24+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2020-01-31:/200131-what-is-community.html</id><summary type="html">
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://shimo.im/docs/KWxwgtpwGQxYv6Gw"&gt;鼠年话开源-系列主题网聊&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第6夜是俺发起的议题&lt;/li&gt;
&lt;li&gt;没想到是个错误的议题, 几句聊明白后&lt;/li&gt;
&lt;li&gt;引发出更加有意思的讨论…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;触发&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;其中追本溯源的灵魂一问, 导入一本奇书中的论述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; 姜宁: https://github.com/open-organization-ambassadors/open-org-workbook/blob/master/open_org_workbook_1_1_5.pdf   222 页有一篇文章 community和open source community的论述,大家可以参考一下. ‘&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; 姜宁: 里面提到一个概念,就是Open Communities 也不是绝对的Open . ‘&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; 姜宁: open communities are a broader implementation of open source communities. ‘&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="_3"&gt;快译&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;尝试将要点翻译一下…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是社区? …以往…现在互联网社区越来越重要…&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;社区”是指关系;它是成员与其共享的价值和活动系统之间的连接媒介. 换句话说 …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://shimo.im/docs/KWxwgtpwGQxYv6Gw"&gt;鼠年话开源-系列主题网聊&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第6夜是俺发起的议题&lt;/li&gt;
&lt;li&gt;没想到是个错误的议题, 几句聊明白后&lt;/li&gt;
&lt;li&gt;引发出更加有意思的讨论…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;触发&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;其中追本溯源的灵魂一问, 导入一本奇书中的论述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; 姜宁: https://github.com/open-organization-ambassadors/open-org-workbook/blob/master/open_org_workbook_1_1_5.pdf   222 页有一篇文章 community和open source community的论述,大家可以参考一下. ‘&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; 姜宁: 里面提到一个概念,就是Open Communities 也不是绝对的Open . ‘&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt; 姜宁: open communities are a broader implementation of open source communities. ‘&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="_3"&gt;快译&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;尝试将要点翻译一下…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是社区? …以往…现在互联网社区越来越重要…&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;社区”是指关系;它是成员与其共享的价值和活动系统之间的连接媒介. 换句话说,这是人员,工具和其他元素相互联系和互动的方式. 这一点很重要. 社区不仅仅是一群无定形的人…&lt;/p&gt;
&lt;p&gt;什么是开放社区?&lt;/p&gt;
&lt;p&gt;-&amp;gt; 专门指开源技术社区了…其次,这些社区产生的源代码是”开放的”,这意味着社区和公众都可以使用和修改它. &lt;/p&gt;
&lt;p&gt;进一步的, 开源技术社区也只是开放社区首批实例化的社区…&lt;/p&gt;
&lt;p&gt;以往是专有软件为王, 现在开源软件在兴起…&lt;/p&gt;
&lt;p&gt;更简单地讲,开放社区发展所遵循的共同价值观和信念不仅与它所做的事情有关,而且还与它如何做事有关. &lt;/p&gt;
&lt;p&gt;功勋主义 是很多开源社区的核心价值观…&lt;/p&gt;
&lt;p&gt;开放社区主要通过成员的参与进行管理,而不是由指定的社区主持人进行管理(尽管可能有一个社区主持人,其作用是根据社区的精英和其他价值观来调解纠纷或进行适度的讨论). 
所有成员的参与都是为了使社区的目标和行为社会化. 例如,在开放社区中,围绕”协作”,”多样性”,”适应性”,”透明性”或”功勋”的价值观形成,所有成员都有责任防止和报告骚扰或任何可能破坏这些骚扰的行为价值观. &lt;/p&gt;
&lt;h2 id="_4"&gt;反思&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;6年前私人偏见是这样的:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devrel.101.camp/2014-02/ac2-tech-community/"&gt;关 乎社群:2 什么是技术社区? | DevRel | 开发者关系.思考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天, 从开源技术社区开始, 逐渐获得社会认可, 进而衍生出更加宽泛的开放社区;
对比开源技术社区, 相同的是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心目标作品&lt;/li&gt;
&lt;li&gt;开放/对等/主动的协作机制&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题是, 国外学术界/商界都在积累观察/参与/讨论/分析/…开源引发的开放社区协作…&lt;/p&gt;
&lt;p&gt;而中国互联网全员关注的只是 996 福报…&lt;/p&gt;
&lt;p&gt;那么, 作为微小的个人, 可以为之作什么?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起/运营/参与/服务各种开放社区&lt;/li&gt;
&lt;li&gt;积累贡献经验, 观察/总结中国式协作技巧&lt;/li&gt;
&lt;li&gt;切实通过实践影响到具体的一个个人&lt;/li&gt;
&lt;li&gt;慢慢的, 传递开来, 就能形成切实的影响力以及组织/团体/社区/共同体/…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;原文&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/open-organization-ambassadors/open-org-workbook/"&gt;open-organization-ambassadors/open-org-workbook: Repository for open organization community’s workbook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;p222~224&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Introduction:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is community?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Heidi Hess von Ludewig&lt;/p&gt;
&lt;p&gt;The term “community” refers to a sense of shared ownership and purpose that generates relationships of goodwill and fel- lowship between the members of a social network.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;A community” is a speci c social network united according to shared values, beliefs, and goals. In recent years (and especially since the widespread adoption of internet technologies and appli- cations), the term “community” has taken on renewed importance. Communities exist wherever people can connect—face-to-face, in shared space, or even virtually, through analog or digital media (like as ham or &lt;span class="caps"&gt;CB&lt;/span&gt; radio) or social networking applications (like Facebook). Social communities often center around religion, poli- tics, culture, geographical location, or interests. In professional and business realms, communities can be comprised of members who have similar knowledge, professions, or work roles (for in- stance, software coding, lawyers, or project managers). Research on communities has found that they provide support, enlarge net- works by enabling weak and strong network ties, disseminate information, and provide education and mentorship.&lt;/p&gt;
&lt;p&gt;But they do something else, too: Communities de ne modes of behavior, beliefs, and roles, and in this way foster relationships between people. “Community” refers to the relationships; it is the connective medium between members and their shared value and activity systems. In other words, it’s the way that people, tools, and other elements relate and engage with one another. This point is important. Communities are not just amorphous globs of people&lt;/p&gt;
&lt;p&gt;stuck together with some beliefs; they consist of relationships that develop between and among community members and elements. Those relationships are what constitute the community; the rela- tionships make possible the feeling of fellowship and positive association between members, the activities they perform, and the way they perform them.&lt;/p&gt;
&lt;p&gt;Communities—how they’re constructed, the tools they use, how they operate—in uence the ways members connect (how they develop relationships between each other and establish relation- ships to the community at large), and the community purpose and value system is the reason those members connect. In this sense, then, the reason a community exists, how it decides to design and structure itself, the tools it decides to use, the information it dis- plays to instruct and guide members, and the people who join and participate in the community are all important considerations in building an open community, because each of these factors in u- ences the others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are open communities?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So-called “open communities” are an o shoot of open source software communities. The term “open” in “open source commu- nity” has dual meanings. First, in open source communities, community participation is “open,” meaning that anyone can join the community and participate in its activities. Second, the source code these communities produce is “open,” meaning that both the community and the general public can use and modify it.&lt;/p&gt;
&lt;p&gt;At the time open source communities were created, “open” was a very new concept—one in direct opposition to prevailing wis- dom in the software industry, where proprietary software (creation, use, and access controlled by the owners of the intellectual prop- erty) was predominant. Open source communities, therefore, were among the  rst enactment of open communities and were focused on creating software. Today, however, open communities are a broader implementation of open source communities.&lt;/p&gt;
&lt;p&gt;While all communities function in ways that align with the beliefs and values of the group, some are more explicit and deliberately re exive about the values that guide their operation. Open communities are one example of this approach to community; they concern themselves with how a community should operate. In this way, open communities foster a particular kind of relationship and bond between its members, and—in the truest sense—encourage the development of specialized activities that are supportive of its values and beliefs. More simply, the shared values and beliefs around which an open community develops has to do not only with what it does but how it does what it does.&lt;/p&gt;
&lt;p&gt;For example, at the heart of many open communities is the value of “meritocracy,” which members invoke to stress evaluation of ideas and work based on the intrinsic value of the work to the community and not on the value of the people performing the activ- ity. Other key attributes of an open community are transparency, inclusivity, adaptability, and collaboration. These shared qualities help spur the self-organizing nature of an open community. The rel- ative level of a community’s degree of inclusivity, adaptability, collaboration and transparency determines that community’s de- gree of “openness.”&lt;/p&gt;
&lt;p&gt;Open communities are managed predominantly through members’ participation, rather than by a designated community moderator (though there may be a community moderator whose role is intended to mediate disputes or moderate discussions based on the meritocracy and other values of the community). All mem- bers participate in order to socialize the goals and behaviors of the community; for instance, in open communities are formed around values like “collaboration,” “diversity,” “adaptability,” “trans - parency,” or “meritocracy,” all members are responsible for preventing and reporting harassment or any behavior that might negate these values.&lt;/p&gt;
&lt;p&gt;Since open communities are especially concerned with how they operate, they are often able to use their shared values to in- form decision-making practices and evaluate contributions. Members therefore possess a common language for working to- gether, are able to use that language and standard of behavior to participate in collaborative work, consistently model the behaviors that align with the shared values, and—perhaps most importantly— are accountable for their actions (and trust other community mem- bers to also be accountable).&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;&lt;/hr&gt;&lt;/hr&gt;&lt;/hr&gt;</content><category term="DAMA"></category><category term="Book"></category><category term="FLOSS"></category></entry><entry><title>如何配置 rIME 支持 GitChat 规范?</title><link href="https://blog.zoomquiet.io/rime4gitchat.html" rel="alternate"></link><published>2019-02-01T10:42:00+08:00</published><updated>2019-02-01T10:42:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2019-02-01:/rime4gitchat.html</id><summary type="html">
&lt;h2 id="bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;&lt;a class="headerlink" href="#bg" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新年了, 发现有 &lt;code&gt;长徦式学习症&lt;/code&gt; , 很多不敢肥家被逼婚的程序猿, 宁可呆在公司一边值班一边刷课&lt;/li&gt;
&lt;li&gt;同时, GitChat 也空降新领导, 启动叕一波作者鼓动&lt;/li&gt;
&lt;li&gt;所以, 响应号召, 尝试分享这年几点感触&lt;/li&gt;
&lt;li&gt;只是, 没想到, 对提交文章, 有了细致要求, 任何一点不达标, 直接退稿, 不允许发布&lt;/li&gt;
&lt;li&gt;虽然, 申述说:&lt;ul&gt;
&lt;li&gt;通过配置输入法, 已经有15年从来不用中文标点了&lt;/li&gt;
&lt;li&gt;不仅在编程时杜绝了因为中文标点引发血案&lt;/li&gt;
&lt;li&gt;同时, 也促使行文更加国际化, 也从来没因为标点而引发误解&lt;/li&gt;
&lt;li&gt;但是, GitChat 方面不认为这是读者可以接受的&lt;/li&gt;
&lt;li&gt;其它作者也劝:”从了吧, 您就…”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所以…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="goal"&gt;goal&lt;a class="headerlink" href="#goal" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;找到配置, 恢复全角标点输入&lt;/li&gt;
&lt;li&gt;同时兼容以往全部半角标点输入习惯&lt;/li&gt;
&lt;li&gt;进一步, 是否可以用工具来完成自动化修改?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="logging"&gt;logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;快速记录应对嗯哼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="sed"&gt;sed&lt;a class="headerlink" href="#sed" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/ZoomQuiet/53439dd21c60a935e793"&gt;i hate Chinese symbol! so usage …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">
&lt;h2 id="bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;&lt;a class="headerlink" href="#bg" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新年了, 发现有 &lt;code&gt;长徦式学习症&lt;/code&gt; , 很多不敢肥家被逼婚的程序猿, 宁可呆在公司一边值班一边刷课&lt;/li&gt;
&lt;li&gt;同时, GitChat 也空降新领导, 启动叕一波作者鼓动&lt;/li&gt;
&lt;li&gt;所以, 响应号召, 尝试分享这年几点感触&lt;/li&gt;
&lt;li&gt;只是, 没想到, 对提交文章, 有了细致要求, 任何一点不达标, 直接退稿, 不允许发布&lt;/li&gt;
&lt;li&gt;虽然, 申述说:&lt;ul&gt;
&lt;li&gt;通过配置输入法, 已经有15年从来不用中文标点了&lt;/li&gt;
&lt;li&gt;不仅在编程时杜绝了因为中文标点引发血案&lt;/li&gt;
&lt;li&gt;同时, 也促使行文更加国际化, 也从来没因为标点而引发误解&lt;/li&gt;
&lt;li&gt;但是, GitChat 方面不认为这是读者可以接受的&lt;/li&gt;
&lt;li&gt;其它作者也劝:”从了吧, 您就…”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所以…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="goal"&gt;goal&lt;a class="headerlink" href="#goal" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;找到配置, 恢复全角标点输入&lt;/li&gt;
&lt;li&gt;同时兼容以往全部半角标点输入习惯&lt;/li&gt;
&lt;li&gt;进一步, 是否可以用工具来完成自动化修改?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="logging"&gt;logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;快速记录应对嗯哼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="sed"&gt;sed&lt;a class="headerlink" href="#sed" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/ZoomQuiet/53439dd21c60a935e793"&gt;i hate Chinese symbol! so usage: zhmark2en.sh pwd FILEexNAME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;早年开始实行全半角标点后, 自然的基于 bash 编写了小工具&lt;ul&gt;
&lt;li&gt;可以自动用自己指定规则&lt;/li&gt;
&lt;li&gt;替换批量文本文件中所有全角标点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自然首先尝试基于之, 反转规则:&lt;ul&gt;
&lt;li&gt;还用之前输入习惯&lt;/li&gt;
&lt;li&gt;只是提交前, 用工具自动替换所有半角标点为编辑们渴望和依赖的中文标点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;结果-&amp;gt;放弃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先, 中文标点有很大一批是成对却不同形状 &lt;code&gt;""　"　"&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;原先工具替换时是统一替换为同一形状&lt;/li&gt;
&lt;li&gt;比如,无论 &lt;code&gt;"&lt;/code&gt; 或是 &lt;code&gt;"&lt;/code&gt; 都嗯哼为 &lt;code&gt;"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;现在想相反, 远没那么简单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另外, 原先替换的目标字符在 &lt;span class="caps"&gt;ASCII&lt;/span&gt; 范畴, 无论什么编码都兼容&lt;ul&gt;
&lt;li&gt;现在则不同, 中文标点只存在少数几种编码中&lt;/li&gt;
&lt;li&gt;用 shell 脚本强行修改后&lt;/li&gt;
&lt;li&gt;引发编码混乱, 文本直接乱码了&lt;/li&gt;
&lt;li&gt;强行转换回 &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 依然有很大比例有吞字现象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rime"&gt;rIME&lt;a class="headerlink" href="#rime" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;只能回到输入法本身来定制了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好在 &lt;a href="https://rime.im/"&gt;&lt;span class="caps"&gt;RIME&lt;/span&gt; - 中州韻輸入法引擎&lt;/a&gt; 本身就是高度可定制的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href="https://github.com/ZoomQuiet/ZqBXM/tree/master/Rime-Squirrel"&gt;ZqBXM/Rime-Squirrel at master · ZoomQuiet/ZqBXM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发现当年关键几处配置&lt;/li&gt;
&lt;li&gt;小心尝试几次, 便搞定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zoomq&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Rime&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;alternative&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;全&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;半角标点声明&lt;/span&gt;
    &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;bxm4zq2mac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;私制&lt;/span&gt; &lt;span class="err"&gt;表形码&lt;/span&gt; &lt;span class="err"&gt;输入法定制配置&lt;/span&gt;
    &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;bxm4zq2mac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;私制&lt;/span&gt; &lt;span class="err"&gt;表形码&lt;/span&gt; &lt;span class="err"&gt;输入法行为配置&lt;/span&gt;
    &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;通用输入行为配置&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;其它配置都不用动&lt;/li&gt;
&lt;li&gt;单单在 &lt;code&gt;user.yaml&lt;/code&gt; 中&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ascii_punct: true&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;full_shape: false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这两个配置反转就好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gitchat-style"&gt;GitChat-style&lt;a class="headerlink" href="#gitchat-style" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;饭桶式写作输入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原先 rIME 配合私制 &lt;code&gt;表形码&lt;/code&gt; 进行写作和编程时, 行为很简洁:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;control+空格&lt;/code&gt;　切换到 &lt;code&gt;鼠鬚管&lt;/code&gt; (中州韻 输入法平台 macOS 版本代号)&lt;ul&gt;
&lt;li&gt;随便输入就好…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有大段英文输入, 不想触发中文选字&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shift&lt;/code&gt; 切换状态, 或 &lt;code&gt;option+~&lt;/code&gt; 选择输入状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在, 为了兼容编辑们的期待, 行为就业务性冗余了:&lt;ul&gt;
&lt;li&gt;输入正文时, 必须:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shift&lt;/code&gt; 切换为中文输入模式&lt;/li&gt;
&lt;li&gt;再用 &lt;code&gt;shift+空格&lt;/code&gt; 切换为到 &lt;code&gt;全角&lt;/code&gt; 标点&lt;/li&gt;
&lt;li&gt;此时, 所有标点是&lt;code&gt;中文式&lt;/code&gt;的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输入 markdown 相关结构字符时, 又必须:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shift&lt;/code&gt; 切换为中文输入模式&lt;/li&gt;
&lt;li&gt;再用 &lt;code&gt;shift+空格&lt;/code&gt; 切换为到 &lt;code&gt;半角&lt;/code&gt; 标点&lt;/li&gt;
&lt;li&gt;此时, 类似 &lt;code&gt;+ - &amp;gt;&lt;/code&gt; 以及空格/tab 都是 &lt;span class="caps"&gt;ASCII&lt;/span&gt; 式, markdown 可理解的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输入英文单词/术语时, 又必须:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shift&lt;/code&gt; 切换为中文输入模式&lt;/li&gt;
&lt;li&gt;再用 &lt;code&gt;shift+空格&lt;/code&gt; 切换为到 &lt;code&gt;半角&lt;/code&gt; 标点&lt;/li&gt;
&lt;li&gt;再用 &lt;code&gt;shift&lt;/code&gt; 切换为 en 输入模式&lt;/li&gt;
&lt;li&gt;此时, 才能输入正常 &lt;span class="caps"&gt;ASCII&lt;/span&gt; 字符&lt;/li&gt;
&lt;li&gt;否则是类似 &lt;code&gt;ＡＳＣＩＩ&lt;/code&gt;　全角英文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上, rIME 支持灵活丰富的输入模式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可是为了灵活, 不得不劳累用户显式指令切换模式&lt;/li&gt;
&lt;li&gt;同时, 从法理上不同输入模式中, &lt;span class="caps"&gt;ASCII&lt;/span&gt; 字符形态是不兼容&lt;/li&gt;
&lt;li&gt;而 GitChat 编辑又要求在同一篇文章中:&lt;ul&gt;
&lt;li&gt;不同格式标点,空格&lt;/li&gt;
&lt;li&gt;和不同形式字符&lt;/li&gt;
&lt;li&gt;又必须 &lt;code&gt;合理? 美观? 合规?&lt;/code&gt; 并举&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;导致至少多出一倍毫无必要的击键操作&lt;/li&gt;
&lt;li&gt;以及, 和以往主要输入行为完全不同的心智判定损耗&lt;/li&gt;
&lt;li&gt;可以说, 是 &lt;code&gt;GitChat 式工伤&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refer"&gt;refer&lt;a class="headerlink" href="#refer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitbook.cn/books/5c47da3ef79c0c1f90492403/index.html"&gt;Chat 发布与写作指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://w3c.github.io/clreq/zh/"&gt;中文排版需求&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://devrel.zoomquiet.top/data/20150402184838/index.html"&gt;从”中文排版规范”开始&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;对比: &lt;a href="https://www.w3.org/TR/jlreq/"&gt;Requirements for Japanese Text Layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.md#%E7%A9%BA%E6%A0%BC"&gt;中文文案排版指北&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vinta/pangu.js?utm_source=www.appinn.com"&gt;vinta/pangu.js: 為什麼你們就是不能加個空格呢?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/Vu-20r7_LCTToyaOeli7tg"&gt;全角半角碎碎念 - The Type&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;...可见,中文的标点符号既可以是'全宽'的也可以是'半宽'的,'中文＝全角'完全是技术问题导致的误解.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2"&gt;全角和半角 - 维基百科,自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sayeahooo"&gt;Sayeahooo&lt;a class="headerlink" href="#sayeahooo" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;h 资料搜索理解&lt;/li&gt;
&lt;li&gt;2d gitlab 尝试/生效&lt;/li&gt;
&lt;li&gt;4h github 嗯哼&lt;ul&gt;
&lt;li&gt;3h 域名迁移尝试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2h 截屏,文档嗯哼…&lt;/li&gt;
&lt;/ul&gt;</content><category term="MAC"></category><category term="Livin"></category><category term="SCM"></category><category term="markdown"></category></entry><entry><title>内圈梗集锦(人工智能简史)书评</title><link href="https://blog.zoomquiet.io/180220-book-ai-historic.html" rel="alternate"></link><published>2018-02-20T16:42:24+08:00</published><updated>2018-02-20T16:42:24+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2018-02-20:/180220-book-ai-historic.html</id><summary type="html">
&lt;p&gt;版权归作者所有,任何形式转载请联系作者. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;作者&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Zoom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quiet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;来自豆瓣&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;来源&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//book.douban.com/review/9167418/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是也乎,(￣▽￣)&lt;/p&gt;
&lt;p&gt;现在技术类图书有一种不好的倾向:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;书名有简史的&lt;/span&gt;
&lt;span class="err"&gt;总是比通史要难写&lt;/span&gt;
&lt;span class="err"&gt;但是有趣也有用的多&lt;/span&gt;
&lt;span class="err"&gt;关键特别有种&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以往从信息简史开始到人类/未来等诸简史, 其实都有点以史预言将来的意思,&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;AI&lt;/span&gt; 简史, 反而专注陈述过去,&lt;/p&gt;
&lt;p&gt;全书少了一个关键内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AI&lt;/span&gt;&lt;span class="err"&gt;历史进展中&lt;/span&gt;
&lt;span class="err"&gt;各种路线的时间线&lt;/span&gt;
&lt;span class="err"&gt;和关键人物&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;作品&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;理论&lt;/span&gt;
&lt;span class="err"&gt;的关系图谱&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外,和其它技术图书类似(是的,类似流畅的 Python 之类技术人员自己写的图书);
书中各种小扣儿比正文有趣的多,
只是, 作者是海外华人, 用的都是中文中精彩的梗, 目测难以翻译为英文挣些更大的名望.&lt;/p&gt;
&lt;p&gt;作者, 明显是业内人士, 从参考文献列表就可以看出,
俺看过,这么多技术类图书, 也就暗时间 …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;版权归作者所有,任何形式转载请联系作者. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;作者&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Zoom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quiet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;来自豆瓣&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;来源&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//book.douban.com/review/9167418/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是也乎,(￣▽￣)&lt;/p&gt;
&lt;p&gt;现在技术类图书有一种不好的倾向:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;书名有简史的&lt;/span&gt;
&lt;span class="err"&gt;总是比通史要难写&lt;/span&gt;
&lt;span class="err"&gt;但是有趣也有用的多&lt;/span&gt;
&lt;span class="err"&gt;关键特别有种&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以往从信息简史开始到人类/未来等诸简史, 其实都有点以史预言将来的意思,&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;AI&lt;/span&gt; 简史, 反而专注陈述过去,&lt;/p&gt;
&lt;p&gt;全书少了一个关键内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AI&lt;/span&gt;&lt;span class="err"&gt;历史进展中&lt;/span&gt;
&lt;span class="err"&gt;各种路线的时间线&lt;/span&gt;
&lt;span class="err"&gt;和关键人物&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;作品&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;理论&lt;/span&gt;
&lt;span class="err"&gt;的关系图谱&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外,和其它技术图书类似(是的,类似流畅的 Python 之类技术人员自己写的图书);
书中各种小扣儿比正文有趣的多,
只是, 作者是海外华人, 用的都是中文中精彩的梗, 目测难以翻译为英文挣些更大的名望.&lt;/p&gt;
&lt;p&gt;作者, 明显是业内人士, 从参考文献列表就可以看出,
俺看过,这么多技术类图书, 也就暗时间, 能比肩了,
基本上这本不到300页的小书, 涉及的参考图书数量是俺看过的所有大陆华人写的技术图书参考图书的总合还多…&lt;/p&gt;
&lt;p&gt;当然, 看下来还是很爽利的,
特别是最后一章最后一节, 是作者的巅峰之作, 也是全书的精华,
另外, 作者原创的图灵小传也值得反复嗯哼…&lt;/p&gt;
&lt;p&gt;简单的说, 这是一部用49城侃大山的精神结构来回顾&lt;span class="caps"&gt;AI&lt;/span&gt; 这一领域发展过程的仙书.&lt;/p&gt;
&lt;p&gt;对于准备或是从事 &lt;span class="caps"&gt;AI&lt;/span&gt; 开发工作的程序猿来说,
最大的功能就是知道自己袓师爷们的关系,
以及知道想深入下去, 应该补什么书了. &lt;/p&gt;
&lt;p&gt;~ &lt;a href="https://book.douban.com/review/9167418/"&gt;内圈梗集锦(人工智能简史)书评&lt;/a&gt;&lt;/p&gt;</content><category term="DAMA"></category><category term="Book"></category><category term="Chaos"></category></entry><entry><title>最后的协议</title><link href="https://blog.zoomquiet.io/160619-protocol4dying.html" rel="alternate"></link><published>2016-06-19T21:12:21+08:00</published><updated>2016-06-19T21:12:21+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-06-19:/160619-protocol4dying.html</id><summary type="html">
&lt;ul&gt;
&lt;li&gt;来自: &lt;a href="https://www.facebook.com/notes/%E8%91%89%E4%BF%A1%E6%BA%90/%E8%87%A8%E7%B5%82%E5%8D%94%E5%AE%9Aa-protocol-for-dying/10153556546128601"&gt;臨終協定(A Protocol for Dying)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文: &lt;a href="http://hintjens.com/blog:115"&gt;A Protocol for Dying - Hintjens.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ZeroMQ 是最成功的工业化的消息管理平台.
作者能如此平静的离开, 又留下程序猿对生死的分析,
实在太有感动了,
但是,翻译发布在不存在的 fb 上,
所以,顺手复制分享了… )&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Pieter_Hintjens"&gt;Pieter Hintjens&lt;/a&gt; 寫於 2016年4月22日11:43分  &lt;/p&gt;
&lt;p&gt;我寫最後一篇的時候到了. 如果我有時間處理所有的事情的話或許我會再多寫點,但此後,我得要把注意力放在床上最舒適的姿勢,打止痛藥的時間以及我身邊的人了. &lt;/p&gt;
&lt;p&gt;昨天我有十二個訪客,包括我可愛的小孩,你可以想像那是有點虛脫的感覺,絡繹不絕的朋友跟家人,就像一場豪氣十足,熱水無限量供應的泡澡. &lt;/p&gt;
&lt;p&gt;我曾經是一個與社會斷絕聯繫又孤單的年輕人,也許有點自閉,心中只有工作,游泳跟幾隻貓. 對於’跟其他人跟在一起會感到快樂’這種想法感到奇怪,不過我的工作還算有點價值,至少我自己是這麼想的 …&lt;/p&gt;</summary><content type="html">
&lt;ul&gt;
&lt;li&gt;来自: &lt;a href="https://www.facebook.com/notes/%E8%91%89%E4%BF%A1%E6%BA%90/%E8%87%A8%E7%B5%82%E5%8D%94%E5%AE%9Aa-protocol-for-dying/10153556546128601"&gt;臨終協定(A Protocol for Dying)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文: &lt;a href="http://hintjens.com/blog:115"&gt;A Protocol for Dying - Hintjens.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ZeroMQ 是最成功的工业化的消息管理平台.
作者能如此平静的离开, 又留下程序猿对生死的分析,
实在太有感动了,
但是,翻译发布在不存在的 fb 上,
所以,顺手复制分享了… )&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Pieter_Hintjens"&gt;Pieter Hintjens&lt;/a&gt; 寫於 2016年4月22日11:43分  &lt;/p&gt;
&lt;p&gt;我寫最後一篇的時候到了. 如果我有時間處理所有的事情的話或許我會再多寫點,但此後,我得要把注意力放在床上最舒適的姿勢,打止痛藥的時間以及我身邊的人了. &lt;/p&gt;
&lt;p&gt;昨天我有十二個訪客,包括我可愛的小孩,你可以想像那是有點虛脫的感覺,絡繹不絕的朋友跟家人,就像一場豪氣十足,熱水無限量供應的泡澡. &lt;/p&gt;
&lt;p&gt;我曾經是一個與社會斷絕聯繫又孤單的年輕人,也許有點自閉,心中只有工作,游泳跟幾隻貓. 對於’跟其他人跟在一起會感到快樂’這種想法感到奇怪,不過我的工作還算有點價值,至少我自己是這麼想的. 我們用Cobol寫程式產生器,我寫的編輯器在公司中很快受歡迎,因為它運作的非常好,而且能在我們所有的系統平台上執行. 我自學C跟8086組合語言,還寫過幾個工具性的共享軟體. &lt;/p&gt;
&lt;p&gt;久而久之我發現如果跟陌生人交談,任何形式的互動過程(例如買熱狗,雜貨的場合)對方都會愉快地回應,這變成我的藥癮,就像那些喝咖啡慢慢上癮的人一樣. &lt;/p&gt;
&lt;p&gt;它逐漸變成基本的,然後又變成我工作的目地:到陌生的地方去見不同的人. 我喜歡參加研討會,因為在那裡找人講話不需要想藉口,每個人都喜歡而且想要講話. 我很少在那裡討論技術性議題. 如果你覺得應該要討論的話,讀程式碼去吧. &lt;/p&gt;
&lt;p&gt;因為這樣,這幾十年來我很自豪我的實際工作就是找人講話,聽他們講什麼,跟他們交流,然後綜合起來再分享給其他人. 我總共在歐洲,美洲,非洲與亞洲做了上千場對談,我樂於接受任何人們說我有創意,聰明等等的讚譽. 其實那些我曾參與打造與撰寫的模型或理論,一直都是採擷於現實生活中與其他人的互動. &lt;/p&gt;
&lt;p&gt;感謝你們,我的朋友們,因為你們才有那些. 當我說 ” 我愛你們 ” 時是有言外之意的,可以說其實是你們一直在專業上與知識上灌溉我. &lt;/p&gt;
&lt;p&gt;所以,我要寫下這個最後的模型,這次是關於如何面對死亡,我付出一點時間來給大家道破一些直率了當的知識. 這次我寫的不是規格書(&lt;span class="caps"&gt;RFC&lt;/span&gt;; Request for Comments),無法再請大家給意見了 :)&lt;/p&gt;
&lt;h2 id="_1"&gt;事情是怎麼發生的?&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;技術上來講,我所罹患的膽管癌已經轉移到左右的肺部. 從二月份開始乾咳,疲憊感越來越沈重,而且無法再專心工作. 三月份我父親過世我們忙進忙出辦理他的後事時,咳嗽一直跟著我. 四月八日我去找醫生跟她說我很不舒服,她替我安排了緊急的電腦斷層掃描(&lt;span class="caps"&gt;CAT&lt;/span&gt; Scan)跟抽血檢驗. &lt;/p&gt;
&lt;p&gt;四月十三日進行可怖的內視鏡及切片,四月十五日作正子斷層掃描(&lt;span class="caps"&gt;PET&lt;/span&gt; Scan),四月十六日本來我打算開車到Eindhoven去NextBuild公司演講,沒去成反而是進了急診室,作切片那一側有劇痛,打了抗生素之後疼痛才感到紓解. 四月十八日腫瘤科醫生確認是癌症轉移,我無法出院得要繼續留下來,我的主治大夫正在考慮要進行怎樣的化療,我罹患的癌症在歐洲病例不多,具體的資料很少. &lt;/p&gt;
&lt;p&gt;我們所確知的是膽管癌對化療的反應不佳,再者,我身上這癌症很兇而且移動得很快,第三,身體其它地方(肺部)已經發現有癌症轉移,這些都是清清楚楚的具體資料. &lt;/p&gt;
&lt;p&gt;所以,那一天我對外公開了這個訊息,並準備面對死亡. &lt;/p&gt;
&lt;h2 id="_2"&gt;與臨終者交談&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;與臨終者談話可能很艱辛,我們暫時稱他為Bob,其他人稱為Alice,以下幾點是Alice不應該對Bob說的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"撐著點!你必須保持希望,你必須擊敗它!"&lt;/code&gt; ,你要假設 ‘Bob已經盡力去擊敗病魔了’,這個假設不會錯的,就算他沒有,那也是他的選擇. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;"好悲慘,我好難過,你不能死"&lt;/code&gt;,我女兒曾對我講過這句話,我當時跟她說這是無可爭論的現實,死亡是不允許我們選擇的. 對事實生氣或難過是在浪費時間無法改變事實. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;"你一定可以打敗它!不試怎麼知道"&lt;/code&gt; ,這是Alice在表達她的期望. 錯誤的期望不是治療,好的化療藥劑或者解痛劑,那才是治療. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;"傳聞有一些實驗性病人被醫好了"&lt;/code&gt;,這句話讓我很想拿鎚子,還好對我講這種話的人不多. 就算真有仙丹妙藥,也要考慮費用跟找到它對其他人所造成的壓力,我們大家都知道,找到的機率像中頭彩一樣渺茫,那樣做的話很自私也沒效益. 人之為人,有生有死. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;"讀聖經第幾章第幾節,會對你有幫助"&lt;/code&gt;,這種講法是既魯莽又失禮,再加上愚蠢與傲慢. 如果Bob需要信仰幫忙的話,他自己會去找牧師,如果沒有就是他不想去. 這句話也會讓我想拿鎚子. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;躡聲躡語吞吞吐吐地探問是一種消極性的騷擾&lt;/code&gt;. 讓Bob一再反覆回答一些細微,無聊的蠢問題. 例如’我把你吵醒了嗎’,很可能Bob根本沒有心情跟你作無意義的閒聊亂扯,他要麼想要人們親近他,物理性的,要麼跟他講些有趣的事情(下面會講). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外,不要打電話給他然後在電話上哭,如果你感覺快要哭了,先掛斷電話等個十分鐘後再打. 流眼淚不是問題,可是對Bob而言’感受到自己的悲哀’更令他完全陷入無盡的黑暗. 我已經知道該怎麼主導自己的情緒,然而大部分的情況下Bob的心靈還是很脆弱的. &lt;/p&gt;
&lt;p&gt;以下是Alice可以對Bob交談,會令他感到快樂的事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;曾經一起經歷過的陳年往事. “還記得那時候嗎?”,”喔!我想起來了,…,真棒!”&lt;/li&gt;
&lt;li&gt;診療的細節. Bob現在困在病床上,他經歷林林總總行禮如儀的療程,醫護人員,藥物以及他罹患的疾病等等. 我會立刻靠上前去傾聽Bob跟我分享. &lt;/li&gt;
&lt;li&gt;幫忙Bob處理技術性問題(譯註一). 要讓生活井然有序很麻煩,需要人出手相助與心力關照. &lt;/li&gt;
&lt;li&gt;假若Bob像我一樣是個作家的話,可以跟他說”我買了你的書”這一類的話,不管是基於阿諛奉承或者真心都能讓Bob會心一笑. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還有,除了快樂之外的其他情緒不必透露. 記得,不要給他出新的功課. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;譯註一:可能是指一些無關心理,情緒性層面的事情. 例如跑跑腿買點東西之類,形而下的事情.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="bob"&gt;Bob的責任&lt;a class="headerlink" href="#bob" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;不是全部都是Alice的事,在此協定中Bob也有他的責任,至少有以下幾件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常喜樂. 這點聽起來有迂腐但它是必要的. 如果Bob鬱鬱寡歡,Alice每次跟他講話也會跟著心情沮喪. &lt;/li&gt;
&lt;li&gt;無庸置疑,Bob必須把自己的事情處理好. 既然已經預期到來日無多,應該盡力讓自己變得可有可無. 在家庭上,這不可能做到,但是在工作上是做得到的. 我已經被認為會死好幾年了,所以這幾年來我已經把自己從活躍的ZeroMQ社群裡面抽離. &lt;/li&gt;
&lt;li&gt;減少所有能減少的壓力跟花費. 例如,比利時可以安樂死,我已經告訴醫生請他們準備了. (不是現在!時機到的時候…)我會請人們當我還活著的時候來道別,不必辦喪禮. 我準備把大體捐給大學,如果他們要的話. &lt;/li&gt;
&lt;li&gt;認清現實,願望不是醫療,這點我已經解釋過了. 如果你打算跟你的醫生協商,那麼討論些實用性的,讓其他人都能受惠的議題. 我已經告訴我的醫生,如果他們想在我身上實驗任何化療藥物就儘管去作. 他們獲得了數據,而我起碼也對這個讓我多活了五年以上的醫療系統作點貢獻. &lt;/li&gt;
&lt;li&gt;作最壞打算. 我的腫瘤醫師當時一看到我的片子馬上打電話給我,說她研判是癌症. 左右兩邊的肺部都有,處處可見. 我放下電話,告訴孩子,隔天我也把最壞的狀況告訴孩子們的學校,然後是家庭律師,公證人. 十天之後,切片病理檢驗確認是癌症,這額外的十天讓我有時間作準備,也讓我自己有時間替自己感到悲傷. &lt;/li&gt;
&lt;li&gt;坦誠,透明地面對其他人. 其他人需要有時間去悲傷,如果他們能在Bob還能講話時跟他討論的話,處理後事相對會簡單得多. 沒什麼好難以啟齒的,死亡並不是失敗. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;向孩子們解釋&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我的小孩分別是12歲,9歲,5歲. 悲劇啊等等等,沒有父親陪著長大. 這是現實. 他們長大的時候,我活在他們的&lt;span class="caps"&gt;DNA&lt;/span&gt;裡面,活在Youtube上無盡的會議演講裡面,活在我的文章裡面. &lt;/p&gt;
&lt;p&gt;這幾年來我已經慢慢地向他們解釋很多遍,終有一天我會走,或早或晚. 每個人都會死,是的,小Gregor,你也是呀. 那是生命的一部分. &lt;/p&gt;
&lt;p&gt;小Gregor,想像你有一盒樂高玩具,你拼了一棟房子,留著它又一直繼續拼新的房子,舊的都不拆掉的話會發生什麼事?”盒子會變成空的,爹地”,很好,這就對了,那麼你能繼續蓋新房子嗎?”不可以,不行了” . 嗯,我們就像樂高遊戲的房子,死了以後我們會被拆解,就像回到盒子裡,讓新的身體可以被生出來,這就是生死之轉輪. &lt;/p&gt;
&lt;p&gt;不過,他們最常看到的是自己的老爸快樂又輕鬆(不是因為止痛劑的緣故),而且好幾個禮拜都感覺蠻正常地在跟他們說再見. 我好感恩沒有突然掛掉,我好感恩沒有像植物人那樣失去心智. &lt;/p&gt;
&lt;p&gt;而且我已經告訴我的孩子們要會游泳,騎單車,溜冰跟射擊,要會煮東西,要去旅行,要去露營,要會使用新的科技不必害怕. Gregor三歲的時候就在玩麥塊(Minecraft)左手鍵盤右手滑鼠. Noemie七歲的時候就學會用手槍. 他們會講好幾種語言. 他們有自信而且學得很快,就跟他們老爸一樣. &lt;/p&gt;
&lt;p&gt;每個人都應該認識死亡的意義. 構成一個完整的個體的核心之一就是接納自己生命有限的真相. 當然,我們要為活下去打拼,然而當它要成為過去的時候,我們就擁抱這個終點吧. 我很高興自己能把這門功課親自傳授給孩子們,以前從來沒有人會告訴我這些事情. &lt;/p&gt;
&lt;h3 id="_4"&gt;安樂死&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我很慶幸自己最後還是沒有離開比利時. 這個國家允許臨終或生命品質已經糟糕透頂的病人自主地選擇結束生命. 後者需要經過三個醫師及一個精神科醫師的評估,以及四個禮拜的緩衝期. 若是前者則只須一個醫生的評估意見. &lt;/p&gt;
&lt;p&gt;我父親是安樂死的,他選擇在週二復活節,那時我們好幾個家人陪伴他經歷一個簡單又安詳的過程. 第一劑注射讓他進入昏睡狀態,第二劑讓心臟停止跳動. 當時我覺得這樣死法不錯,雖然當時我不知道接著輪到我病了,(總之)安樂死是我已經想過的事. &lt;/p&gt;
&lt;p&gt;令我感到震撼的是,都已經是2016年了依然很少國家允許安樂死,強制要求病人承受腐爛的折磨後與無效的急救(譯註二). 安樂死跟癌症特別有關係,因為癌症是主要的死因之一. 如果你所屬選區的民意代表反對的話,請他抽空讓你能跟他遊說一下,關於尊嚴地死亡才是正確的方式這件事. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;譯註二:可能是指因急救過程中,因一再的電擊造成皮膚燒焦或因插管而造成潰爛的情況. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_5"&gt;我對這整件事情的感覺&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我從來不是一個怕事的人. 關於我成為’&lt;a href="http://hintjens.com/blog:21"&gt;掠奪者角色&lt;/a&gt; (Allen Ding形容得很好的那個)’這件事情,我的死亡大筆一揮讓我能淡然面對它在事業與社會上所產生的風險,也讓我們能夠在’權力遊戲 Game of Thrones’計畫結束後淡定下來. 那從來不是真正的我,只是恰巧在那個時間,那個地點我扮演了那個必須讓事情繼續運作下去的角色. &lt;/p&gt;
&lt;p&gt;準備了多年好去面對這一切,親眼目睹數個精心籌劃的計畫同步進行的壯觀場面,讓我深深感到心滿意足. 從2011年開始我成為手槍射擊專家,自學彈鋼琴(還自編了幾段小曲),能親眼見到自己的小孩長成具有快樂,朝氣蓬勃的性格,寫了三本書,還指導ZeroMQ社群能具備穩重可靠的特質. Bob如我,夫復何求?&lt;/p&gt;
&lt;p&gt;這裡的醫護人員很親切,我沒有任何抱怨,我只有感恩所有的朋友,這幾年來你們帶給我歡樂,也感謝那些維持我性命跟活力的藥物. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;謝謝你們 ! :)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id="_6"&gt;替孩子們著想&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;請用這篇文章來增添你的故事. 如果你把故事寫在別的地方或曾經Email給我的話,請複製/貼上在本篇下方的評論(Comments)上. 你想要寫荷蘭文或法文的話,請便,如果那是你使用的語言. 我想讓孩子們從一個地方就可以知道他們的父親在別人口中是怎樣的人,這樣會比較好. 
許多想捐點給錢幫助孩子們的人在問我的Paypal帳號是: ph@imatix.com . &lt;/p&gt;
&lt;h1 id="_7"&gt;譯文結束&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Pieter Hintjens 的參考資料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Pieter_Hintjens"&gt;Wikipedia上關於Piter Hintjens 的條目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hintjens.com/"&gt;hintjens.com&lt;/a&gt; 部落格&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hintjens.com/blog:74"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Living Systems” 活生生的系統. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zeromq.org/"&gt;ZeroMQ自由軟體計畫&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rfc.zeromq.org/"&gt;ZeroMQ相關的通訊協定與規格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theedg.es/"&gt;edgenet project&lt;/a&gt; 這個計畫要建構完全安全但匿名的&lt;span class="caps"&gt;P2P&lt;/span&gt;網路&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920026136.do"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;ZeroMQ - Messaging for Many Applications” (O’Reilly)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cultureandempire.com/"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Culture and Empire: Digital Revolution”&lt;/a&gt;.(Gitbook 電子書)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://psychopathcode.com/"&gt;The Psychopath Code&lt;/a&gt; 最近的著作(Gitbook 電子書)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scalable-c.com/"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Scalable C”&lt;/a&gt; 撰寫中(Gitbook 電子書)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;譯後語:&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;這篇文章的內容涉及面對臨終者的態度,生死事大,如果譯文有錯誤的地方,非常歡迎告訴我修正. &lt;/p&gt;
&lt;p&gt;我們都有機會面對臨終者,遲早有一天我們也都會成為臨終者,然而在成長過程中很少有機會學習如何地去面對臨終相關問題,如果因為無知而犯錯,將會是無法彌補的,一輩子都會在良心上感覺到虧欠. &lt;/p&gt;
&lt;p&gt;我翻譯這篇文章,並非主張本協定的內容可以完全原封不動地套用到每一個個別的情境. 不僅是文化差異而已,甚至不同的家庭,臨終者的性格特質,彼此的角色等等都需要列入考量(例如關於提起聖經章節這一件事),這個議題是沒有&lt;span class="caps"&gt;SOP&lt;/span&gt;的,每個個案都有屬於該個案當下的協定. 如果是家屬或者病患本人,或許可以向醫院的社工師作相關諮詢. &lt;/p&gt;
&lt;p&gt;雖然具體的行動要因人,因事,因地制宜,然而,我相信這份協定的內容在原則層次是跨越文化而共通的,例如,雙方都有責任與義務坦然面對臨終這件事,以及人應該有選擇死得有尊嚴的權利,還有那些從臨終者角度出發的觀點所象徵的尊重臨終者主觀意願的態度,都是很有價值的觀點. &lt;/p&gt;
&lt;p&gt;Google一下就可以發現台灣已經有很多人在倡導與臨終,安樂死相關的理念,值得我們向她/他們致敬,但我相信他們的努力還沒有受到應有的重視,對於這個議題,我們還有很多要努力的地方. &lt;/p&gt;</content><category term="DAMA"></category><category term="Pythoneer"></category><category term="Chaos"></category></entry><entry><title>流行之恶</title><link href="https://blog.zoomquiet.io/141212-pop-is-evil.html" rel="alternate"></link><published>2014-12-12T18:18:18+08:00</published><updated>2014-12-12T18:18:18+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-12-12:/141212-pop-is-evil.html</id><summary type="html">
&lt;p&gt;&lt;img alt="popular_science_logo.png" src="http://zoomq.qiniudn.com/ZQCollection/logo/popular_science_logo.png?watermark/2/text/Wm9vbS5RdWlldA==/fill/V2hpdGU=/fontsize/320/dissolve/85|imageView2/2/w/320"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;你觉得有生命力流行的东西就是好的么&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;俗话说祸害遗千年&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="err"&gt;从汉语来看&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;楚辞也很棒&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;可是也式微了&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;你怎么想&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;俺被推荐加入了一个有海量学霸的微信群, 每天被越量新知轰炸, 而且经常有非常尖锐的问题戳过来,&lt;/p&gt;
&lt;p&gt;为了保持心意通达, 决定尽可能公开竭力回答则个, 以能忘记…&lt;/p&gt;
&lt;p&gt;那种心塞的感觉!&lt;/p&gt;
&lt;h2 id="_2"&gt;厘定&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为一头工科狗, 对问题一向抱有最深的恶意, 
必须厘凊 问题边界/背景/意图, 否则,就感觉无从回答的样纸.&lt;/p&gt;
&lt;p&gt;目测:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;生命力&lt;/code&gt;-&lt;code&gt;流行&lt;/code&gt;-&lt;code&gt;好&lt;/code&gt; 是设问关键词&lt;ul&gt;
&lt;li&gt;&lt;code&gt;生命力&lt;/code&gt; ~ 徦借生物学中的专有名词, 应该代表一种文化现象能够随着时代的发展,不断契合当下风气,嵌入持续发生的社会事件中,为人们不断的运用, 从而形成生物不断传承的观感&lt;/li&gt;
&lt;li&gt;&lt;code&gt;流行&lt;/code&gt; ~ 是标准的社会学名词了,简单的说就是在主流媒体中,突然海量出现,又快速消失的一种人类社会类型化信息涌动的现场&lt;/li&gt;
&lt;li&gt;&lt;code&gt;好&lt;/code&gt; ~ 介个忒泛了,没法儿理性界定,从发问者的教育背景设想,只能先假定为当前的 &lt;code&gt;普世价值观&lt;/code&gt; 所谓正向的取向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;祸害遗千年&lt;/code&gt; 是反诘 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="popular_science_logo.png" src="http://zoomq.qiniudn.com/ZQCollection/logo/popular_science_logo.png?watermark/2/text/Wm9vbS5RdWlldA==/fill/V2hpdGU=/fontsize/320/dissolve/85|imageView2/2/w/320"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;你觉得有生命力流行的东西就是好的么&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;俗话说祸害遗千年&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="err"&gt;从汉语来看&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;楚辞也很棒&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;可是也式微了&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;你怎么想&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;俺被推荐加入了一个有海量学霸的微信群, 每天被越量新知轰炸, 而且经常有非常尖锐的问题戳过来,&lt;/p&gt;
&lt;p&gt;为了保持心意通达, 决定尽可能公开竭力回答则个, 以能忘记…&lt;/p&gt;
&lt;p&gt;那种心塞的感觉!&lt;/p&gt;
&lt;h2 id="_2"&gt;厘定&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为一头工科狗, 对问题一向抱有最深的恶意, 
必须厘凊 问题边界/背景/意图, 否则,就感觉无从回答的样纸.&lt;/p&gt;
&lt;p&gt;目测:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;生命力&lt;/code&gt;-&lt;code&gt;流行&lt;/code&gt;-&lt;code&gt;好&lt;/code&gt; 是设问关键词&lt;ul&gt;
&lt;li&gt;&lt;code&gt;生命力&lt;/code&gt; ~ 徦借生物学中的专有名词, 应该代表一种文化现象能够随着时代的发展,不断契合当下风气,嵌入持续发生的社会事件中,为人们不断的运用, 从而形成生物不断传承的观感&lt;/li&gt;
&lt;li&gt;&lt;code&gt;流行&lt;/code&gt; ~ 是标准的社会学名词了,简单的说就是在主流媒体中,突然海量出现,又快速消失的一种人类社会类型化信息涌动的现场&lt;/li&gt;
&lt;li&gt;&lt;code&gt;好&lt;/code&gt; ~ 介个忒泛了,没法儿理性界定,从发问者的教育背景设想,只能先假定为当前的 &lt;code&gt;普世价值观&lt;/code&gt; 所谓正向的取向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;祸害遗千年&lt;/code&gt; 是反诘&lt;ul&gt;
&lt;li&gt;已经说是俗语了, 应该不是设问的论点&lt;/li&gt;
&lt;li&gt;因为已经是俗语了哪,有相对公认的阐述结构:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;好人不长命, 祸害遗千年&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标准的中式反转,多层矛盾统一体&lt;/li&gt;
&lt;li&gt;现代社会认同的是: 好人应对坏人着意祸害时,一般是无力自保的&lt;/li&gt;
&lt;li&gt;但是,历史对善恶的评定总是倾向公允的&lt;/li&gt;
&lt;li&gt;所以,好人虽然早死,但是,比祸害遗臭千年,也算得其所哉了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;汉语&lt;/code&gt;-&lt;code&gt;楚辞&lt;/code&gt;-&lt;code&gt;式微&lt;/code&gt; 是连带伤害&lt;ul&gt;
&lt;li&gt;&lt;code&gt;汉语&lt;/code&gt; 这是探讨主体, 不过,已经不是学术意义上的 语言学中的汉语言了&lt;ul&gt;
&lt;li&gt;主要关注,当前在互联网中,疯狂演进的网络中文&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;人艰不拆&lt;/code&gt; 到 &lt;code&gt;地命海心&lt;/code&gt; 再到 &lt;code&gt;撕逼大战&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无方向/无底线/无逻辑/无结构 的 再造/自造/强造&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;楚辞&lt;/code&gt; 是列举的一个比较对象&lt;ul&gt;
&lt;li&gt;这倒变成了严格的文学分类上的特定文体&lt;/li&gt;
&lt;li&gt;而且应该有配合专曲牌才能正当诵出的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;式微&lt;/code&gt; 太文雅的一种形容了&lt;ul&gt;
&lt;li&gt;好象 楚辞 从汉以后就根本没有流行过&lt;/li&gt;
&lt;li&gt;因为 楚辞 本身一经发表,就已经完美&lt;/li&gt;
&lt;li&gt;后人 也就是在传诵/吟哦/分析 没有再创作的余地了&lt;/li&gt;
&lt;li&gt;不是第一种也不会是最后一种,将自个儿写死了的体裁 ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;分析&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;综上,俺只能将问题翻译为以下这组递进的分析,以期表明私人态度:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有&lt;code&gt;生命力&lt;/code&gt;才&lt;code&gt;流行&lt;/code&gt;所以是&lt;code&gt;好的&lt;/code&gt; ~ 这本身不是俺的态度&lt;/li&gt;
&lt;li&gt;之所以能流行, 必定有其生命力所在&lt;/li&gt;
&lt;li&gt;生命力是指能同现行社会主体 情绪/意识/公知 持久绑定的结合点&lt;ul&gt;
&lt;li&gt;这才导致可以跟随不断发生/传播 的社会事件,被媒体引用&lt;/li&gt;
&lt;li&gt;形成流行起来的现象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是:&lt;ul&gt;
&lt;li&gt;流行的当然不一定是好的, 比如说 流行性感冒&lt;/li&gt;
&lt;li&gt;但是,能流行的这种内在能量是值得分析/尊敬的&lt;/li&gt;
&lt;li&gt;毕竟这是社会主体意识自身无意识的选择&lt;/li&gt;
&lt;li&gt;刚好有这种形式/模式的阐述结构, 可以用精练的文字包含/代表/传达越来越丰富的多方面情绪和态度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进一步的, 这种生命力来自社会岐化情绪的表述愿望&lt;ul&gt;
&lt;li&gt;本身就很不稳定&lt;/li&gt;
&lt;li&gt;因为社会变化的加速&lt;/li&gt;
&lt;li&gt;很难保持一组相同情绪的组合&lt;/li&gt;
&lt;li&gt;同时,一组相似情绪的流行性表述,也很难持续的引发大众的消费|被消费兴趣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更何况,是否为 &lt;code&gt;好&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;这种评定不能太过上帝视角 来判别&lt;/li&gt;
&lt;li&gt;从俺积极运用 &lt;code&gt;走的了心&lt;/code&gt; 的网络用词过程中&lt;/li&gt;
&lt;li&gt;肯定的/感叹的 是中文, 当代汉语, 在互联网中能够如此鲜亮的自行变化的能力&lt;/li&gt;
&lt;li&gt;普通/平常/简单/相同 的文字,只是简单组合一下,就能包容如此多层蕴意&lt;/li&gt;
&lt;li&gt;好比盗梦空间中的多层梦境:&lt;ul&gt;
&lt;li&gt;字面含义多数只是进行现实描述&lt;/li&gt;
&lt;li&gt;次层表述了造辞者的态度和倾向&lt;/li&gt;
&lt;li&gt;再层通过历史事件的联想,指代了一大批同类社会现象&lt;/li&gt;
&lt;li&gt;最后进入了 Limbo 已经不能简单的 Kick 回到现实描述&lt;ul&gt;
&lt;li&gt;即所谓激发了读者自身的脑补程序,进行持续的自发的吻合最新社会事件的再匹配再契合再感动&lt;/li&gt;
&lt;li&gt;从而驱使受众再次选择使用这一网络词组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;经典的例子: &lt;code&gt;喂人民服雾&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;是也乎&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;综上, 俺对此问题的私人无责任回答,可以总结为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能流行的不一定是好的&lt;/li&gt;
&lt;li&gt;但是有生命力本身是值得肯定的&lt;/li&gt;
&lt;li&gt;中文在互联网时代这种精彩的自我演变基因是令人自豪的&lt;/li&gt;
&lt;li&gt;不过,是否提倡这种尝试?&lt;ul&gt;
&lt;li&gt;从教育角度,再议&lt;/li&gt;
&lt;li&gt;从国学角度,再议&lt;/li&gt;
&lt;li&gt;从文学角度,再议&lt;/li&gt;
&lt;li&gt;从私人角度,点赞&lt;/li&gt;
&lt;li&gt;从其它方面,再议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="change-log"&gt;Change log&lt;a class="headerlink" href="#change-log" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;原稿: &lt;a href="http://blog.zoomquiet.io/141212-pop-is-evil.html"&gt;流行之恶&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;141212 后台运算了两天,尝试输出第一次&lt;/li&gt;
&lt;li&gt;141210 被戳提问&lt;/li&gt;
&lt;/ul&gt;</content><category term="DAMA"></category><category term="Pythoneer"></category><category term="Chaos"></category></entry><entry><title>论如何艺术的骂人</title><link href="https://blog.zoomquiet.io/141212-hierarchy-of-disagreement.html" rel="alternate"></link><published>2014-12-12T12:12:12+08:00</published><updated>2014-12-12T12:12:12+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-12-12:/141212-hierarchy-of-disagreement.html</id><summary type="html">
&lt;p&gt;&lt;img alt="141212-ask-binghe.lisp.jpg(JPEG 图像,1024x650 像素)" src="http://zoomq.qiniudn.com/ZQCollection/snap/141212-ask-binghe.lisp.jpg?imageView2/2/w/512"/&gt;&lt;/p&gt;
&lt;p&gt;人称伞哥的传奇人物: &lt;a href="http://www.ituring.com.cn/article/553"&gt;田春&lt;/a&gt; 怎么应对的呢?…&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;来源: &lt;a href="http://weibo.com/1929185323/BAfMov9Vt?type=comment#_rnd1418287455937"&gt;田春冰河 ‘s Weibo_Weibo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;揭晓答案前, 俺忍不住, 得推荐一下古今中外有关骂人相关的经验了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ccview.net/htm/xiandai/wen/liangshiqiu009.htm"&gt;梁实秋”骂人的艺术”- 现代散文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhixuan.com/toutiao/article/5431"&gt;如何优雅的对待他人的批评 - MacTalk By 池建强&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phiphicake.blogspot.hk/2012/01/paul-graham.html"&gt;Paul Graham的如何嘴炮 金字塔&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;解读: &lt;a href="http://www.zreading.cn/archives/4137.html"&gt;反驳别人的七个层次 | 左岸读书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文: &lt;a href="http://www.paulgraham.com/disagree.html"&gt;How to Disagree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再来看 伞哥 的回复:&lt;/p&gt;
&lt;p&gt;&lt;img alt="141212-answer-binghe.lisp.jpg(JPEG 图像,1024x713 像素)" src="http://zoomq.qiniudn.com/ZQCollection/snap/141212-answer-binghe.lisp.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对比学术化的 “反驳的层级” 分析图谱&lt;/p&gt;
&lt;p&gt;&lt;img alt="hierarchy_of_disagreement.jpg(JPEG 图像,640x554 像素)" src="http://zoomq.qiniudn.com/ZQCollection/snap/hierarchy_of_disagreement.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;可以清晰的感受到:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用对方的观点来不动声色的转移了论点, 无视了对方的指责&lt;/li&gt;
&lt;li&gt;并用温润的态度指出:&lt;ul&gt;
&lt;li&gt;哥现在意大利吖&lt;/li&gt;
&lt;li&gt;都有能力拯救外国&lt;span class="caps"&gt;MM&lt;/span&gt;了&lt;/li&gt;
&lt;li&gt;E文翻译这点不算事儿,实在是没时间哪…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已经是极其自然而又低姿态的站在各种高度, 完美的反驳了对方无法理解的智商&lt;/li&gt;
&lt;li&gt;达到了 paul氏金字塔的 6.5 级 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="141212-ask-binghe.lisp.jpg(JPEG 图像,1024x650 像素)" src="http://zoomq.qiniudn.com/ZQCollection/snap/141212-ask-binghe.lisp.jpg?imageView2/2/w/512"/&gt;&lt;/p&gt;
&lt;p&gt;人称伞哥的传奇人物: &lt;a href="http://www.ituring.com.cn/article/553"&gt;田春&lt;/a&gt; 怎么应对的呢?…&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;来源: &lt;a href="http://weibo.com/1929185323/BAfMov9Vt?type=comment#_rnd1418287455937"&gt;田春冰河 ‘s Weibo_Weibo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;揭晓答案前, 俺忍不住, 得推荐一下古今中外有关骂人相关的经验了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ccview.net/htm/xiandai/wen/liangshiqiu009.htm"&gt;梁实秋”骂人的艺术”- 现代散文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhixuan.com/toutiao/article/5431"&gt;如何优雅的对待他人的批评 - MacTalk By 池建强&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phiphicake.blogspot.hk/2012/01/paul-graham.html"&gt;Paul Graham的如何嘴炮 金字塔&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;解读: &lt;a href="http://www.zreading.cn/archives/4137.html"&gt;反驳别人的七个层次 | 左岸读书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文: &lt;a href="http://www.paulgraham.com/disagree.html"&gt;How to Disagree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再来看 伞哥 的回复:&lt;/p&gt;
&lt;p&gt;&lt;img alt="141212-answer-binghe.lisp.jpg(JPEG 图像,1024x713 像素)" src="http://zoomq.qiniudn.com/ZQCollection/snap/141212-answer-binghe.lisp.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;对比学术化的 “反驳的层级” 分析图谱&lt;/p&gt;
&lt;p&gt;&lt;img alt="hierarchy_of_disagreement.jpg(JPEG 图像,640x554 像素)" src="http://zoomq.qiniudn.com/ZQCollection/snap/hierarchy_of_disagreement.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;可以清晰的感受到:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用对方的观点来不动声色的转移了论点, 无视了对方的指责&lt;/li&gt;
&lt;li&gt;并用温润的态度指出:&lt;ul&gt;
&lt;li&gt;哥现在意大利吖&lt;/li&gt;
&lt;li&gt;都有能力拯救外国&lt;span class="caps"&gt;MM&lt;/span&gt;了&lt;/li&gt;
&lt;li&gt;E文翻译这点不算事儿,实在是没时间哪…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;已经是极其自然而又低姿态的站在各种高度, 完美的反驳了对方无法理解的智商&lt;/li&gt;
&lt;li&gt;达到了 paul氏金字塔的 6.5 级,除了开头第一句,有点怨气外, 几近完美&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;是也乎&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;所以, 至少俺学习到的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝对的实力为基础&lt;/li&gt;
&lt;li&gt;根本不用反驳各种低层次的东西&lt;/li&gt;
&lt;li&gt;有事儿说事儿,不冲人去,冲人家灵魂深处去&lt;/li&gt;
&lt;li&gt;才给力.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="change-log"&gt;Change log&lt;a class="headerlink" href="#change-log" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;141212 有感速发&lt;/li&gt;
&lt;/ul&gt;</content><category term="DAMA"></category><category term="Pythoneer"></category><category term="Leo"></category></entry><entry><title>熟练使用文学编程(literate programming)是怎样一番体验?</title><link href="https://blog.zoomquiet.io/141209-leo-literate-programming.html" rel="alternate"></link><published>2014-12-09T21:21:21+08:00</published><updated>2014-12-09T21:21:21+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-12-09:/141209-leo-literate-programming.html</id><summary type="html">
&lt;p&gt;&lt;img alt="Literate_Programming_book_cover" src="http://upload.wikimedia.org/wikipedia/en/thumb/6/62/Literate_Programming_book_cover.jpg/220px-Literate_Programming_book_cover.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/26978956"&gt;熟练使用文学编程(literate programming)是怎样一番体验? - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后有人戳了俺…&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="_1"&gt;有关文学化编程&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参考:&lt;a href="http://wiki.woodpecker.org.cn/moin/LeoEnvironment"&gt;LeoEnvironment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及相关链接,&lt;/p&gt;
&lt;p&gt;有关使用 Leo 进行文学化编程, 参考:
- 幻灯: &lt;a href="http://s5.zoomquiet.io/060730-abtLeo"&gt;啄木鸟/&lt;span class="caps"&gt;CPUG&lt;/span&gt; 会课06年度第九次 (built by S5)&lt;/a&gt; ; &lt;a href="http://s5.zoomquiet.io/131101-leo-china"&gt;131101-leo-china&lt;/a&gt;
- 录音: &lt;a href="http://zoomq.qiniudn.com/CPyUG/060731-bpyug-leo/cpug_2006_07_30_01.ogg"&gt;cpug_2006_07_30_01.ogg&lt;/a&gt;
    + &lt;a href="http://zoomq.qiniudn.com/CPyUG/100716-Leo-LiterateProgramming"&gt;Index of /CPyUG/100716-Leo-LiterateProgramming {gen. by gen4idx.py v13.4.18}&lt;/a&gt;
- 录像: Leo 创始人 令德华的演讲 
    - &lt;a href="http://v.youku.com/v_show/id_XNjQ1OTM3MDk2.html"&gt;PyConChina2013-Leo-final-v2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;俺知道 文学化编程是在 2005 年,开始使用 Leo 尝试进行 文学化编程则是到了 2006 …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="Literate_Programming_book_cover" src="http://upload.wikimedia.org/wikipedia/en/thumb/6/62/Literate_Programming_book_cover.jpg/220px-Literate_Programming_book_cover.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/26978956"&gt;熟练使用文学编程(literate programming)是怎样一番体验? - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后有人戳了俺…&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="_1"&gt;有关文学化编程&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参考:&lt;a href="http://wiki.woodpecker.org.cn/moin/LeoEnvironment"&gt;LeoEnvironment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及相关链接,&lt;/p&gt;
&lt;p&gt;有关使用 Leo 进行文学化编程, 参考:
- 幻灯: &lt;a href="http://s5.zoomquiet.io/060730-abtLeo"&gt;啄木鸟/&lt;span class="caps"&gt;CPUG&lt;/span&gt; 会课06年度第九次 (built by S5)&lt;/a&gt; ; &lt;a href="http://s5.zoomquiet.io/131101-leo-china"&gt;131101-leo-china&lt;/a&gt;
- 录音: &lt;a href="http://zoomq.qiniudn.com/CPyUG/060731-bpyug-leo/cpug_2006_07_30_01.ogg"&gt;cpug_2006_07_30_01.ogg&lt;/a&gt;
    + &lt;a href="http://zoomq.qiniudn.com/CPyUG/100716-Leo-LiterateProgramming"&gt;Index of /CPyUG/100716-Leo-LiterateProgramming {gen. by gen4idx.py v13.4.18}&lt;/a&gt;
- 录像: Leo 创始人 令德华的演讲 
    - &lt;a href="http://v.youku.com/v_show/id_XNjQ1OTM3MDk2.html"&gt;PyConChina2013-Leo-final-v2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;俺知道 文学化编程是在 2005 年,开始使用 Leo 尝试进行 文学化编程则是到了 2006 年,
之后,一直尽可能的使用 Leo 作为主要的编辑/编程环境;
其它包含 Emacs/Vim 中都有 文学化编程扩展,
不过, 俺一直没有用起来,所以,俺的体验比较偏激;
在 Leo 中俺进行过各种语言的编程包含:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;css/js&lt;/li&gt;
&lt;li&gt;xslt&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;golang&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;总体上&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;对比各种 &lt;span class="caps"&gt;IDE&lt;/span&gt; 或是 subl 中的编程体验, 简单的说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随心小累&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_3"&gt;随心&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目录/文件/模块/函式/代码块/片段/配置/测试数据…. 一切都在一个界面中可以快速编辑&lt;/li&gt;
&lt;li&gt;保存到哪儿也只是一行声明的事儿&lt;/li&gt;
&lt;li&gt;所有代码的 提纲结构, 就是我对程序的理解, 完全无视所有语法结构,可以任意随手设定&lt;/li&gt;
&lt;li&gt;无论何时回到思考场景,上次对程序的思考进展都以 提纲节点树的形式存在着&lt;/li&gt;
&lt;li&gt;同时, “混出” 的代码又完全干净, 标准的代码文本, 不影响任何环境中的运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;小累&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Leo 是 纯 Python 编写的编辑环境, 加载/迁移都有点小麻烦&lt;/li&gt;
&lt;li&gt;而且没有很多现代 &lt;span class="caps"&gt;IDE&lt;/span&gt; 的各种自动化功能, 就连语法颜色也无法 0配置的完美表达各种语法单元&lt;/li&gt;
&lt;li&gt;最累的是和团队其它成员协同时, 其它人都是线性编辑环境,只有俺是多维表述的 文学化编程&lt;/li&gt;
&lt;li&gt;所以, 有代码修订合并时,俺都要手工合并差异,以免破坏了俺的程序表述结构.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_5"&gt;是也乎&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;其实,无论俺怎么分析/回答/解释,
都无法替代大家自行去体验,
文学化编程,
是真正的将思维对应到代码内在结构上,
而不是语法结构, 这对程序员而言,是种极大的解放.&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;141209 受邀回答&lt;/li&gt;
&lt;/ul&gt;</content><category term="DAMA"></category><category term="Pythoneer"></category><category term="Leo"></category></entry><entry><title>论 Shooter 的关闭</title><link href="https://blog.zoomquiet.io/141122-shotter-death.html" rel="alternate"></link><published>2014-11-22T11:11:11+08:00</published><updated>2014-11-22T11:11:11+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-11-22:/141122-shotter-death.html</id><summary type="html">
&lt;p&gt;&lt;img alt="529.jpg (175×260)" src="http://m.ms10010.com/image/pic/201205/thumb/529.jpg"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="kr"&gt;naked&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;saw&lt;/span&gt; &lt;span class="n"&gt;ten&lt;/span&gt; &lt;span class="n"&gt;thousand&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;People&lt;/span&gt; &lt;span class="n"&gt;talking&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;speaking&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="n"&gt;hearing&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;listening&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;People&lt;/span&gt; &lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;songs&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;voices&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;dared&lt;/span&gt; &lt;span class="n"&gt;disturb&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;silence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="err"&gt;　　　　　　　　　　　　　　　&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;silence&lt;/span&gt; &lt;span class="err"&gt;　美利坚合众国&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="err"&gt;年&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;纽约&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;img alt="53809965gw1emk7au8650j20xr0w3tat" src="http://ww4.sinaimg.cn/large/53809965gw1emk7au8650j20xr0w3tat.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;慢慢的,它们就没有了,就像从未存在过&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(原文: http://www.douban …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="529.jpg (175×260)" src="http://m.ms10010.com/image/pic/201205/thumb/529.jpg"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="kr"&gt;naked&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;saw&lt;/span&gt; &lt;span class="n"&gt;ten&lt;/span&gt; &lt;span class="n"&gt;thousand&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;People&lt;/span&gt; &lt;span class="n"&gt;talking&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;speaking&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="n"&gt;hearing&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;listening&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;People&lt;/span&gt; &lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;songs&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;voices&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;dared&lt;/span&gt; &lt;span class="n"&gt;disturb&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;silence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="err"&gt;　　　　　　　　　　　　　　　&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;silence&lt;/span&gt; &lt;span class="err"&gt;　美利坚合众国&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="err"&gt;年&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;纽约&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;img alt="53809965gw1emk7au8650j20xr0w3tat" src="http://ww4.sinaimg.cn/large/53809965gw1emk7au8650j20xr0w3tat.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;慢慢的,它们就没有了,就像从未存在过&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(原文: http://www.douban.com/note/456932116 出于压力,已经被作者关闭 ;-()&lt;/p&gt;
&lt;p&gt;几年以前,我曾经嘲笑过某科技界大佬. 当时他说:也许90后,95后会慢慢不知道谷歌是什么网站. &lt;/p&gt;
&lt;p&gt;那一年,这对于我来说简直就是世界上最好笑的笑话. 谷歌,全世界最卓越的互联网公司,活在互联网的一代中国人,会不知道他们的网站?&lt;/p&gt;
&lt;p&gt;今天,我收回这句嘲笑. 因为这件不可能的事,它慢慢变成了现实. &lt;/p&gt;
&lt;p&gt;没有人再关注什么谷歌不谷歌. 对他们来说,百度也蛮好用的,反正他们几乎没用过谷歌. 没有谷歌又怎样?大家还是开心的刷微博,看微信,听歌,看娱乐节目. 对于从来就不知道谷歌的人来说,少了谷歌又有什么影响?&lt;/p&gt;
&lt;p&gt;多年前,我们也是可以登陆Facebook的. 其实这个网站和校内一样,也挺蠢的. 可在上面你能看到老外们的生活,可以轻易的跟一万公里以外的人互相拜访,可以看到很多根本不会开到校内上的主页. 你用汉语回复,下面给你聊起来的可能是香港仔,可能是台湾人. 你用英语回复,说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪. 你感觉地球真的变成了地球村,你还没拉门走出去,别人就推门走了进来. &lt;/p&gt;
&lt;p&gt;然后,它就没有了. 起初,它的失踪激起了很大的声音,后来,声音就消失了. &lt;/p&gt;
&lt;p&gt;多年前,我们也是可以登陆Twitter的. 其实这个网站和微博一样,也不过是些信息流,刷上一整天,也不见得有什么用处. 但至少,你可以以最快速度获取你想知道的任何新事,你会真正了解什么事情在全世界是流行的,而不是经过各种截图,翻译,转发,甚至曲解,断章取义,黑白颠倒的东西. 你知道的是真相,赤裸裸的,也许有点太短的真相. 但至少中间不会有无数人的加工与再加工,偏激,片面,就在这个过程中产生了,不管后来者有意还是无意. &lt;/p&gt;
&lt;p&gt;然后,它就没有了. 首先是它的本体没有了,然后它的模仿者也没有了,模仿者的模仿者也没有了. 只剩一个模仿者的模仿者的模仿者,现在你每天能在上面看到无数广告. &lt;/p&gt;
&lt;p&gt;多年前,我们也是可以登陆YouTube的. 对于有的人来说,这个网站就是个大型优酷,当年有人信誓旦旦的说,没有YouTube,我们中国人会很快让优酷超过YouTube. 可这么多年过去了,视频还是那么卡,内容还是那么垃圾,原创还是那么容易被盗窃,视频丰富度还是那么的可怜. 在YouTube上,你能看到全世界最棒的手艺人,最逗乐的笑话,最天马行空的创意,最激荡人心的音乐,最美好的完美瞬间,可在优酷上,你想看一分钟视频,请先看半分钟广告. &lt;/p&gt;
&lt;p&gt;哦,对了. Instagram,有些人可能感觉它和&lt;span class="caps"&gt;QQ&lt;/span&gt;空间也差不多. 可我在上面关注了六百多个摄影师,它们都是顶好顶好的影像记录者,每天看他们的作品,我感觉到很幸福,那种即使没有到那里去,也身临其境的幸福. 我还在上面认识了一个日本的爱自拍的帅小伙,一个爱喝酒的韩国大叔,一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷,一个美丽无比的俄罗斯妹子,我和他们基本上都难以交流,语言是很大的障碍,但几个简单的单词,心意也就到了,这种感觉,有时候比多年老友相聚还兴奋. 因为这是人类不同族群自由交流互相沟通的过程,这种过程很神奇,真的很神奇. &lt;/p&gt;
&lt;p&gt;可现在,它没有了,它之所以没有就因为在某个特定的时间你在搜索特定的词汇时,会搜出来特定的照片. 虽然这么搜的人并不多,虽然看到的人也不会大惊小怪,也不会觉得天黑了,天亮了,天要塌了,天要变了. 可它就是没了,Instagram,就这么没了. 谷歌也是这么没的,Twitter也是这么没的,Facebook也是这么没的. 不知道是什么人,在什么场合,说了什么话,下了什么决定. 就要有超过十亿人像陷于哥谭市的孤岛里一样,看着一座又一座桥梁被炸掉,又被炸掉,又被炸掉,然后,就什么都没了. &lt;/p&gt;
&lt;p&gt;我时常觉得悲哀,真的好悲哀,一个我根本不认识也不知道是谁的人,也许是一个群体,在不断抢走我身边的东西,而我却无能为力. 我抱怨一声,他听不到,任何人都听不到. 我怒吼一句,身边的大多数人却像看疯子一样的看着我. 我哀嚎一声,这声音被阻碍在黑黑的幕墙以里. 我发出尖锐的嘶吼,这声音传不了多远,就和我那被抢走的东西一样,消失了,不见了,就像从来没存在过一样. &lt;/p&gt;
&lt;p&gt;对于本来就没存在过的东西,有谁又会觉得在意呢?那些本来拥有又被掠夺的人的哀愁,后来的人又怎么懂呢?我曾经是拥有一切的,我曾经是拥有世界的,我站在这片土地上,呼吸的是自由的空气,饮下的是自由的琼浆玉液. 就在长的无法计数的时间里,我自由生命的一部分又一部分就这么被杀死了,突然就杀死了. 可我还始终觉得,它们还奄奄一息的活着,就像它们是慢慢的死去的一样. &lt;/p&gt;
&lt;p&gt;可它们终归是死了,而且随着它们的死,愈来愈多的事情慢慢的发生了,很慢很慢,几乎不被人察觉,可还是发生了. &lt;/p&gt;
&lt;p&gt;没有谷歌,我可以用百度呀. 可某些结果被越挪越后,越挪越后,最后就不见了. 就像本来就不该搜出这个结果一样. &lt;/p&gt;
&lt;p&gt;没有Facebook,我可以用校内呀. 可你想发只有在Facebook上能发的文章,很快在校内上就失踪了. 接着,校内变成了人人,话题变成了人人都关心的话题. 大家都在抢着看星座,明星,八卦,娱乐. 没有人会关心什么消失了,反正它们本来也没多少存在感. &lt;/p&gt;
&lt;p&gt;没有YouTube,我可以用优酷呀. 可你却经常只能在优酷上看到抄袭别人的作品,而且还不署名,而且还洋洋得意,而且还自我陶醉,就好像那个idea本来属于他自己一样. 你看了还要惊呼,他是如此的有创意!好一个抄袭的创意,可你却不知道,因为你不知道这个世界上有个网站叫YouTube. &lt;/p&gt;
&lt;p&gt;没有Twitter,我还可以用微博呀. 可你想知道最近发生了什么,你搜的越勤快,越能看到越明显的”根据相关法律法规,相关搜索结果不予显示”. 时间长了,你想,反正知道了也没什么用,不如不看了. &lt;/p&gt;
&lt;p&gt;慢慢的,一扇又一扇的门关上了. 今天你打开世界上最大的博客网站,发现它没了. 明天你一看,世界上最好的设计师分享网站没了,一开始是刷新的很慢很慢,后来它就没了. 过两天再一看,平常每天都会读两篇文章的媒体网站没了,那里的文章缤纷多彩,最后都变成了该页无法显示几个字. 再过几个月,大学的网站不让上了,摄影师的网站不让上了,就连百度日本这种自家网站,也没了. &lt;/p&gt;
&lt;p&gt;接着,漫画看不了了,接着,动画看不成了. 接着,美剧英剧失踪了. 下载美剧英剧的网站又又又又又失踪了. 尊重正版,保护权益,行吧,然后字幕网站也没了. &lt;/p&gt;
&lt;p&gt;游戏没了,你习惯性登陆的游戏网站,发现下载栏正在整治中. 论坛关了,天天都在看的论坛,突然接到相关部门的电话,因为”报备问题”不让办了. 个人网站,私人博客,对不起,说没就没有,你在上面存了多少多年辛勤耕耘的东西都没用. &lt;/p&gt;
&lt;p&gt;你关注的人,有一天你登陆微博,发现他怎么好久都没说话了,然后你搜索了一下,发现他的账号不存在了,而且你搜他的名字,他的名字未予显示. &lt;/p&gt;
&lt;p&gt;一盏一盏的灯,灭了. 四面八方的光源,消失了. 我们生活的五光十色的世界,变成了一片黑色. &lt;/p&gt;
&lt;p&gt;天黑了,那么睡觉吧,但愿长醉不复醒,卧槽泥马勒戈壁. &lt;/p&gt;
&lt;p&gt;最后,我们变成了一群做梦的人,这个梦的名字,叫根据相关法律法规,相关搜索结果不予显示梦. ﻿&lt;/p&gt;
&lt;h2 id="_2"&gt;是也乎&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;不由的想到了 &lt;a href="http://www.douban.com/group/topic/8948067/"&gt;寂静之城 (无删节版)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;”’
…
两个人互相对视了一阵,他终于木然走到她身边,张了张嘴唇,想对她说些什
么. 但是他掏出今天新发布的健康词汇列表,发现上面是一片空白—-终于连最后 一个词组也被有关部门屏蔽了. &lt;/p&gt;
&lt;p&gt;于是阿瓦登只好保持着沉默,默默地与面无表情的她擦肩而过,继续向前走去
. 他的身影逐渐融入同样安静的灰色人群之中,整个城市都显得寂静极了. ”’&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;141125 没忍住…&lt;/li&gt;
&lt;li&gt;141121 起意&lt;/li&gt;
&lt;/ul&gt;</content><category term="DAMA"></category><category term="Pythoneer"></category><category term="PyCon"></category></entry><entry><title>论 OhLife 的倒掉</title><link href="https://blog.zoomquiet.io/140921-ohlife-death.html" rel="alternate"></link><published>2014-09-21T11:11:11+08:00</published><updated>2014-09-21T11:11:11+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-09-21:/140921-ohlife-death.html</id><summary type="html">
&lt;p&gt;&lt;img alt="ohlife" src="http://a.36krcnd.com/photo/5dfa0868b7808b19b22eb4617a374923.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.36kr.com/p/2934.html"&gt;OhLife:抛弃你的日记本吧!来自Y Combinator的第三个项目 | 36氪&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当年 36Kr 就分析 OhLife 面临着几大问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于网站内容涉及隐私,完全保密,因此该网站很难通过正常的网络推广方式吸引来很大的流量. &lt;/li&gt;
&lt;li&gt;简单的功能很容易被复制,除了创业公司可以轻松复制外,如果 Google,腾讯这样的公司复制了这个模式,Ohlife 的竞争力就很不明显了. &lt;/li&gt;
&lt;li&gt;简单的功能也很难实现 freemium,因为没有什么高级功能可以单独列出来吸引客户付费. 
不过也未必,或许 OhLife 会专注于做好这一件事,并且能把它做得出人意料之外的好,就如 evernote 一样. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;果然…四年后:&lt;/p&gt;
&lt;h3 id="ohlife-is-shutting-down"&gt;OhLife is shutting down&lt;a class="headerlink" href="#ohlife-is-shutting-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;OhLife&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;cc6632387657&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ohlife&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Zoom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Quiet&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="ohlife" src="http://a.36krcnd.com/photo/5dfa0868b7808b19b22eb4617a374923.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.36kr.com/p/2934.html"&gt;OhLife:抛弃你的日记本吧!来自Y Combinator的第三个项目 | 36氪&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当年 36Kr 就分析 OhLife 面临着几大问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于网站内容涉及隐私,完全保密,因此该网站很难通过正常的网络推广方式吸引来很大的流量. &lt;/li&gt;
&lt;li&gt;简单的功能很容易被复制,除了创业公司可以轻松复制外,如果 Google,腾讯这样的公司复制了这个模式,Ohlife 的竞争力就很不明显了. &lt;/li&gt;
&lt;li&gt;简单的功能也很难实现 freemium,因为没有什么高级功能可以单独列出来吸引客户付费. 
不过也未必,或许 OhLife 会专注于做好这一件事,并且能把它做得出人意料之外的好,就如 evernote 一样. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;果然…四年后:&lt;/p&gt;
&lt;h3 id="ohlife-is-shutting-down"&gt;OhLife is shutting down&lt;a class="headerlink" href="#ohlife-is-shutting-down" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;OhLife&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;cc6632387657&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ohlife&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Zoom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Quiet&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;Sun&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;AM&lt;/span&gt;
&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;OhLife&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;shutting&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://ohlife.com/shutdown"&gt;OhLife helps you remember what’s happened in your life&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’ll unfortunately be shutting OhLife down on October 4, 2014.&lt;/p&gt;
&lt;p&gt;We started OhLife to help people remember what’s happened in their life. But since then we haven’t been able to grow our user base or make OhLife financially stable. Because of both these reasons we’ve decided to shut OhLife down. We appreciate everyone that’s used OhLife and supported us.&lt;/p&gt;
&lt;p&gt;We’re extremely sorry for shutting the site down.&lt;/p&gt;
&lt;p&gt;We have some FAQs below to help out. Thank you for all your support.&lt;/p&gt;
&lt;p&gt;Thank you,
The OhLife Team&lt;/p&gt;
&lt;p&gt;How do I export my entries?
You can save your entries to a text file here: https://ohlife.com/export
Please export them before we shut down and delete them on October 4, 2014.&lt;/p&gt;
&lt;p&gt;How do I save photos?
The Past page (https://ohlife.com/past) has a list of all your entries, so you can quickly scroll through them to find your photos. If you click a photo it will take you to the original version.&lt;/p&gt;
&lt;p&gt;What if I had a premium account?
If you had the premium version, a few weeks after we shut OhLife down we’ll refund you a prorated amount.&lt;/p&gt;
&lt;h2 id="_2"&gt;分析&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为 &lt;span class="caps"&gt;YC&lt;/span&gt; 出身路演成功的创业项目, 为毛没有坚持到成功上岸?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术/产品/功能 大妈用下来都没有问题&lt;/li&gt;
&lt;li&gt;那么有问题的只有: &lt;code&gt;为毛没能赚下来銭泥?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方曰: &lt;code&gt;用户量增长速率没能保持住&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;言下之意,就是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;銭赚没赚到&lt;/span&gt;
&lt;span class="err"&gt;不重要&lt;/span&gt;
&lt;span class="err"&gt;重要的是&lt;/span&gt;
&lt;span class="err"&gt;用户量的增长&lt;/span&gt;
&lt;span class="err"&gt;没能支撑一个大故事&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那又是为什么呢?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OhLife&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;的整个儿创意是: &lt;code&gt;以一种创意促动方式,来引导/加强/支持 人们愉快的写日志&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;此创意的伦理基点是: &lt;code&gt;生活值得记录&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是,这一逻辑线缺少了一个关键爆点, 之于移动/互联网 而言,那就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;生活值得记录&lt;/code&gt; 这一认知如何变成一个 &lt;code&gt;COOL&lt;/code&gt; 的事件,成为互联网公识?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OhLife&lt;/code&gt; 产品形态的成功在于 无干挠/私密性, 从而产生了一种只面对本我的直述心声的亲切感&lt;/li&gt;
&lt;li&gt;但是,这一形态,也导致了,初始用户对 &lt;code&gt;OhLife&lt;/code&gt; 的认同感,无法简单的分享/扩散/爆发出来&lt;/li&gt;
&lt;li&gt;因为,一种秘密的安全/舒适感,是无法分享的,一但分享出来就变味儿了&lt;/li&gt;
&lt;li&gt;以致, Gmail 病毒式的扩散手法无法在 &lt;code&gt;OhLife&lt;/code&gt; 场景中复制&lt;/li&gt;
&lt;li&gt;最终, &lt;code&gt;OhLife&lt;/code&gt; 聚集了一批忠诚用户后,就没有然后了.&lt;/li&gt;
&lt;li&gt;虽然,在此基础上进行了专业备份等收费尝试&lt;/li&gt;
&lt;li&gt;可惜,都没有找到痒点,或是说即使作为一个小众服务, &lt;code&gt;OhLife&lt;/code&gt; 最终也没有形成足够数量的用户基数.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;思考&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;不禁想到了另外一个类似的服务: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://dailythem.es/&lt;/li&gt;
&lt;li&gt;一个以短篇写作来提高 E文 水平的自学督导服务.&lt;/li&gt;
&lt;li&gt;其成功之处,就是将一种成功的自学方法,转换成了一种很 &lt;code&gt;COOL&lt;/code&gt; 的社会性游戏&lt;/li&gt;
&lt;li&gt;而且,从中自然挖掘出了合理的收费服务:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;真人批改作文&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自动单词修正&lt;/li&gt;
&lt;li&gt;…etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;OhLife&lt;/code&gt; 未来有机会上位的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持原先独创的无感引导机制: &lt;code&gt;定制邮件提醒,回复就好&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;针对不同需求的用户,演化出不同的服务:&lt;ul&gt;
&lt;li&gt;表现欲强的,就给自动发布,以及相应订阅推荐服务&lt;/li&gt;
&lt;li&gt;常规生活日志用户,提供更多入口,随时日志,以及收费的专业私人出版支持…&lt;/li&gt;
&lt;li&gt;人性化事件理解,可以通过日志,自动提醒未来自个儿作什么事儿…&lt;/li&gt;
&lt;li&gt;… etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只是,目测关键的关键,还是没有放开心神,尝试更多的可能性…?&lt;/p&gt;
&lt;p&gt;可惜了, 和 Google reader 不同,这是一个封闭的好服务, 没有快速发展到足够的体量,供给团队足够的资源,转型出更多好服务.&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140921 官方通知邮件引发直觉思考&lt;/li&gt;
&lt;/ul&gt;</content><category term="DAMA"></category><category term="Pythoneer"></category><category term="PyCon"></category></entry><entry><title>Pythonic口号的Pivot</title><link href="https://blog.zoomquiet.io/140916-pycon-slogen.html" rel="alternate"></link><published>2014-09-16T19:42:42+08:00</published><updated>2014-09-16T19:42:42+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-09-16:/140916-pycon-slogen.html</id><summary type="html">
&lt;p&gt;&lt;img alt="SimpleIsBeautiful(PNG 图像,731x681 像素)" src="http://wiki.woodpecker.org.cn/moin/SimpleIsBeautiful?action=AttachFile&amp;amp;do=get&amp;amp;target=130416-zq-simple-is-beautiful.png"/&gt;&lt;/p&gt;
&lt;p&gt;可记得去年的&lt;a href="http://python-china.org/topic/544#reply5"&gt;蠎年蠎衫(PythonisT-shirt)设计大赛! — Python China&lt;/a&gt; ?&lt;/p&gt;
&lt;p&gt;今年又来尝试了….&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sebsauvage.net/python/"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Life is short
(You need Python)”~sebsauvage.net - Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20830223"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Life is short, use Python” 最初是谁在什么情况下说的? - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的,一句无意间的代码注释,在 2007年,演化为 CPyUG 社区纪念&lt;span class="caps"&gt;TEE&lt;/span&gt; 的设计出处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;演化成了: &lt;code&gt;Life is short, use Python!&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Gudio 那年也穿上了身
&lt;a href="http://wiki.woodpecker.org.cn/moin/ObpLovelyPython/LpyAttachZoomq?action=AttachFile&amp;amp;do=get&amp;amp;target=beginning-1-zeuux-fashion-guido.jpg"&gt;LpyAttachZoomq(&lt;span class="caps"&gt;JPEG&lt;/span&gt; 图像,800x533 像素)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后,就没有然后了,,,因为 &lt;span class="caps"&gt;ZEUUX …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="SimpleIsBeautiful(PNG 图像,731x681 像素)" src="http://wiki.woodpecker.org.cn/moin/SimpleIsBeautiful?action=AttachFile&amp;amp;do=get&amp;amp;target=130416-zq-simple-is-beautiful.png"/&gt;&lt;/p&gt;
&lt;p&gt;可记得去年的&lt;a href="http://python-china.org/topic/544#reply5"&gt;蠎年蠎衫(PythonisT-shirt)设计大赛! — Python China&lt;/a&gt; ?&lt;/p&gt;
&lt;p&gt;今年又来尝试了….&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sebsauvage.net/python/"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Life is short
(You need Python)”~sebsauvage.net - Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20830223"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Life is short, use Python” 最初是谁在什么情况下说的? - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的,一句无意间的代码注释,在 2007年,演化为 CPyUG 社区纪念&lt;span class="caps"&gt;TEE&lt;/span&gt; 的设计出处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;演化成了: &lt;code&gt;Life is short, use Python!&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Gudio 那年也穿上了身
&lt;a href="http://wiki.woodpecker.org.cn/moin/ObpLovelyPython/LpyAttachZoomq?action=AttachFile&amp;amp;do=get&amp;amp;target=beginning-1-zeuux-fashion-guido.jpg"&gt;LpyAttachZoomq(&lt;span class="caps"&gt;JPEG&lt;/span&gt; 图像,800x533 像素)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后,就没有然后了,,,因为 &lt;span class="caps"&gt;ZEUUX&lt;/span&gt; 的沉默,
做到 2013年, PyConChina 才在北京/珠海场的纪念&lt;span class="caps"&gt;TEE&lt;/span&gt; 上重构了设计,并发布为:&lt;/p&gt;
&lt;p&gt;&lt;img alt="BdUGedICAAAzki7" src="http://zoomq.qiniudn.com/CPyUG/PyCon2013China/140106-@gvanrossum-BdUGedICAAAzki7.jpg-large.jpg"&gt;
&lt;a href="https://twitter.com/gvanrossum/status/420249260961968128"&gt;Guido老爹也上过身&lt;/a&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;激发&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今年呢? 依然有独家赞助可以重制,
虽然当初 &lt;span class="caps"&gt;ZEUUX&lt;/span&gt; 承诺绝版设计,永不复刻…&lt;/p&gt;
&lt;p&gt;但是, &lt;code&gt;不折腾要死星人们&lt;/code&gt; 是无法被阻止的!&lt;/p&gt;
&lt;p&gt;首轮讨论记要如下:&lt;/p&gt;
&lt;h3 id="140916"&gt;140916 京蠎活动群&lt;a class="headerlink" href="#140916" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@ZoomQuiet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;2007&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;shit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;Pythonic&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;suck&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="err"&gt;今年&lt;/span&gt; &lt;span class="n"&gt;PyCon&lt;/span&gt; &lt;span class="err"&gt;纪念&lt;/span&gt; &lt;span class="n"&gt;TEE&lt;/span&gt; &lt;span class="err"&gt;的文案&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;修订为&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;Pythonic&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="err"&gt;有妺纸说&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;人生苦短应该翻译为&lt;/span&gt;
&lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;suck&lt;/span&gt;
&lt;span class="err"&gt;很认同&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;但是&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;不敢用&lt;/span&gt;&lt;span class="p"&gt;,,,&lt;/span&gt;

&lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;Pythonic&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="err"&gt;人生苦短&lt;/span&gt; &lt;span class="err"&gt;得&lt;/span&gt;&lt;span class="n"&gt;Pythonic&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@AlbertLee&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Life&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;suck&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;stopped&lt;/span&gt; &lt;span class="n"&gt;pythonic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;showing&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;Pythonic&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;pythonic&lt;/span&gt; 
    &lt;span class="err"&gt;定要难受死处女座的&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Lothar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;life&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;pathetic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;pythonic&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Adam:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;pythonic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;pathetic&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;

&lt;span class="err"&gt;人生苦短&lt;/span&gt; &lt;span class="n"&gt;Pythonic&lt;/span&gt;&lt;span class="err"&gt;欢&lt;/span&gt;
&lt;span class="err"&gt;苦海无涯&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;是岸&lt;/span&gt;
&lt;span class="err"&gt;人生苦短&lt;/span&gt; &lt;span class="n"&gt;Pythonic&lt;/span&gt;&lt;span class="err"&gt;绽&lt;/span&gt;
&lt;span class="err"&gt;总是我就是强迫症想押韵&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;为什么python程序员都这么短命… 还都这么痛苦… (逃)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;暂定&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;life&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;pathetic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;pythonic&lt;/span&gt;
    &lt;span class="err"&gt;人生苦短&lt;/span&gt; &lt;span class="err"&gt;得&lt;/span&gt;&lt;span class="n"&gt;Pythonic&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_4"&gt;思考&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为什么 程序猿 就是如此纠结呢? 一个单词就可以引发这么多的情绪? 果断那谁无意间道出了真相?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;为什么&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;程序员&lt;/span&gt;
&lt;span class="err"&gt;都这么短命&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="err"&gt;还都这么痛苦&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140916 微信群引发&lt;/li&gt;
&lt;/ul&gt;</content><category term="DAMA"></category><category term="Pythoneer"></category><category term="PyCon"></category></entry><entry><title>电邮的自我防护</title><link href="https://blog.zoomquiet.io/140718-fsf-emailselfdefense-mac.html" rel="alternate"></link><published>2014-08-03T00:00:00+08:00</published><updated>2014-08-03T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-08-03:/140718-fsf-emailselfdefense-mac.html</id><summary type="html">
&lt;p&gt;&lt;img alt="infographic" src="https://static.fsf.org/nosvn/enc-dev0/img/en/infographic-button.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://emailselfdefense.fsf.org/en/mac.html"&gt;Email Self-Defense - a guide to fighting surveillance with GnuPG encryption&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原主忒啰嗦了!&lt;/p&gt;
&lt;p&gt;果断使用汉化信息图!&lt;/p&gt;
&lt;p&gt;&lt;img alt="gnupg-infographic1" src="https://tonghuix.io/wp-content/uploads/2014/06/gnupg-infographic1.png"/&gt;&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140916 转发 &lt;a href="https://tonghuix.io/2014/06/email-selfdefence-gnupg/#"&gt;使用 GnuPG 进行电子邮件的自我防御[&lt;span class="caps"&gt;FSF&lt;/span&gt;信息图中译] » Open Source Geek | 爱开源未来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;140803 偶遇抄转&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">
&lt;p&gt;&lt;img alt="infographic" src="https://static.fsf.org/nosvn/enc-dev0/img/en/infographic-button.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://emailselfdefense.fsf.org/en/mac.html"&gt;Email Self-Defense - a guide to fighting surveillance with GnuPG encryption&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原主忒啰嗦了!&lt;/p&gt;
&lt;p&gt;果断使用汉化信息图!&lt;/p&gt;
&lt;p&gt;&lt;img alt="gnupg-infographic1" src="https://tonghuix.io/wp-content/uploads/2014/06/gnupg-infographic1.png"/&gt;&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140916 转发 &lt;a href="https://tonghuix.io/2014/06/email-selfdefence-gnupg/#"&gt;使用 GnuPG 进行电子邮件的自我防御[&lt;span class="caps"&gt;FSF&lt;/span&gt;信息图中译] » Open Source Geek | 爱开源未来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;140803 偶遇抄转&lt;/li&gt;
&lt;/ul&gt;</content><category term="fsf"></category><category term="Pythoneer"></category><category term="Zh"></category></entry><entry><title>How to argue for Python’s use</title><link href="https://blog.zoomquiet.io/140718_Brett_Cannon-How2argue4Python-use.html" rel="alternate"></link><published>2014-07-18T00:00:00+08:00</published><updated>2014-07-18T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-07-18:/140718_Brett_Cannon-How2argue4Python-use.html</id><summary type="html">
&lt;p&gt;&lt;a href="http://nothingbutsnark.svbtle.com/how-to-argue-for-pythons-use"&gt;How to argue for Python’s use&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently I wrote a blog post about how I don’t worry about Python losing users. Within minutes I had people asking about Python’s usage, which the post was not about and is a very different thing to worry about. See, it …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;a href="http://nothingbutsnark.svbtle.com/how-to-argue-for-pythons-use"&gt;How to argue for Python’s use&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently I wrote a blog post about how I don’t worry about Python losing users. Within minutes I had people asking about Python’s usage, which the post was not about and is a very different thing to worry about. See, it looks like the number of people using Python will continue to be high into the future, but whether Python will be used for as many projects is not guaranteed; the number of users is great and seems secure, but the number of uses of Python in projects is not nearly as certain.&lt;/p&gt;
&lt;p&gt;This blog post is meant to help show how Python is still very much viable for most software projects out there. I’m not going to worry about selling Python to people going up against other dynamic languages like Ruby as I think those battles tend to come down to personal taste. What this is meant for is people dealing with teammates trying to sell statically typed languages. Specifically, this post is going to be geared towards arguing against Go, but it could be any statically typed language.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Why Go?”, you might ask. Well, because Go is actually gaining users at Python’s expense. Ever since Python’s growth trajectory went hockey stick starting between 2003-2005, Python itself has not been the king of the hill to unseat; it was the underdog. Traditionally Python has captured users from languages like Java and then kept them (I’m not going to argue about C++ users because typically they are have severe performance needs, need a systems language, or performance addicts and need to go into rehab). But things are different with Go. Python is now one of the top languages in terms of use out there, taking away our underdog stance. And for once there is another language out there coming from the statically typed programming language community whose productivity/performance tradeoff is good enough to convince some Python programmers to choose Go over Python.&lt;/p&gt;
&lt;h2 id="go-today"&gt;Go, today&lt;a class="headerlink" href="#go-today" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I should start out saying that Go is currently my second favourite language. If I were asked to start a new project today and I couldn’t convince people to use Python I would argue for Go’s usage instead. Do not read this blog post as me saying that Go is a bad language. The key point of this blog post is to convince others that Python is very much a viable alternative to Go in the productivity/performance tradeoff game, not that Go is bad. Read this blog post as anti-Go and you’re taking something personally that you shouldn’t.&lt;/p&gt;
&lt;p&gt;I should mention that I use Go at work on occasion and try to follow the language’s community somewhat. Now this does not make me an expert in Go by any stretch of the imagination, but I’m not pulling knowledge out of docs and blogs posts alone either. But I am on the Python development team, so do realize that no matter how fair I try to be, inherent bias will be there to some extent.&lt;/p&gt;
&lt;p&gt;So, with those caveats out of the way, let’s look at what Go offers a programmer.&lt;/p&gt;
&lt;h3 id="productivity"&gt;Productivity&lt;a class="headerlink" href="#productivity" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The way I like to view Go is take your favourite dynamic programming language, start removing features that make speeding it up hard, and you end up with Go. Static typing is kept to to a minimum as it is typically only in your face at &lt;span class="caps"&gt;API&lt;/span&gt; boundaries. Structural typing also makes things easier to work with (think of it much like duck typing). The syntax isn’t heavy-handed (although it does use curly braces). Don’t view Go as C/C++ with unsafe features removed and some productive bits added on or else you will end up frustrated (e.g. “why can’t I use the make() built-in or have varying return value counts like the map type?” is the wrong way to view the language; this is a reason why C++ programmers have not switched to Go). Really fast compile times also makes the development cycle feel more like a dynamic language than a compiled one. And some people actually prefer the verbosity gained from not having exceptions as it forces you to deal with exceptional cases instead of (accidentally) ignoring them (this is an instance of Go’s initial systems programming design showing through). Add on that the language itself is rather small and fits in your head and has strict forward-compatibility requirements for itself (you are not getting generics any time soon), and coding in Go is basically pleasant to work with.&lt;/p&gt;
&lt;p&gt;Being statically typed, Go gets to have tooling support fairly cheaply (it also helps the language was somewhat designed for it early on). In a shrewd move, Go made sure the core tooling needs actually come with Go itself. go fmt enforces Go’s style guidelines and also allows for refactorings through custom rules (which also make the whole “use tabs for indent” thing a non-issue since it means you set up your editor to represent tabs however you want and then go fmt makes it universally tabs for your &lt;span class="caps"&gt;VCS&lt;/span&gt;). go fix updates code to meet changes made to the language since the last release. go get fetches dependencies and installs them.&lt;/p&gt;
&lt;p&gt;The last productivity perk of Go is that it statically compiles everything, making deployment simpler. This isn’t quite a big deal, though, if you are using containerization for your development and deployment. This is a big deal, though, if distribute a command-line tool as it becomes just a single file to ship instead of a collection of dependencies plus your code.&lt;/p&gt;
&lt;h3 id="performance"&gt;Performance&lt;a class="headerlink" href="#performance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In terms of raw performance, Go does well. It’s hard to point to any one benchmark that definitely shows that Go is always the fastest choice since even the The Computer Language Benchmarks Game show some benchmarks where CPython 3 is faster. But in general you should consider Go fast enough for your needs no matter the work.&lt;/p&gt;
&lt;p&gt;But where Go really shines is with concurrency. Now do realize that concurrent code does not mean parallelized code which is a common misconception; concurrent code can still be single-threaded, it just makes task switching easier/better. Go has goroutines which make it dead simple to fire off code to execute concurrently. The language provides communication channels which allows for very clean message-passing style of concurrent programming if you don’t want to go down the shared memory route which is also supported. And with all of this integrated into the language it makes it second nature to write concurrent code where (easily) possible. In other words Go programs can be fast and the language tries to empower you to do that in a reasonable fashion.&lt;/p&gt;
&lt;h2 id="python-today"&gt;Python, today&lt;a class="headerlink" href="#python-today" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully I have convinced you that Go is a good programming language, if for any other reason it will help dispel some people from thinking I poorly portrayed Go in this whole discussion. But let’s now discuss how the productivity/performance tradeoff looks for Python.&lt;/p&gt;
&lt;h3 id="productivity_1"&gt;Productivity&lt;a class="headerlink" href="#productivity_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First and foremost, Python is very easy to learn. There’s a reason why Python is currently the top choice for a teaching language at top-rated &lt;span class="caps"&gt;US&lt;/span&gt; universities. That equates to a steady stream of new programmers already versed in the language as well as showing it’s easy to teach other programmers. I also don’t think it’s hard to convince people that you can definitely get a lot done in a few lines of Python code (the Go/Python 3 comparison shows that Python can accomplish solutions in less code than Go every time). So I would argue no one should disagree that you can be highly productive in Python, even compared to Go.&lt;/p&gt;
&lt;p&gt;Where people typically start to argue against Python is in tooling support. But if you look at the various tools I pointed out for Go – fmt, fix, and get – there is a Python equivalent found from the community. For style formatting that follows &lt;span class="caps"&gt;PEP&lt;/span&gt; 8, there is pep8 for commit-check time or autopep8 if you want more go fmt style automatic rewriting. For go fix or go fmt for refactoring you could argue that 2to3 performs the same function. As for go get, Python has pip. And instead of statically compiled binaries we have venv/virtualenv or code freezing like cx_Freeze (on top of containerization like anything else). There’s even code analysis through projects like pylint. Arguing that Python can’t work for large projects due to the lack of tooling support has always seemed like a shallow argument to me.&lt;/p&gt;
&lt;p&gt;And if there is one place where Python definitely does well, it is in the breadth and depth of the third-party libraries and tools available as seen on PyPI (I’m sure someone somewhere is snickering that “not all of those run on Python 3”, which is true but the support is pretty darn good for Python 3 and simply continues to improve so I don’t worry about that argument, plus you can code targetting Python 2/3 simultaneously and then really not care about which version you aim for). While looking at godoc.org shows that Go is not exactly lacking in community support, Python’s age alone guarantees it has more third-party libraries available to it and will continue to do so.&lt;/p&gt;
&lt;h3 id="performance_1"&gt;Performance&lt;a class="headerlink" href="#performance_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because Python has been around for so long and become so big, simply saying “Python is fast enough” doesn’t tell the whole story thanks to the various implementation options and speed-ups that are available. But before diving into &lt;span class="caps"&gt;VM&lt;/span&gt;-level options, it should be mentioned that Python’s stdlib offers options to gain speedups. For instance, concurrent.futures a dead-simple way to execute embarrassingly parallel code concurrently. And the new asyncio makes writing asynchronous code in Python 3.3 and newer much easier. While it might not be integrated into the language like it is with Go, concurrent programming in Python is doable and not necessarily in a painful way.&lt;/p&gt;
&lt;p&gt;But one of the biggest ways you can influence the performance of your Python code is in your selection of &lt;span class="caps"&gt;VM&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="cpython-cython"&gt;CPython + Cython&lt;a class="headerlink" href="#cpython-cython" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are working with a C extension module, then CPython is your best option (and if you don’t know the nomenclature, CPython is the interpreter you get at python.org). Performance is at least reasonable for most things – for some reason some people think the Python development team doesn’t care about performance which is a lie – and it is obviously going to have the newest features as CPython also acts as the language specification.&lt;/p&gt;
&lt;p&gt;If you do find yourself wanting a bit more speed for some inner loop code, Cython is an option with CPython. Cython will transpile your Python code into C extension code as best as possible. There are supported ways to make it allow for better C code, so it all depends on how Cython-specific you want to get. Cython also makes it easier to write C extension modules (but keep reading for an alternative that supports more than CPython).&lt;/p&gt;
&lt;h3 id="pypy-cffi"&gt;PyPy + cffi&lt;a class="headerlink" href="#pypy-cffi" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are not reliant on a pre-existing C extension module, then PyPy will give you the best overall performance. Its &lt;span class="caps"&gt;JIT&lt;/span&gt; is great and the team welcomes the challenge of code that runs faster in CPython as they hate being slower as shown by speed.pypy.org. Honestly, unless PyPy doesn’t support a version of Python you really want to use – since PyPy typically lags behind by 2 versions, e.g. pypy3 currently supports Python 3.2 while 3.4 is the latest CPython release; they are always looking for donations to help with this – I would only consider not using PyPy because you rely on a pre-existing C extension module (numpy is a common reason, but even there PyPy is looking for donations to fix that problem).&lt;/p&gt;
&lt;p&gt;That doesn’t mean, though, that if you need to wrap some C code you can’t use PyPy. The PyPy project has another project called cffi which is meant to facilitate the wrapping of C code for use by Python code. The key benefit to using cffi is that if you use it then the C code can be used in CPython and PyPy (IronPython and Jython I believe are also working on adding support for cffi). So if you are wrapping C code I would strongly suggest you look at cffi over a hand-crafted C extension module or Cython so you can have better Python implementation support and be able to use PyPy.&lt;/p&gt;
&lt;h2 id="numba"&gt;Numba&lt;a class="headerlink" href="#numba" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you’re doing numeric work, then Numba is an option you should definitely consider. Economists are noticing its performance when it comes to scientific computing. While it won’t necessarily help out when it comes to general Python programming, Numba’s use of &lt;span class="caps"&gt;LLVM&lt;/span&gt; to perform &lt;span class="caps"&gt;JIT&lt;/span&gt; does help when using things such as numpy or other module in Python’s very strong scientific computing stack.&lt;/p&gt;
&lt;h2 id="python-tomorrow"&gt;Python, tomorrow&lt;a class="headerlink" href="#python-tomorrow" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all of that taken into account, Python is definitely not standing still (nor is Go, e.g. they are busy rewriting their compiler in Go and shifting things out of the linker into the compiler for even faster compilation speed). Python’s future continues to look bright.&lt;/p&gt;
&lt;h3 id="productivity_2"&gt;Productivity&lt;a class="headerlink" href="#productivity_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python is an evolving language. Unlike Go, Python is willing to change the language, even in ways that won’t be backwards-compatible forever. This means Python can become even more productive over time at a faster rate than Go typically can (although until a Go 2 begins development it is unknown what kind of stance the Go team will take for language evolution).&lt;/p&gt;
&lt;p&gt;On the tooling front, there is work to standardize a set of function annotations for declaring types. This came up during the PyCon 2014 language summit where there was agreement that enough projects were now wanting a way to declare the expected types for function parameters and return values that using function annotations to think about standardizing on something that could maybe end up in the stdlib would be useful. The discussions have not started yet on the pytypedecl mailing list, but I know a &lt;span class="caps"&gt;PEP&lt;/span&gt; is about to be started. This could be beneficial to not just projects like Cython and Numba where the type information could be used, but also in tooling like code analysis, refactoring, etc.&lt;/p&gt;
&lt;h3 id="performance_2"&gt;Performance&lt;a class="headerlink" href="#performance_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Long-term, there are two projects that could help with Python’s performance. One is a new Python &lt;span class="caps"&gt;VM&lt;/span&gt; called Pyston. It’s very new, but its goal is to use &lt;span class="caps"&gt;LLVM&lt;/span&gt;’s &lt;span class="caps"&gt;JIT&lt;/span&gt; (yes, this sounds like Unladen Swallow, but &lt;span class="caps"&gt;LLVM&lt;/span&gt;’s &lt;span class="caps"&gt;JIT&lt;/span&gt; is better than it was back in 2009 so there’s hope the project will lead to some good results).&lt;/p&gt;
&lt;p&gt;But the project that really has me excited is the PyPy-&lt;span class="caps"&gt;STM&lt;/span&gt; project. The “&lt;span class="caps"&gt;STM&lt;/span&gt;” stands for “software transactional memory” and it basically allows Python to ditch the &lt;span class="caps"&gt;GIL&lt;/span&gt;. The performance is now 1.2x-3x slower than PyPy which is very respectable. They are currently looking for donations to continue the work to reach the goal of pypy-stm with 2 threads is universally worth running over vanilla PyPy.&lt;/p&gt;
&lt;h2 id="making-the-choice-at-least-murky"&gt;Making the choice at least murky&lt;a class="headerlink" href="#making-the-choice-at-least-murky" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully one comes out of this blog post realizing that Go is not the end-all, be-all answer to the productivity/performance tradeoff. Python definitely has great productivity perks and it is no slouch in the performance realm either, making it still my language of choice. If you find yourself potentially choosing something other than Python for a project, please make sure to stop and think about the productivity loss from not using Python and then look at the various options you have for making Python execute quickly so that you make an informed choice as to whether Python will work for your project.&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1406?? &lt;/li&gt;
&lt;li&gt;140728 偶遇抄转&lt;/li&gt;
&lt;/ul&gt;</content><category term="Brett"></category><category term="Pythoneer"></category><category term="Zh"></category></entry><entry><title>On object-oriented programming</title><link href="https://blog.zoomquiet.io/131224-yw-on-oop.html" rel="alternate"></link><published>2013-12-24T00:00:00+08:00</published><updated>2013-12-24T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-12-24:/131224-yw-on-oop.html</id><summary type="html">
&lt;h1 id="_1"&gt;翻越分享原文&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;via: http://yinwang0.wordpress.com/2013/12/24/on-object-oriented-programming/&lt;/li&gt;
&lt;li&gt;Posted by Yin Wang in &lt;a href="http://yinwang0.wordpress.com/category/oop/"&gt;oop&lt;/a&gt;,&lt;a href="http://yinwang0.wordpress.com/category/programming-languages/"&gt;programming languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="yw_dark_age_battle.jpg" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_dark_age_battle.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;[written at the end of 2013 &lt;span class="caps"&gt;AD&lt;/span&gt;, during the Dark Ages of programming]&lt;/p&gt;
&lt;p&gt;The programmer’s world is full of fads and superstitions. Every now and then there will be somebody who …&lt;/p&gt;</summary><content type="html">
&lt;h1 id="_1"&gt;翻越分享原文&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;via: http://yinwang0.wordpress.com/2013/12/24/on-object-oriented-programming/&lt;/li&gt;
&lt;li&gt;Posted by Yin Wang in &lt;a href="http://yinwang0.wordpress.com/category/oop/"&gt;oop&lt;/a&gt;,&lt;a href="http://yinwang0.wordpress.com/category/programming-languages/"&gt;programming languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="yw_dark_age_battle.jpg" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_dark_age_battle.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;[written at the end of 2013 &lt;span class="caps"&gt;AD&lt;/span&gt;, during the Dark Ages of programming]&lt;/p&gt;
&lt;p&gt;The programmer’s world is full of fads and superstitions. Every now and then there will be somebody who come up and announce: “I can save the world!” No matter whether the ideas are good or not, there will always be followers, and the ideas soon become their religion. They then develop their community or camp, try to let those ideas dominate the world, and try to make the ideas live forever.&lt;/p&gt;
&lt;p&gt;Object-oriented programming (&lt;span class="caps"&gt;OOP&lt;/span&gt;) is such a religion which claimed to be able to save the world from the so-called “software crisis”. As a hindsight after so many years since it was introduced, not only didn’t &lt;span class="caps"&gt;OOP&lt;/span&gt; save us, it brought us more confusion and harm than benefits. Unfortunately its dogmas and mispractices have become wide-spread and deeply intrenched. In this article, I hope to provide my viewpoint into this matter and try to find out the lessons that we can learn.&lt;/p&gt;
&lt;p&gt;Like every article on my blog, the opinions are completely personal and not representing my employers or professors.&lt;/p&gt;
&lt;h2 id="is-everything-an-object"&gt;Is everything an object?&lt;a class="headerlink" href="#is-everything-an-object" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Everything is an object” is the core dogma of &lt;span class="caps"&gt;OOP&lt;/span&gt; and deemed as the highest standards of &lt;span class="caps"&gt;OO&lt;/span&gt; language design. Now let’s take a careful look to see if it is true, or if it is a good idea to make things that way.&lt;/p&gt;
&lt;p&gt;Many people take “everything is an object” for granted because when this sentence is taken literally it matches their everyday experience. Since the word “object” in English basically means “a thing”, how can “everything is an object” be not true? But be careful since the definition of an “object” in &lt;span class="caps"&gt;OOP&lt;/span&gt; has a specific meaning which is very different from what it means in English.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OOP&lt;/span&gt;’s definition of an 
&lt;a href="http://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object&lt;/a&gt;
 is “a combination of 
 &lt;a href="http://en.wikipedia.org/wiki/Field_(computer_science)"&gt;data fields&lt;/a&gt;
  (attributes that describe the object) and associated procedures known as 
&lt;a href="http://en.wikipedia.org/wiki/Method_(computer_science)"&gt;methods&lt;/a&gt;
“. Can you really fit everything into this model?&lt;/p&gt;
&lt;p&gt;First let’s look at the real world and see if this definition can capture everything. Cars, trees, animals may sometimes be thought of as objects, but what about a change of the objects’ position, its velocity and duration? What methods do they have? Well, you may define classes called Velocity or Time, with methods such as addition, but do velocity and time really contain the things that you call “methods”? They don’t. They are just your imagination. You can add the velocities or time, but how can velocities or time contain the addition procedure? This is like saying that the bullets contain the gun.&lt;/p&gt;
&lt;p&gt;So the most you can say is that “everything is an object” is a good way of thinking, but that is not true either. The definition of an object implies that a method can only belong to one object, but most of the time it doesn’t make sense thinking of functions as belonging to any object. Say we have the expression 1+2, does the operator ‘+’ belong to 1, or does it belong to 2? You have to make some arbitrary choice. Since you can make a choice, this means the ‘+’ operator doesn’t really belong to either of them. It is inherently outside of the objects.&lt;/p&gt;
&lt;p&gt;So thinking of some things as objects may be helpful, but thinking of 
&lt;code&gt;everything&lt;/code&gt; as an object is neither true nor useful.  Unfortunately “everything is an object” has been taken as a dogma and the highest standard of &lt;span class="caps"&gt;OO&lt;/span&gt; language design. Some &lt;span class="caps"&gt;OO&lt;/span&gt; languages claim that everything is an object in them. Whenever you notice that something is not an object, somebody will try to make it one. They may succeed in that, but things get very complicated that way, because that’s not how things work.&lt;/p&gt;
&lt;p&gt;The idealism of “everything is an object” is similar to “everything is a function” in the functional programming world and “everything is a set” in the math world. Before computer science was conceived there was a thing called the 
&lt;a href="http://en.wikipedia.org/wiki/Lambda_calculus"&gt;lambda calculus&lt;/a&gt;
. Some people encoded everything including numbers and their operations, various data structures and control structures, …  all in lambdas. One of the encodings of numbers is called the 
&lt;a href="http://en.wikipedia.org/wiki/Church_encoding"&gt;Church numeral&lt;/a&gt;
. Every programming language researcher has played with them during their training. But unlike “everything is an object”, “everything is a function” has never become a dogma or marketing phrase. Those formulations sometimes provide mental exercises and inspirations to the researchers but nobody really use them for actual computation, because they are inefficient and they are not really how things work. They are just approximations (models) to some essence of computation that we can’t see. If you really use them for practical projects, things become complicated.&lt;/p&gt;
&lt;p&gt;Mathematicians have a similar thing: set theory. Some geniuses encoded everything — numbers, operations on numbers, mathematical structures, …  all in sets. Everything is just sets containing sets containing sets and so on. What’s the problem? But when they really tried to do their proofs using those sets, the proofs fell under their own weights. Too complicated. Even with the complexity, set theory is not expressive enough to capture whatever the mathematicians have to say. Many people tried to fix it, but they all failed.&lt;/p&gt;
&lt;p&gt;So “everything is an object” is in some sense on the same track of “everything is a function” and “everything is a set”. Good thought exercise, but doesn’t really work well in practice. I don’t think that there is some “one true language”, but this model of &lt;span class="caps"&gt;OOP&lt;/span&gt; is too far from correct or practical. It’s somewhat like the 
&lt;a href="http://en.wikipedia.org/wiki/Flat_Earth"&gt;flat earth theory&lt;/a&gt;
. Until today 
&lt;a href="http://theflatearthsociety.org/"&gt;some people&lt;/a&gt;
still believe that the earth is flat and make all kinds of theories to prove it. Some of their arguments look very scientific, but do you believe in their formulas or a picture of the earth from the &lt;span class="caps"&gt;ISS&lt;/span&gt;? When you get the fundamental things wrong and don’t throw them away, you have to patch them endlessly with even more complicated theories. And that’s what happened to &lt;span class="caps"&gt;OOP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="yw_flat-earth.png" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_flat-earth.png"/&gt;&lt;/p&gt;
&lt;h2 id="are-functions-objects"&gt;Are functions objects?&lt;a class="headerlink" href="#are-functions-objects" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From what I know, the original motivation of putting functions inside objects was to support &lt;span class="caps"&gt;GUI&lt;/span&gt; applications. You click on a button and some function (a callback) will be invoked. For the convenience of referring to the button, the callback takes the triggered object as its first argument. Since the callback does nothing more than this, it seems to be convenient to just store it inside the button. And thus we had an “object” which combines the attributes of the button and a method (the callback). Indeed this is a good idea, but this limited usage case can’t really justify a universal notion of “everything is an object”, just like a two-mile walk can’t prove that the earth is flat.&lt;/p&gt;
&lt;p&gt;If you really understand what is abstraction, you may have noticed that even the above story contains a subtle mistake: the callback in the button is not really a method. The true purpose of a method is to provide abstraction to the attributes, but the callback’s purpose is not to provide abstraction. It is just a usual function triggered by the button, which happens to take the button as its first argument.&lt;/p&gt;
&lt;p&gt;Very few functions should be considered methods of an object. If you look carefully, most of the time the objects just serve as a namespace (or module) in which you can store attributes and functions, but those functions don’t logically belong to the objects. They just take the objects as inputs and produce some output. Only the functions that are most intimately connected to the attributes and provide an abstraction layer to them should be considered methods. Most of those are called “getters”, “setters” or “iterators”.&lt;/p&gt;
&lt;p&gt;In some languages such as Scala or Python, functions are also treated as objects. But actually they just wrapped the functions into an object, give them some name such as “apply” or “&lt;strong&gt;call&lt;/strong&gt;“, so that when the objects are “invoked” you know which functions to call. But putting a function into an object doesn’t really mean that functions are also objects, just like inviting friends to your house doesn’t make them your family.&lt;/p&gt;
&lt;p&gt;Functions are fundamental constructs. They don’t belong to objects. They describe a change, transition or transformation of objects. They are not objects and can’t be simulated by objects. They are like a base case of an inductive definition. They are where the illusion of “everything is an object” ends.&lt;/p&gt;
&lt;h2 id="the-cost-of-excessive-abstraction"&gt;The cost of excessive abstraction&lt;a class="headerlink" href="#the-cost-of-excessive-abstraction" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The major appeal of &lt;span class="caps"&gt;OOP&lt;/span&gt; is abstraction (and thus code reusing and &lt;span class="caps"&gt;DRY&lt;/span&gt;), but actually most of those abstraction facilities are already provided by traditional procedural languages and functional languages. Some of them do it even better than &lt;span class="caps"&gt;OO&lt;/span&gt; languages. &lt;span class="caps"&gt;OO&lt;/span&gt; claims its originality by emphasizing abstraction much more strongly than other languages. The result is that &lt;span class="caps"&gt;OO&lt;/span&gt; programmers usually overdo it. Some of them pursue abstraction and code reusing to the degree as if they are everything about programming.&lt;/p&gt;
&lt;p&gt;&lt;img alt="yw_screen-shot-2014-01-02-at-2-02-38-am.png" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_screen-shot-2014-01-02-at-2-02-38-am.png"/&gt;&lt;/p&gt;
&lt;p&gt;For the purpose of code reusing, &lt;span class="caps"&gt;OO&lt;/span&gt; encourages a level of abstraction which makes programs hard to understand and hard to analyze. I often see Java programs with multiple levels of inheritance, overloading and design patterns, but actually doing very little. And because there is so much code that doesn’t do useful things, it is really hard to find out which part of the code is doing the thing you want. It is like going through a maze. Another nice word for this is “robustness”. If I have to go into all this trouble to make code reusable or robust, I’d rather just make copies of the code and modify them, but keep each copy simple and easy to understand.&lt;/p&gt;
&lt;p&gt;Whenever you criticize Java or C++ for their verbosity, &lt;span class="caps"&gt;OO&lt;/span&gt; proponents will tell you that they are not authentic &lt;span class="caps"&gt;OO&lt;/span&gt; languages. They would ask you to look at Smalltalk. If Smalltalk’s ways are that good, why almost nobody is using Smalltalk now? Because there are real problems in its approach. I think Smalltalk is the origin of over-abstraction and over-complication you find in other &lt;span class="caps"&gt;OO&lt;/span&gt; languages.&lt;/p&gt;
&lt;p&gt;The “authentic” &lt;span class="caps"&gt;OO&lt;/span&gt; style of Smalltalk promotes the notion of “extremely late binding”, which basically means that the meaning of the program constructs is determined as late as possible. Late binding gives you a chance to swap out the underlying implementation without forcing the upper levels to change, but this also means that you are no longer sure what a piece of code means. When I look at expressions such as ‘1+2′ and ‘if (t) then …  else … ‘ in Java or C++, I at least know for sure that they mean an integer addition and an usual conditional. But I’m no longer sure about this in an “extremely late binding language”, because the meaning of ‘+’ and ‘if” can be redefined. Giving the programmers the power of defining control structures is a bad idea, because soon your language will be abundant of quirky control structures designed by programmers who try to be clever. It will no longer be the language that you used to know.&lt;/p&gt;
&lt;p&gt;An example for this feature is Smalltalk’s conditional structure, which looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;
    &lt;span class="nb"&gt;ifTrue:&lt;/span&gt;[ &lt;span class="s"&gt;'greater'&lt;/span&gt; ]
    &lt;span class="nb"&gt;ifFalse:&lt;/span&gt;[ &lt;span class="s"&gt;'less or equal'&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You send a message ifTrue: to a Boolean object, passing as an argument a block of code to be executed if and only if the Boolean receiver is true.&lt;/p&gt;
&lt;p&gt;First of all, if you really have a well-designed language, you shouldn’t be wanting to define your own control structures. As a seasoned Lisp/Scheme programmer, I have seen many custom-designed control structures (such as the various looping macros) over the years, but none of them turned out to be good ideas. I’d rather write slightly longer and more verbose code in the vanilla language than to learn those weird control structures. Second, if you are really genius enough to have invented another good control structure, the late binding feature of Smalltalk probably won’t provide you the necessary power for defining it. The power of functions as an abstraction tool is limited. It is strictly less powerful than Lisp/Scheme’s macros. Third, this feature of Smalltalk is not really a novel approach and it has a big problem. A similar but more beautiful conditional construct had been defined in lambda calculus since before computer science was born:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very beautiful and can be done in any functional language, but why none of the functional languages implement conditionals this way? Because when you see an expression &lt;span class="caps"&gt;IF&lt;/span&gt; b t f, you will have no idea whether it is a conditional or not, because &lt;span class="caps"&gt;IF&lt;/span&gt; can be redefined in the program. Also because &lt;span class="caps"&gt;IF&lt;/span&gt; is just a function, it may also accept unexpected values other than &lt;span class="caps"&gt;TRUE&lt;/span&gt; or &lt;span class="caps"&gt;FALSE&lt;/span&gt;. This may happen to make the conditional construct work but cause trouble later on. This is called “unintentional semantics”. This kind of bug can be very hard to track down.&lt;/p&gt;
&lt;p&gt;This approach also makes compiler and static analysis hard. When the compiler sees &lt;span class="caps"&gt;IF&lt;/span&gt; b t f, it no longer knows that it is a conditional and thus optimize it that way. It has to treat it as a usual function call. Similarly when the type checker sees it, it doesn’t know what type to expect for b, because it may not be a conditional at all. The above argument against the lambda calculus can easily be adapted to Smalltalk.&lt;/p&gt;
&lt;p&gt;So abstraction is a powerful weapon when used moderately, but when you do it in excess, it backfires. Not only does it make it hard for humans to understand the code, it makes automated analysis tools and compiler optimizations difficult or impossible to make.&lt;/p&gt;
&lt;h2 id="design-patterns-the-brain-eater"&gt;Design patterns, the brain eater&lt;a class="headerlink" href="#design-patterns-the-brain-eater" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although &lt;span class="caps"&gt;OO&lt;/span&gt; languages are touted for their ways of abstraction, they are actually not strong in terms of abstraction ability and expressiveness. There are certain things that are very easy to do in traditional procedural languages and functional languages, but was made unnecessarily hard in &lt;span class="caps"&gt;OO&lt;/span&gt; languages. This is why design patterns appeared. Design patterns’ origin was mostly due to the dogma of “everything is an object”, the lack of high-order functions (or the correct implementation of them) and &lt;span class="caps"&gt;OO&lt;/span&gt;’s tendency of mystifying things.&lt;/p&gt;
&lt;p&gt;When I first heard about design patterns I was already a PhD student at Cornell doing some &lt;span class="caps"&gt;PL&lt;/span&gt; research. I mostly used Standard &lt;span class="caps"&gt;ML&lt;/span&gt; and Haskell. After hearing my friends’ high opinions of the 
&lt;a href="http://en.wikipedia.org/wiki/Design_Patterns"&gt;Design Patterns&lt;/a&gt;
book (nicknamed the “GoF” book), I developed curiosity about its fame, so I borrowed one from the library. Within a few hours I found a mapping from all the weird names it introduced to the programming techniques I had been using all the time. Some of them are so fundamental and exist in every high-level language, so they don’t really need names. Most of the advanced ones (such as visitor) are transcriptions of functional programming concepts into a convoluted form in order to get around &lt;span class="caps"&gt;OO&lt;/span&gt; language’s limitations. Later on I found that Peter Norvig already gave a 
&lt;a href="http://norvig.com/design-patterns"&gt;talk&lt;/a&gt;
on design patterns as early as 1998, pointing out that almost all of the design patterns will be “transparent” once you have first-class functions. This confirmed my observations — I don’t need them.&lt;/p&gt;
&lt;p&gt;I have to admit that some of the design patterns are cleverly designed and contain some ingenuity. You really need to get to the essence of the &lt;span class="caps"&gt;OO&lt;/span&gt; languages’ internal designs and also understand lots of functional programming techniques in order to create them. But intelligence =/= wisdom. Even if they can achieve what functional languages can do, they are usually a lot more complicated. Choosing the hard ways can’t really prove your genius. When you have first-class functions, things become so much easier and you won’t even notice the design patterns’ existence. Like Peter Norvig said, they will become transparent. So what a good language designer should do is to add first-class functions into the language instead of proposing design patterns as workarounds.&lt;/p&gt;
&lt;p&gt;Every time I remove a design pattern (some other people wrote), the code becomes simpler and more manageable. I just removed the last visitor pattern from my Java code a few days ago and I felt so relieved. They gave me nothing but extra work when they existed. They hindered my progress. By deeply understanding how &lt;span class="caps"&gt;OO&lt;/span&gt; languages are implemented, you can write more advanced things than those provided by visitor patterns but without actually using them. I owe these insights into design patterns to some functional programming people. If you really want to understand the essence of &lt;span class="caps"&gt;OO&lt;/span&gt; design patterns and how &lt;span class="caps"&gt;NOT&lt;/span&gt; to use them, 
&lt;a href="http://www.amazon.com/Little-Java-Few-Patterns/dp/0262561158"&gt;this little book&lt;/a&gt;
may be a good starting point.&lt;/p&gt;
&lt;p&gt;Unfortunately design patterns somehow got really popular in companies, to the degree of unbearable. I saw the GoF book on almost every bookshelf when I interned at Google. Even if you don’t write them yourself, there was almost no way you could avoid other people slipping design patterns into your code. Design patterns’ marketing strategy as I perceived was much like weight loss products: “It can burn your fat without you doing any work!” They appeal to some new programmers’ hope that they can write programs without understanding the fundamental concepts of computer science. Just by applying several patterns and patching things together, they hope to have a good program. This is too good to be true. You end up doing more work than you hoped to avoid. Design patterns eat programmers’ brains. After using design patterns for some time, they no longer see things or write programs in clear and straightforward ways.&lt;/p&gt;
&lt;h2 id="what-is-an-oo-language-any-way"&gt;What is an &lt;span class="caps"&gt;OO&lt;/span&gt; language any way?&lt;a class="headerlink" href="#what-is-an-oo-language-any-way" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To this point we haven’t yet talked about what makes a language an “&lt;span class="caps"&gt;OO&lt;/span&gt; language” and what makes it not. Is it an &lt;span class="caps"&gt;OO&lt;/span&gt; language just because I can put both data fields and functions into a record? Or is it an &lt;span class="caps"&gt;OO&lt;/span&gt; language only if it also provides extremely late binding? How about inheritance, overloading, etc etc? Must I have all of them? Any of them?&lt;/p&gt;
&lt;p&gt;It turns out that there is no good answer to this question. There really is no such thing as an “object-oriented language”. Objects can be part of a language, but it is just a small part of it. You can’t really say that a language is object-oriented just because it provides objects as a feature. The so-called &lt;span class="caps"&gt;OO&lt;/span&gt; languages are solidly rooted in traditional procedural programming (&lt;span class="caps"&gt;PP&lt;/span&gt;). &lt;span class="caps"&gt;OOP&lt;/span&gt; basically stole everything from &lt;span class="caps"&gt;PP&lt;/span&gt;, renamed the terminologies and acted as if the ideas were its own.&lt;/p&gt;
&lt;p&gt;Historically the term &lt;span class="caps"&gt;OO&lt;/span&gt; was mainly used for marketing reasons. It could give a language some advantages of attracting people if you claim it to be an &lt;span class="caps"&gt;OO&lt;/span&gt; language, but now this advantage is diminishing because more and more people have realized the problems of &lt;span class="caps"&gt;OO&lt;/span&gt;’s methodology.&lt;/p&gt;
&lt;h2 id="harm-in-education-and-industry"&gt;Harm in education and industry&lt;a class="headerlink" href="#harm-in-education-and-industry" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although &lt;span class="caps"&gt;OO&lt;/span&gt; has lots of problems, it is very successful in marketing and has risen to a dominant position over the years. Under social and market pressure, many colleges started using &lt;span class="caps"&gt;OO&lt;/span&gt; languages such as Java as their introductory language, replacing traditional procedural languages such as Pascal and functional languages such as Scheme. This in a large degree caused the students’ failure to learn the most essential concepts of programming. The only thing that &lt;span class="caps"&gt;OO&lt;/span&gt; emphasizes is code reusing, but how can you teach it to the students who can’t even write usable code, not to mention that code reusing is not really as important as some people believe.&lt;/p&gt;
&lt;p&gt;At both Cornell and Indiana, I have been a &lt;span class="caps"&gt;TA&lt;/span&gt; for introductory programming courses in Java. I did it for multiple semesters. I still remember how confused the students were. Most of them had trouble understanding things such as the meaning of “this”, why everything needs to be put inside classes, why make every field private and use getters, the difference between a method and a static method, etc etc.&lt;/p&gt;
&lt;p&gt;There is a good reason that they don’t understand — because &lt;span class="caps"&gt;OO&lt;/span&gt; is not how things work. Most of the time I feel that I was teaching design flaws and dogmas. Many of them learned very little in the end. Worse, some of those students really believed in &lt;span class="caps"&gt;OO&lt;/span&gt;. They ended up being proud of writing over-engineered and convoluted code. They no longer see things or write programs in straightforward ways. This is sad. I feel that we are no longer educating students as creative and critical thinkers, but mindless assembly line workers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="yw_modern-times.jpg" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_modern-times.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;In industry, &lt;span class="caps"&gt;OO&lt;/span&gt; hasn’t really proved its effectiveness with evidence. Good systems may be built in a “&lt;span class="caps"&gt;OO&lt;/span&gt; language”, but the code is often written by people who understand the problems of &lt;span class="caps"&gt;OO&lt;/span&gt; and don’t embrace “everything is an object” or “design patterns”. Good programmers usually use workarounds in &lt;span class="caps"&gt;OO&lt;/span&gt; languages and are essentially writing in a traditional procedural style combined with bits from functional programming. So some &lt;span class="caps"&gt;OO&lt;/span&gt; languages and their tools may be pretty widely used, but the &lt;span class="caps"&gt;OO&lt;/span&gt; style doesn’t really have much influence on the advancements of programming as a field.&lt;/p&gt;
&lt;h2 id="final-word"&gt;Final word&lt;a class="headerlink" href="#final-word" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So what does this post has to say? A jihad against &lt;span class="caps"&gt;OO&lt;/span&gt; languages? Advocate functional programming? Neither. As I said, there is no such thing as an “&lt;span class="caps"&gt;OO&lt;/span&gt; language”, so where is the war? Every so-called &lt;span class="caps"&gt;OO&lt;/span&gt; language also contains good elements that it borrowed (or stole) from procedural languages or sometimes functional languages, so they are not completely useless.&lt;/p&gt;
&lt;p&gt;But honestly, it is the extra features added by &lt;span class="caps"&gt;OO&lt;/span&gt; (in addition to procedural programming, &lt;span class="caps"&gt;PP&lt;/span&gt;) that are causing most of the problems. There is no denial of &lt;span class="caps"&gt;PP&lt;/span&gt;’s value. Those extra “true &lt;span class="caps"&gt;OO&lt;/span&gt; techniques” contain way more confusion than real value, to the point that their value is negligible. In my experience, accepting even one or two of those ideas may put you into a series of troubles and wrong ways of thinking which may take a long time to examine and recover.&lt;/p&gt;
&lt;p&gt;Thus I suggest not to buy &lt;span class="caps"&gt;OO&lt;/span&gt;’s way of thinking and don’t try to exploit its “features”. They are usually brain eaters that you want to stay away from. By eschewing those problematic features, you can still produce acceptable programs in an “&lt;span class="caps"&gt;OO&lt;/span&gt; language”, because you are basically using it as an non-&lt;span class="caps"&gt;OO&lt;/span&gt; procedural language.&lt;/p&gt;
&lt;h1 id="-"&gt;试理解 ;-) 快译畅读&lt;a class="headerlink" href="#-" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="yw_dark_age_battle.jpg" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_dark_age_battle.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;[写在2013年尾,编程的黑暗时代.]&lt;/p&gt;
&lt;p&gt;程序猿的世界充斥着各种时髦迷信.不时就有人跳出来吼:”俺能拯救世界!”诡异的是,无论多不靠谱的想法,总有追随者,并快速打造成全站的宗教,结成社区,尽量迫使其它所有人认同,以使这想法永存下去.&lt;/p&gt;
&lt;p&gt;面向对象编程(&lt;span class="caps"&gt;OOP&lt;/span&gt;)就是宣称能将世界从所谓:”编程危机”中拯救出来的宗教.
然而,
即便在其引入这么多年以后,
&lt;span class="caps"&gt;OOP&lt;/span&gt; 不仅没有拯救世界,相比它宣称带来的好处, 带来了更多的混乱以及伤害,
不幸的是,其教条以及错误,
已经 根深蒂固的广泛植根于这世界.
本文,俺希望就此提出俺的观战, 并尝试指出值得学习的教训.&lt;/p&gt;
&lt;p&gt;正如我的所有blog文章,
仅仅代表俺个人的意见, 并不代表我的教授以及雇主的态度.&lt;/p&gt;
&lt;h2 id="_2"&gt;一切皆对象 ?&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Is everything an object? &lt;/p&gt;
&lt;p&gt;&lt;code&gt;一切皆对象&lt;/code&gt; 这是&lt;span class="caps"&gt;OOP&lt;/span&gt; 的核心教条,
并视为&lt;span class="caps"&gt;OO&lt;/span&gt;语言的最高设计准则. 现在,让俺,来谈谈这货是否真如其宣称的这么好.&lt;/p&gt;
&lt;p&gt;很多人将
&lt;code&gt;一切皆对象&lt;/code&gt;
视为理所当然的,
因为这话从字面儿上是吻合日常经验的.
因为,英语中 &lt;code&gt;对象&lt;/code&gt; 的基本意思就是 &lt;code&gt;事物&lt;/code&gt;,
那么 &lt;code&gt;一切皆事物&lt;/code&gt; 当然正确了.
图样图森破,
在 &lt;span class="caps"&gt;OOP&lt;/span&gt; 中 &lt;code&gt;对象&lt;/code&gt; 可是特殊定义的,和生活英语可是没一毛钱关系.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OOP&lt;/span&gt;中
通常接受的
&lt;a href="http://en.wikipedia.org/wiki/Object-oriented_programming"&gt;对象&lt;/a&gt;
定义是: ”
&lt;a href="http://en.wikipedia.org/wiki/Field_(computer_science)"&gt;数据字段&lt;/a&gt;
(描述对象的属性)以及关联方法 的结合体.
” 你真能在所有情景中适应这种模式嘛?&lt;/p&gt;
&lt;p&gt;首先来设想一下&lt;span class="caps"&gt;OOP&lt;/span&gt; 模式是否能对真实世界加以解释. 汽车/树木/动物 视作对象的话, 那么它们的位置/速度/时间的 变化 乍说? 有什么对应的方法? 好吧, &lt;span class="caps"&gt;OOP&lt;/span&gt; 信徒可能叫你将类称为 速度 或是 时间 然后将方法增加进去. 可是速度/时间真的含有这种称为”方法”的东西 ? 当然没有, 这不过是想象罢了. 
你可以追加速度/时间,但是,怎么令其包含&lt;code&gt;加&lt;/code&gt;处理? 
这就好比说:&lt;code&gt;子弹包含了枪&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;哪,信徒们最常说的:”一切皆对象”只是种好的思维方法,但事实并非如此. 一个对象的定义意味着一个方法只能属于一个对象,但大部分时间此思想并没有作用于任何对象. 当我们论及表达式: 1+2 , 是否得说 “+” 属于 1 ,或是算 2 的? 你必须作出属性方法归属的选择,而选择本身就已经意味着 “+” 操作其实并不真正属于任何一个对象,而是固有在对象之外的.&lt;/p&gt;
&lt;p&gt;只能说 &lt;code&gt;有些&lt;/code&gt; 事儿上对象是有帮助的,而 一切 皆对象这事儿即不真实也无用. 
悲摧的是, &lt;code&gt;一切皆对象&lt;/code&gt; 已经成为面向对象语言设计的最高教条. 
一些面向对象语言声称在其内部真的一切都是对象. 
若你意识到什么不是对象时,就有人会跳出来将其折腾成对象. 
当然聪明人可以作到这点,只是事儿就变的复杂起来, 因为原本事物不是这么工作的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;一切皆对象&lt;/code&gt; 的理想完全类似 &lt;span class="caps"&gt;FP&lt;/span&gt; 世界里 &lt;code&gt;一切皆函式&lt;/code&gt; . 
以前计算机科学称这种构想叫 lambda算子(&lt;a href="http://en.wikipedia.org/wiki/Lambda_calculus"&gt;lambda calculus&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;有人就在编码时,将所有数字/数据结构都给包含在 lambda 中了.
而这种包含了一切的东西叫
&lt;a href="http://en.wikipedia.org/wiki/Church_encoding"&gt;Church numeral&lt;/a&gt;
. 但是,相比 &lt;code&gt;一切皆对象&lt;/code&gt; , 
&lt;code&gt;一切皆函式&lt;/code&gt; 好歹没有没有教条化过. 这只是在理论上是可行的,
但是,在实际工程中没有人这么折腾,因为这会令事儿变的复杂,而且效率低下.
因为,实际上并不是这么工作的,
它们只是近似描述(模式)计算机在我们视野外是如何计算的. 如果你真的将它们用在项目中,只能让事情变的复杂.&lt;/p&gt;
&lt;p&gt;数学家们其实也有类似的宗教: 
&lt;a href="http://en.wikipedia.org/wiki/Set_theory"&gt;集(合)论&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;有些天才试图编码掉一切:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字&lt;/li&gt;
&lt;li&gt;运算数字&lt;/li&gt;
&lt;li&gt;数学结构&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都能 &lt;code&gt;集合&lt;/code&gt; 了.
一切都想是
集合包含集合包含集合等等….
这有什么问题嘛?
就是当他们真正尝试使用这些 集合 来进行证明时,
证明自身被掩盖了.
因为复杂性,
数学家无法用集合理论进行足够的表述. 很多人试图修复集合论,但都失败了.&lt;/p&gt;
&lt;p&gt;因此&lt;code&gt;一切皆对象&lt;/code&gt; 在某种意义上
和
&lt;code&gt;一切皆函式&lt;/code&gt;
以及
&lt;code&gt;一切皆集合&lt;/code&gt;
是相同的, 都是看起来是美的,却从未在实际工程中很好的工作过.&lt;/p&gt;
&lt;p&gt;俺不认为存在: &lt;code&gt;唯一正当语言&lt;/code&gt; (one true language),
何况 &lt;span class="caps"&gt;OOP&lt;/span&gt; 的模式和现实相差太远.
这有点儿象
&lt;a href="http://en.wikipedia.org/wiki/Flat_Earth"&gt;地球扁平论&lt;/a&gt;,
.时植今日,依然
&lt;a href="http://theflatearthsociety.org/"&gt;有人&lt;/a&gt;
认为地球是平的,
而且用各种理论来证明.
他们一些论点看起来也很科学,
但是对比从国际空间站拍下来的照片,你愿意相信他们嘛?
而每当你发现有根本的东西错了,
又不想丢弃, 你就必须用更复杂的理论修补理论本身.&lt;/p&gt;
&lt;p&gt;而这,正是 &lt;span class="caps"&gt;OOP&lt;/span&gt; 世界正在进行的事儿.&lt;/p&gt;
&lt;p&gt;&lt;img alt="yw_flat-earth.png" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_flat-earth.png"/&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;对象方法 ?&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Are functions objects?&lt;/p&gt;
&lt;p&gt;据俺所知,将函式塞到对象中的原始动机是为了支持 &lt;span class="caps"&gt;GUI&lt;/span&gt; 开发.
点击一个按钮时,一些代码(回调)就应该被触发. 为了指明按了具体哪个按钮,回调的函式就需要触发的对象作为其一个参数.
因为回调就这么单纯,看起来将其存储在按钮中没有什么不好. 
于是我们有了个”对象”, 包含了按钮的属性以及方法(回调). 的确挺方便. 
但 &lt;span class="caps"&gt;GUI&lt;/span&gt; 应用只是个非常有限的情景,并不能真正证明 “一切皆对象”的普世性. 就象用两里路的平坦是不能证明地球是平的.&lt;/p&gt;
&lt;p&gt;如果你真的理解什么是抽象, 可能已经注意到,上述故事包含一个微妙的错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;按钮的回调是不是一个真正的方法&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方法的本质目的是提供抽象的属性,但回调的目的不是为了提供抽象. 在这儿,只是刚好按钮包含了一个触发功能.&lt;/p&gt;
&lt;p&gt;只有极少数功能应当视作对象的方法.
如果仔细观察,大部分情况中,对象只是作为一个命名空间(模块),
以便在其中存储相关属性和功能,
但是,这些功能在逻辑上并不属于对象.
他们只是将对象视为输入,并产生一些输出.
只有那些关系最密切,
并提供一个抽象层的功能,才应该考虑使用对象方法来封装.
其中大部分即所谓: “getters”/”setters”/”iterators”&lt;/p&gt;
&lt;p&gt;在一些语言,比如 Scala/Python, 函式也被视作对象.
而实际上,只是将一个函式包装成对象,
然后给予类似 &lt;code&gt;apply&lt;/code&gt; 或是 &lt;code&gt;__call__&lt;/code&gt; 的名称,
对象就酱紫能 &lt;code&gt;invoked&lt;/code&gt; 了,而大家都知道函式只是调用了而已.&lt;/p&gt;
&lt;p&gt;但是,将函式塞到对象中,并不等于函式也是对象, 好比,邀请朋友到家里来也不能令他们变成家人.&lt;/p&gt;
&lt;p&gt;函式为程序的基本结构.
他们不属于对象.
他们描述变化,转变或是传送对象.
他们不是对象,也不能抽象为对象.
他们就像一种基本情况的归纳定义.
他们是&lt;code&gt;一切皆对象&lt;/code&gt;的幻相的破灭.&lt;/p&gt;
&lt;h2 id="_4"&gt;过度抽象的代价&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ The cost of excessive abstraction &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OOP&lt;/span&gt; 的主要吸引力就是抽象(以便代码重用以及&lt;span class="caps"&gt;DRY&lt;/span&gt;),
然而,传统的程序语言以及函式语言提供的抽象设施足够了.
甚至于,他们中的一些比 &lt;span class="caps"&gt;OO&lt;/span&gt;语言抽象能力还要好.
&lt;span class="caps"&gt;OO&lt;/span&gt;信徒总是比其它语言更加强调抽象,好象这是&lt;span class="caps"&gt;OO&lt;/span&gt; 独创的.
结果是, &lt;span class="caps"&gt;OO&lt;/span&gt;程序猿总是作过头. 他们中有些人追求抽象以及代码复用的程度,就好象编程只是为了抽象.&lt;/p&gt;
&lt;p&gt;&lt;img alt="yw_screen-shot-2014-01-02-at-2-02-38-am.png" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_screen-shot-2014-01-02-at-2-02-38-am.png"/&gt;&lt;/p&gt;
&lt;p&gt;出于代码重用的目标,鼓励以&lt;span class="caps"&gt;OOP&lt;/span&gt;的形式来抽象,其结果却是令程序难以理解/分析.
俺经常见到有 &lt;span class="caps"&gt;JAVA&lt;/span&gt; 程序动用多层继承/重载,但实际作的事儿不多.
更糟的是,正因堆砌了如此多的代码,却没有真正在作事儿,
以至于难以找到哪部分是你真正想作的东西.就象穿越一个迷宫.
而对这,有另外一个漂亮的形容词是 “&lt;a href="http://zh.wikipedia.org/wiki/%E9%B2%81%E6%A3%92%E6%80%A7_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)"&gt;鲁棒性&lt;/a&gt;” (健壮性,Robustness)&lt;/p&gt;
&lt;p&gt;如果俺为了复用以及健壮,宁愿只用代码复制,再修订, 只要确保每个副本简单,容易理解.&lt;/p&gt;
&lt;p&gt;每当你抱怨  &lt;span class="caps"&gt;JAVA&lt;/span&gt;/C++ 的冗长时, &lt;span class="caps"&gt;OO&lt;/span&gt;程序猿就会告诉你,那些不是真正的 &lt;span class="caps"&gt;OO&lt;/span&gt; 语言.
一准向你推荐 Smalltalk 的.
但是,如果 Smalltalk 是好的,为毛现在几乎没有人使用 Smalltalk 进行工程开发?
俺认为, Smalltalk 就是其它 &lt;span class="caps"&gt;OO&lt;/span&gt; 语言中 过度抽象以及过度复杂的发源.&lt;/p&gt;
&lt;p&gt;在”正宗”&lt;span class="caps"&gt;OO&lt;/span&gt; 语言 Smalltalk 中,
提倡的风格是 “极迟绑定” (extremely late binding), 意味着,要尽可能晩的确定概念的意义再进行构建.&lt;/p&gt;
&lt;p&gt;这样,你有机会换出(swap out)底层实现,
而不用强制变更上层.
但是,同时也意味着你也无法及时明确一段代码究竟会作什么!
比如,在 &lt;span class="caps"&gt;JAVA&lt;/span&gt; 或是 C++ 中看到诸如
&lt;code&gt;1+2&lt;/code&gt; 或是 &lt;code&gt;if (t) then ...  else ...&lt;/code&gt; 的表达式时,
至少俺知道是作整数相加,以及往常一般的条件判别.
但是,若在”极迟绑定”语言中就完全一头雾水了!
因为 &lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;if&lt;/code&gt; 都是可以重新定义的.
类似问题也出现在 Lisp 家族语言的宏体系中.
事实证明,给予程序猿定义控制结构的能力,
这主意其实很囧, 因为立即就会发现,自作聪明的程序猿都在努力向语言里塞满各种特殊的控制结构.&lt;/p&gt;
&lt;p&gt;这一特性,可以举个 Smalltalk 的著名条件结构为例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nf"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;
    &lt;span class="nb"&gt;ifTrue:&lt;/span&gt;[ &lt;span class="s"&gt;'greater'&lt;/span&gt; ]
    &lt;span class="nb"&gt;ifFalse:&lt;/span&gt;[ &lt;span class="s"&gt;'less or equal'&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你发送一消息 &lt;code&gt;ifTrue:&lt;/code&gt; 给一个布尔对象,作为参数传递的代码, 当且仅当布尔接收器为真时,才执行.&lt;/p&gt;
&lt;p&gt;首先,如果你真正拥有一个良好设计的语言,
但是,不想设计自个儿的条件控制结构.作为一名经验丰富的 Lisp/Scheme 程序员,
多年来俺见过各种定制的控制结构(如各种循环宏),
但是,没有一个证明是靠谱的. 俺宁愿在更好的语言中写稍稍长点的详细代码,也不愿没接没够的折腾无尽的奇葩控制结构.&lt;/p&gt;
&lt;p&gt;其次,即使你天才到发明了另一种更好的控制结构,
Smalltalk 的延迟绑定功能,也难以提供足够的能力来定义它.
函式作为一个抽象工具的能力是有限的.
比Lisp/Scheme 的宏还要不如.&lt;/p&gt;
&lt;p&gt;第三,Smalltalk 这一特性并不是新东西,而且包含了一个重大问题.
类似的但更加优美的控制结构,
在计算机科学诞生前就已经由 lambda演算科学定义出来了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;FALSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是非常漂亮的,可以用任何语言实现的,
但是为毛没有任何一个函式语言以这种方式来实现条件语句?
因为当你看着表达式 &lt;code&gt;IF b t f&lt;/code&gt; ,
是无法明确这是否为一个条件, 因为 &lt;code&gt;IF&lt;/code&gt; 是能在程序中重定义的.
又,如果 &lt;code&gt;IF&lt;/code&gt; 是个函式,
它也可以接受额外的值比如 &lt;code&gt;TRUE&lt;/code&gt; 或是 &lt;code&gt;FALSE&lt;/code&gt;.
这样的条件构造可以工作,但是最后总是造成麻烦.
这就是所谓 “无意语义”(unintentional semantics).
而且这种 bug 最难以追查.&lt;/p&gt;
&lt;p&gt;这种实现,也令编译器或是静态分析器以及奏效.
设想当编译器遇到 &lt;code&gt;IF b t f&lt;/code&gt; 时,它无法得知这是否条件判定,从而进行优化.
它只能将其视作普通的函式调用.
同样类型检查器遇到时,它也无从期待 &lt;code&gt;b&lt;/code&gt; 应该是什么类型,
因为不应该是个条件.
lambda 演算以上参数形式却是可以对应到 Smalltalk 的.&lt;/p&gt;
&lt;p&gt;因此,适度使用时,抽象是个好主意, 一但过了,就会事与愿违.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;其实什么事儿不是酱紫的呢?)&lt;/p&gt;
&lt;p&gt;过度抽象,不仅令代码难以为人理解, 更加令自动分析工具以及编译器难有作为.&lt;/p&gt;
&lt;h2 id="_5"&gt;食脑魔:设计模式&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Design patterns, the brain eater&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OO&lt;/span&gt; 语言自我吹嘘他们的抽象弄清,其实抽象以及表述能力都很一般.
很多事儿,使用传统程序语言或是函式语言中很容易作到,
但是在 &lt;span class="caps"&gt;OO&lt;/span&gt; 语言中就变得的很折腾.
这才是为毛出现了 &lt;code&gt;设计模式&lt;/code&gt;.
其起源的主要原因,就是 &lt;code&gt;一切皆对象&lt;/code&gt; 的教条以及缺乏高阶函式
(或正确的执行它们),
还有 &lt;span class="caps"&gt;OO&lt;/span&gt; 的神秘主义倾向.&lt;/p&gt;
&lt;p&gt;头一次听说它们时,
俺已经在康奈尔大学作为博士生在进行一些 &lt;span class="caps"&gt;PL&lt;/span&gt; 研究了.
平时主要使用 &lt;span class="caps"&gt;ML&lt;/span&gt; 以及 Haskell 语言.
在听到朋友有关
&lt;a href="http://en.wikipedia.org/wiki/Design_Patterns"&gt;设计模式(Design Patterns)&lt;/a&gt;
(这书绰号&lt;code&gt;GoF&lt;/code&gt; ~Gang of Four, 即 &lt;code&gt;四人帮&lt;/code&gt;)
的高见后,好奇这书的名气,
所以从图书馆借来的.
几个小时内,就发现书里那堆古怪的名称,
可以逐一对应到俺一直在使用的各种编程技术上.
有此是如此基础,其实是存在于每一个高级程序语言中的, 并不需要被命名.
很多高级模式(比如 访问者)只是将函式编程概念变成一个令人费解的形式,
以便避开&lt;span class="caps"&gt;OO&lt;/span&gt; 语言的固有局限性.
后来又发现,
&lt;a href="http://en.wikipedia.org/wiki/Peter_Norvig"&gt;Peter Norvig&lt;/a&gt;
早在1998年就指出,
一但你完成了 &lt;code&gt;高阶函数&lt;/code&gt;(first-class function) ,
大部分设计模式对你将是 “透明的”.
这证实了俺的发现 - &lt;code&gt;我不需要它们&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;俺也得承认,有些设计模式的确精巧.
你真的必须理解 &lt;span class="caps"&gt;OO&lt;/span&gt; 语言的内部设计精髓,
同时也必须理解许多函式编程技术,才足以创建模式.
但是, 智力=/=智慧.
即便它们能作到函式语言作到的,也通常要复杂的多.
选择艰难模式并不能真正证明自个儿的天才.
当你完成了 &lt;code&gt;高阶函数&lt;/code&gt;(first-class function) ,事儿就变得容易很多,
你甚至于不会注意到用了什么设计模式.
就象
&lt;a href="http://en.wikipedia.org/wiki/Peter_Norvig"&gt;Peter Norvig&lt;/a&gt;
形容的,它们会变得的”透明”.
那么,良好的语言设计者,应该作的是尽可能增加 &lt;code&gt;高阶函数&lt;/code&gt;(first-class function) 到语言, 而不是提出设计模式作为解决方案.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;无法同意更多!只有减少程序员心智负担的开发语言才是有良心的.)&lt;/p&gt;
&lt;p&gt;每次俺从代码中中清除一个设计模式时(其它人写进去的),
代码就变得的更加简洁,易于管理.
前几天,俺终于很欣慰的将最后一个 访问者模式 从俺的 java 代码中给清除了.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;指 &lt;a href="https://github.com/yinwang0/pysonar2"&gt;PySonar&lt;/a&gt; 工程)&lt;/p&gt;
&lt;p&gt;设计模式除了额外的工作,没有赋予俺任何好处.
俺可以作任何事儿,
包括所谓 访问者模式 提供的所有先进东西,
但是,不通过使用神马模式.
另外,俺欠函式编程者有关设计模式一个说法.
如果你真想了解设计模式的精髓,以及如何能不用它们,
&lt;a href="http://www.amazon.com/Little-Java-Few-Patterns/dp/0262561158"&gt;这本分书&lt;/a&gt; 是个不错的开始.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;指 Dan Friedman 的小字辈儿好书,
参考:&lt;a href="http://www.yinwang.org/blog-cn/2012/07/04/dan-friedman/"&gt;&lt;span class="caps"&gt;GTF&lt;/span&gt; - Great Teacher Friedman&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;摧悲的是, 设计模式在企业里得到了某种程度上无法忍受的追捧.
当俺在 Google 实习时,在每一个书架上都见到了 &lt;code&gt;GoF&lt;/code&gt;!
即使你自个儿不用它们,
但是几乎不可能避免其它人向你的代码中倾倒设计模式代码.
其营销战略非常象减肥产品:
“即使你不动,它一样燃烧你的脂肪!”
他们很是蛊惑了一大批新手,
以为无需理解计算机科学的基本概念,只要将几种模式折腾在一起,
就获得了一个漂亮的解决方案.
这看起来美好的象真的似的!
而最终,你将作比希望避免的更多的事儿.
设计模式食空了程序员的大脑!
一但使用设计模式一段时间, 他们就再也看不到其它东西,不会使用明确而直接的方式来写代码了.&lt;/p&gt;
&lt;h2 id="oo"&gt;乜系&lt;span class="caps"&gt;OO&lt;/span&gt;语言?&lt;a class="headerlink" href="#oo" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ What is an &lt;span class="caps"&gt;OO&lt;/span&gt; language any way?&lt;/p&gt;
&lt;p&gt;有关这方面,咱还没有论及什么使一门语言 “面向对象”,
又或什么使之不是.
称其为&lt;span class="caps"&gt;OO&lt;/span&gt;语言,只是因为俺能将两个数据字段和一个方法塞到一个记录中?
又或是只有当其也提供 &lt;code&gt;极迟绑定&lt;/code&gt; 时才算 &lt;span class="caps"&gt;OO&lt;/span&gt;?
那么 继承/重载/等等,等等呢?
是必须同时具有所有特性?还是有任何一个就算&lt;span class="caps"&gt;OO&lt;/span&gt; 了?&lt;/p&gt;
&lt;p&gt;事实上,这一命题没有好答案.
本质上根本就不存在 “面向对象语言”.
对象可以是语言的一部分,而且只是一小部分.
你真心不能说因为提供了对象的支持,语言就是面向对象的.
所谓的 &lt;span class="caps"&gt;OO&lt;/span&gt;语言是深深植根于传统的过程化编程(&lt;span class="caps"&gt;PP&lt;/span&gt;).
本质上 &lt;span class="caps"&gt;OOP&lt;/span&gt; 的一切都是从 &lt;span class="caps"&gt;PP&lt;/span&gt; 偷走的, 只是加以改名假装是自个儿创造的.&lt;/p&gt;
&lt;p&gt;历史上鼓吹&lt;span class="caps"&gt;OO&lt;/span&gt;一直只是市场营销的需要.
一种语言想吸引人注目,就得宣称是 &lt;span class="caps"&gt;OO&lt;/span&gt; 的,
目测现在这点在慢慢改变,
因为越来越多的人意识到了 &lt;span class="caps"&gt;OO&lt;/span&gt; 的问题.&lt;/p&gt;
&lt;h2 id="oo_1"&gt;&lt;span class="caps"&gt;OO&lt;/span&gt;对教育和产业的伤害&lt;a class="headerlink" href="#oo_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Harm in education and industry&lt;/p&gt;
&lt;p&gt;虽然&lt;span class="caps"&gt;OO&lt;/span&gt; 有很多硬伤,但它在市场上非常成功,而且多年来都处于主导地位.
因为社会以及市场的压力,许多高校也开始使用 &lt;span class="caps"&gt;OO&lt;/span&gt;语言,
如&lt;span class="caps"&gt;JAVA&lt;/span&gt; 作为入门语言, 来取代传统的过程语言,比如 Pacsal,
又或是函式语言,比如 Scheme .
这在很大程度上造成了学生根本没有接触到编程最重要的概念.
&lt;span class="caps"&gt;OO&lt;/span&gt; 强调的唯一重要的事儿就是重用,
但是,怎么能教无法写出可用代码的学习重用? 更何况复审并不是如某些人物所言的那么重要.&lt;/p&gt;
&lt;p&gt;在康奈尔和印第安纳大学,俺都作为 &lt;span class="caps"&gt;TA&lt;/span&gt; 使用&lt;span class="caps"&gt;JAVA&lt;/span&gt; 来进行编程入门课程.
用了好几个学期.
清楚的记得学生们是怎么被绕晕的.
他们多数无法理解什么是 &lt;code&gt;"this"&lt;/code&gt;,
为毛一切都要塞进类里,
为毛每个字段都要私有并使用 &lt;code&gt;getters&lt;/code&gt;, 方法和静态方法的差异,等等等等…&lt;/p&gt;
&lt;p&gt;他们无法理解的一个正当理由是 - &lt;span class="caps"&gt;OO&lt;/span&gt; 并不是描述事情怎么运作的.
多数时候,俺感觉,俺在教授设计上的缺陷和教条.
最终他们只能学到些皮毛.
更杯具的是,那些真心相信&lt;span class="caps"&gt;OOP&lt;/span&gt; 的学生,
将以为能写出令人费解的代码而自豪.
他们再也无法用简洁直接的方式来编写程序了.
这是可悲的.
俺感觉,我们不再教导学生拥有创造性和批判性思维, 而只是批量制造流水线工人.&lt;/p&gt;
&lt;p&gt;&lt;img alt="yw_modern-times.jpg" src="http://zoomq.qiniudn.com/ZQCollection/img/yw_modern-times.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;工程方面,&lt;span class="caps"&gt;OO&lt;/span&gt; 并没有证实它宣称的威力.
良好的系统,可能用 “&lt;span class="caps"&gt;OO&lt;/span&gt; 语言”来实现,
但是,往往代码出自真正理解 &lt;span class="caps"&gt;OOP&lt;/span&gt; 的问题,
不盲从 &lt;code&gt;一切皆对象&lt;/code&gt;或是&lt;code&gt;设计模式&lt;/code&gt; 的工程师.
优秀程序员,通常在 &lt;span class="caps"&gt;OO&lt;/span&gt; 语言中进行变通,基本上只写传统的过程式的代码,
并结合函数式编程风格.
因此,一些 &lt;span class="caps"&gt;OOP&lt;/span&gt; 语言及其工具可能有非常广泛的应用,
但是,&lt;span class="caps"&gt;OO&lt;/span&gt;风格其实并没有真正对编程领域施加什么大太的推动.&lt;/p&gt;
&lt;h2 id="_6"&gt;终言&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Final word&lt;/p&gt;
&lt;p&gt;那么终究这篇文章想说什么?
对&lt;span class="caps"&gt;OO&lt;/span&gt;语言的圣战?
提倡函数式编程?
都不是,如俺所言, 根本没有所谓 &lt;code&gt;"面向对象语言"&lt;/code&gt;, 
所以,神马战争,是不存在的.
每一个 &lt;span class="caps"&gt;OO&lt;/span&gt;语言,都包含从过程式语言或是函数式语言借(或偷)来的好东西, 所以,它们也不算完全无用.&lt;/p&gt;
&lt;p&gt;但是实话哪,大部分问题究其根源,就是追加的那些个 &lt;span class="caps"&gt;OO&lt;/span&gt; 特性
(死塞到过程编程, &lt;span class="caps"&gt;PP&lt;/span&gt;).
而这些额外的 “真&lt;span class="caps"&gt;OO&lt;/span&gt;技术” 带来的混乱比价值要多的多.
从这点看其价值是微不足道的.
根据俺的经验,
一但接受了哪怕只有一两个 &lt;span class="caps"&gt;OO&lt;/span&gt; 思想,
就将引发一系列麻烦和思维错误中, 且需要很长时间才能醒悟并摆脱.&lt;/p&gt;
&lt;p&gt;因此,俺严正建议,表再接受任何 &lt;span class="caps"&gt;OO&lt;/span&gt;方面的想法,
也表试图使用它的 “特性”.
&lt;span class="caps"&gt;OO&lt;/span&gt; 就是&lt;code&gt;食脑魔&lt;/code&gt;,能躲多远躲多远.
但,你依然可以使用 “&lt;span class="caps"&gt;OO&lt;/span&gt;语言” 来生产可用程序,
因为你基本上是以非&lt;span class="caps"&gt;OO&lt;/span&gt;语言来使用它的.&lt;/p&gt;
&lt;h1 id="_7"&gt;是也乎&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;对于 &lt;code&gt;王珢&lt;/code&gt; , 关注了太久了,久到成为习惯了… 但是,认真翻译他翻越后的技术思考成果,还是第一次,可惜也只能用自个儿的语气来快译,真正涉及的所有技术细节,俺还没有能力逐一印证,俺也只是个期望简洁的结论,记忆下来,直接使用的那种知其然,不知所以然的家伙… &lt;/p&gt;
&lt;p&gt;但是,不得不说,对于 &lt;span class="caps"&gt;OOP&lt;/span&gt; 从第N次使用&lt;span class="caps"&gt;JAVA&lt;/span&gt; 败退后,
就一直对 &lt;span class="caps"&gt;OOP&lt;/span&gt; 的编程思想抱有深深的焦虑,
原先总是对自个儿为毛无法自然的对象化所有事物而自我嫌弃,
然后是奇怪为毛不用 &lt;span class="caps"&gt;OOP&lt;/span&gt; 编程反而更加自然,
到最后,沈游侠向俺演示,怎么通过清除 class 令Python代码更短,运行更快… &lt;/p&gt;
&lt;p&gt;这才,从俺的世界观里彻底放弃了 &lt;span class="caps"&gt;OOP&lt;/span&gt; ,但是,一直没有找到为毛这样的根因,现在 王珢完成了这一结论性描述,收藏之!严正推荐之!&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有关 &lt;code&gt;first-class function&lt;/code&gt; 的翻译&lt;/li&gt;
&lt;li&gt;最初俺是图样图森破的译为 &lt;code&gt;一流功能&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;王珢看了, 建议修订为 &lt;code&gt;高阶函数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;很多朋友指出,不对! 应该是 &lt;code&gt;第一类&lt;/code&gt;/&lt;code&gt;头等&lt;/code&gt;/&lt;code&gt;第一级&lt;/code&gt;/&lt;code&gt;一等公民&lt;/code&gt;…函数&lt;/li&gt;
&lt;li&gt;我们大汉语的问题,就这样爆发了,多样可重载性…&lt;/li&gt;
&lt;li&gt;参考:&lt;a href="http://en.wikipedia.org/wiki/First-class_function"&gt;First-class function - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;以及 &lt;a href="http://www.webdevelopmentmachine.com/blog/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B8%8E%E7%AC%AC%E4%B8%80%E5%9E%8B_higher-order-function-and-first-class-object/"&gt;高阶函数与第一型_Higher-order function and First-class object | Web Development Machine&lt;/a&gt; 等等吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;俺个人感觉, &lt;code&gt;高阶函数&lt;/code&gt; 的意向在这儿没有问题,只是我们过往的翻译习惯感觉哪儿有不对了…&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="changlog"&gt;Changlog ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;160322 发现 &lt;code&gt;王珢&lt;/code&gt; 在原文中给出了俺的翻译链接!&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yinwang0.wordpress.com/2013/12/24/oop/"&gt;&lt;img alt="131224_oop_linkback" src="http://zoomq.qiniudn.com/ZQCollection/snap/yw/131224_oop_linkback.png"/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;是也乎,(￣▽￣) 感动!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;140109 获得&lt;code&gt;王珢&lt;/code&gt;授权,得以进行传播.&lt;/li&gt;
&lt;li&gt;140108 前后7.42小时完成快译.&lt;/li&gt;
&lt;li&gt;131224 翻越抄录在 medium.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-o"&gt;增订:-o回收&lt;a class="headerlink" href="#-o" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;review 时发现 yw 增补了原blog ,有些段落已经发生了调整,只有回收了:&lt;/p&gt;
&lt;p&gt;The programmers’ world is full of fads and superstitions. Every now and then there will be somebody come up and announce: “I can save the world!” No matter how bad the ideas are, there will always be followers, and the ideas soon become their religion. They then develop their community or camp, try to make the rest of the world adopt those ideas, and try to make the ideas live forever.&lt;/p&gt;
&lt;p&gt;程序猿的世界充斥着各种时髦迷信.不时就有人跳出来吼:”俺能拯救世界!”诡异的是,无论多不靠谱的想法,总有追随者,并快速打造成全站的宗教,结成社区,尽量迫使其它所有人认同,以史这想法永存下去.&lt;/p&gt;
&lt;p&gt;Whenever you criticize a programming language or paradigm, people would think you are a proponent of some other language or paradigm. Since I wrote the article pointing out the drawbacks of purely functional programming and monads, some people have apparently taken me as a proponent of object-oriented programming. That’s far from the case. I don’t like &lt;span class="caps"&gt;OO&lt;/span&gt; at all. I use almost none of the &lt;span class="caps"&gt;OO&lt;/span&gt; techniques even when I write programs in Java.&lt;/p&gt;
&lt;p&gt;当你开始批评某编程语言或是范式时,人们就认为你一定是另外某某党的拥趸. 自从俺写文章黒 纯函式 编程以及单子的问题后, 有的就以为俺已经投入到 &lt;span class="caps"&gt;OOP&lt;/span&gt; 的怀抱中了. 图样图森破,俺从来就没有尿过 &lt;span class="caps"&gt;OOP&lt;/span&gt;, 即便在使用&lt;span class="caps"&gt;JAVA&lt;/span&gt; 编程时.&lt;/p&gt;
&lt;p&gt;I have a scientific mind. I do research on programming languages and I make some of my own. I have implemented almost every feature in every language. So programming languages have no power upon me. I play with them like toys. I never see a language or a paradigm as a whole. I can dissect them and take the good parts that I liked, and discard the parts that don’t work well.&lt;/p&gt;
&lt;p&gt;俺具备科学思想.进行过编程语言的研究,而且自行实现过一些. 在任何语言上俺都能实现几乎所有语言特性. 因此,编程语言已经蒙不住俺了.俺能象玩具一般把玩它们, 在俺眼中它们只是一堆零件,可以任意折腾,提取俺喜欢的,丢弃俺不屑的.&lt;/p&gt;
&lt;p&gt;Actually in the first version of the previous article I also criticized &lt;span class="caps"&gt;OOP&lt;/span&gt;, but I soon realized that it may not be an interesting topic. I have known the shortcomings of &lt;span class="caps"&gt;OOP&lt;/span&gt; and associate design pattens etc for many years and I thought that most programmers know them, and there is no need to write about them. It turns out that I was wrong. I have lived in my nice little world for too long and forgot how confusing the world can be.&lt;/p&gt;
&lt;p&gt;其实以往文章有部分已经对 &lt;span class="caps"&gt;OOP&lt;/span&gt; 吐糟过了,但是,很快反应过来这可能不是个有趣的话题. 俺以为大多数程序猿已经对 &lt;span class="caps"&gt;OOP&lt;/span&gt; 以及关联的设计模式的缺陷,没必要强调了. 然而,事实证明是俺图样图森破了,在自个儿可爱的小世界中呆久了,容易忘记外面的混沌.&lt;/p&gt;
&lt;p&gt;I just saw this InfoQ talk by Gilad Bracha today. He dislikes the purely functional cult as much as I do, but unlike me, he has subscribed to another cult that is &lt;span class="caps"&gt;OOP&lt;/span&gt;. Although he made some good points, the general message I got from the talk was that &lt;span class="caps"&gt;OOP&lt;/span&gt; the “one true king” is going to rule the world, and &lt;span class="caps"&gt;FP&lt;/span&gt; will be deconstructed and serve as a subordinate of it. &lt;span class="caps"&gt;OOP&lt;/span&gt; will live forever. This is ridiculous.&lt;/p&gt;
&lt;p&gt;刚看到今天 InfoQ 上 Gilad Bracha 的访谈 . 他象俺一样不是性能崇拜者, 但是,他已经是邪恶的&lt;span class="caps"&gt;OOP&lt;/span&gt; 教派成员了, 虽然传达了一些很好的意见,但是,整体上对于 &lt;span class="caps"&gt;OOP&lt;/span&gt; 是”真圣”, &lt;span class="caps"&gt;FP&lt;/span&gt; 将解构为 &lt;span class="caps"&gt;OOP&lt;/span&gt; 的下属, 而 &lt;span class="caps"&gt;OOP&lt;/span&gt; 将永存. 这就过了吼!&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;FP&lt;/span&gt; has its problems, but it deserves a lot more respect than this. Although I dislike some purely functional language’s cult-like culture, &lt;span class="caps"&gt;FP&lt;/span&gt; in general is highly valued. &lt;span class="caps"&gt;FP&lt;/span&gt; taught me a lot more and contains a lot more value than &lt;span class="caps"&gt;OOP&lt;/span&gt;. The education I received from some of the best &lt;span class="caps"&gt;FP&lt;/span&gt; people made me a better programmer. Even when I use a &lt;span class="caps"&gt;OO&lt;/span&gt; language, I avoid its shortcomings and write in a much cleaner way than the usual &lt;span class="caps"&gt;OO&lt;/span&gt; style. Some &lt;span class="caps"&gt;OO&lt;/span&gt; languages have been learning (or stealing) from &lt;span class="caps"&gt;FP&lt;/span&gt; languages for long and benefitted from it. To make a living, some highly educated &lt;span class="caps"&gt;FP&lt;/span&gt; people work on &lt;span class="caps"&gt;OO&lt;/span&gt; languages, make good compilers or tools for them. I feel terrible that somebody talks about &lt;span class="caps"&gt;FP&lt;/span&gt; that way.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;FP&lt;/span&gt; 当然有自身的固有问题,但是它值得更多的尊重. 虽然俺不喜欢一些 纯函式 语言邪教般的文化, 但是 &lt;span class="caps"&gt;FP&lt;/span&gt; 具有很高的价值. &lt;span class="caps"&gt;FP&lt;/span&gt; 教了俺很多好东西,含有比 &lt;span class="caps"&gt;OOP&lt;/span&gt; 更多价值. 从那些 &lt;span class="caps"&gt;FP&lt;/span&gt; 程序员身上接受的教导令俺成为更好的程序员. 甚至当我使用一个 面向对象 的语言时, 俺也习惯性的在躲避其缺点, 使用更加简洁的方式来完成功能. 一些 面向对象的语言,其实一直在向 &lt;span class="caps"&gt;FP&lt;/span&gt; 窃取思想而从中受惠. 限于生计, 有些受过 &lt;span class="caps"&gt;FP&lt;/span&gt; 高级教育的程序员,却在为 面向对象的语言工作,为其编写更好的编译或其它工具. 这令俺细思恐极.&lt;/p&gt;
&lt;p&gt;Gilad criticized some bad designs in &lt;span class="caps"&gt;FP&lt;/span&gt;, but highly promoted the bad designs from &lt;span class="caps"&gt;OOP&lt;/span&gt;, to the degree of calling them “the one true way”. Many aspects of &lt;span class="caps"&gt;OOP&lt;/span&gt; have been bringing harm to the software industry and computer science education for long, but he didn’t mentioned them. The more I forget about those ideas from &lt;span class="caps"&gt;OO&lt;/span&gt;, the simpler and better my code becomes. I thought many people have learned these lessons, but it looks that’s not true.&lt;/p&gt;
&lt;p&gt;Gilad 批评了一些&lt;span class="caps"&gt;FP&lt;/span&gt; 中不好的设计, 但鼓吹 &lt;span class="caps"&gt;OOP&lt;/span&gt; 的设计模式是 “唯一正当”的,这更加要命. 事实上 &lt;span class="caps"&gt;OOP&lt;/span&gt; 对计算机科学的教育以及软件产业已经造成了深远的伤害. 虽然俺自觉的忘记 &lt;span class="caps"&gt;OOP&lt;/span&gt; ,用更加简洁的方式改善代码. 原本以为大家都跟俺一样,但看来现实并非如此.&lt;/p&gt;
&lt;p&gt;Thus I realized that my original criticism of &lt;span class="caps"&gt;OOP&lt;/span&gt; had some value, and I decided to write a dedicated article about it.&lt;/p&gt;
&lt;p&gt;故此,俺意识到,俺对&lt;span class="caps"&gt;OOP&lt;/span&gt; 的批评具有一定的价值,决定写下来, 好好聊聊.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;h3 id="_8"&gt;过度抽象的代价&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;~ The cost of excessive abstraction &lt;/p&gt;
&lt;p&gt;The major appeal of &lt;span class="caps"&gt;OOP&lt;/span&gt; is abstraction, but &lt;span class="caps"&gt;OO&lt;/span&gt; programmers usually overdo it. I know the value of abstraction. I build abstractions every day, in all kinds of languages. But &lt;span class="caps"&gt;OOP&lt;/span&gt; advocates a level of abstraction which makes programs hard to understand and hard to analyze. I often see Java programs with multiple levels of inheritance and overloading but doing very little. And worse, because there are so much code that doesn’t do real things, it is very hard to find out which part of the code is doing the thing you want.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OOP&lt;/span&gt; 的主要吸引力就是抽象,
但是, &lt;span class="caps"&gt;OO&lt;/span&gt;程序猿总是作过头.
俺明白抽象的价值.
每天俺都在各种语言中实践着抽象.
但, &lt;span class="caps"&gt;OOP&lt;/span&gt; 主张构建抽象层,这通常使程序难以理解/分析.
俺经常见到有 &lt;span class="caps"&gt;JAVA&lt;/span&gt; 程序动用多层继承/重载,但实际作的事儿不多.
更糟的是,正因堆砌了如此多的代码,却没有真正在作事儿, 以至于难以找到哪部分是你真正想作的东西.&lt;/p&gt;
&lt;p&gt;Whenever you complain about Java or C++, &lt;span class="caps"&gt;OO&lt;/span&gt; proponents will tell you that they are not authentic &lt;span class="caps"&gt;OO&lt;/span&gt; languages. They would ask you to take a look at Smalltalk. If Smalltalk’s ways are that good, why almost nobody is using Smalltalk now? Because there are real problems in its approach. The “authentic” &lt;span class="caps"&gt;OO&lt;/span&gt; style of Smalltalk promotes the notion of “extremely late binding”, which basically means that the meaning of the program constructs is determined as late as possible.&lt;/p&gt;
&lt;p&gt;每当你抱怨 &lt;span class="caps"&gt;JAVA&lt;/span&gt;/C++ 时,&lt;span class="caps"&gt;OO&lt;/span&gt;程序猿就说,那些不是真正的 &lt;span class="caps"&gt;OO&lt;/span&gt; 语言.
一准向你推荐 Smalltalk 的.
但是,如果 Smalltalk 是好的,为毛现在几乎没有人使用 Smalltalk 进行工程开发?
在”正宗”&lt;span class="caps"&gt;OO&lt;/span&gt; 语言 Smalltalk 中,
提倡的风格是 “极迟绑定” (extremely late binding), 意味着,要尽可能晩的确定概念的意义再进行构建.&lt;/p&gt;
&lt;p&gt;Late binding means that you have a chance to swap out the underlying implementation without forcing the upper levels to change, but it also means that you are no longer sure what a piece of code means! When I look at expressions such as ‘1+2′ and ‘if (t) then …  else … ‘ in Java or C++, I at least know for sure that they mean an integer addition and an usual conditional. But I’m not sure about this in an “extremely late binding language”, because even the meaning of ‘+’ and ‘if” can be redefined. A similar problem happens to Lisp family languages’ macro systems. It is bad idea of giving the programmers the power of defining control structures, because soon your language will be abundant of quirky control structures designed by programmers who try to be clever.&lt;/p&gt;
&lt;p&gt;这样,你有机会换出(swap out)底层实现,
而不用强制变更上层.
但是,同时也意味着你也无法及时明确一段代码究竟会作什么!
比如,在 &lt;span class="caps"&gt;JAVA&lt;/span&gt; 或是 C++ 中看到诸如
&lt;code&gt;1+2&lt;/code&gt; 或是 &lt;code&gt;if (t) then ...  else ...&lt;/code&gt; 的表达式时,
至少俺知道是作整数相加,以及往常一般的条件判别.
但是,若在”极迟绑定”语言中就完全一头雾水了!
因为 &lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;if&lt;/code&gt; 都是可以重新定义的.
类似问题也出现在 Lisp 家族语言的宏体系中.
事实证明,给予程序猿定义控制结构的能力, 这主意很囧,因为立即就会发现,自作聪明的程序猿都在努力向语言里塞满各种特殊的控制结构.&lt;/p&gt;
&lt;p&gt;Abstraction is a good idea when used moderately, but when you do it in excess, it backfires. Not only does it make it hard for humans to understand the code, it makes automated analysis tools and compiler optimizations difficult or impossible to make. I built an advanced static analysis tool for Python called PySonar. It works okay in general, but under the premise that the programs don’t use the “deep magic” of Python (which are possibly learned from Smalltalk). If you do, there are all sorts of ways you can confuse the analysis, but for that I can do nothing to help. Nothing can analyze or optimize the code if you put expensive or undecidable computations into the abstraction layer.&lt;/p&gt;
&lt;p&gt;适度使用时,抽象是个好主意,
一但过了,就会事与愿违.(其实什么事儿不是酱紫的呢?)
过度抽象,不仅令代码难以为人理解,
更加令自动分析工具以及编译器难有作为.
俺创建的先进静态分析工具,
对 Python 的叫 &lt;a href="https://github.com/yinwang0/pysonar2"&gt;PySonar&lt;/a&gt;.
其一般工作起来还成,
只要没用 Python 玩一些 &lt;code&gt;深度魔术&lt;/code&gt;(deep magic)
(即前述Smalltalk 中能玩的).
如果你一定要玩,有太多方法可以弄晕分析器,
这时,俺也帮不了你什么了.
你一但将华丽的无法理解的东西塞到抽象层, 那就没有任何东西能帮你分析或是优化代码了!&lt;/p&gt;
&lt;p&gt;So is there any value of making those deep abstractions an option but not encouraged to use by usual programmers? There might be, but probably too little to offset the lost safety guarantee and performance.&lt;/p&gt;
&lt;p&gt;那么,不鼓励普通程序猿使用深层抽象,有什么价值会丧失? 可能有,但是,一定无法抵消代码失去安全以及性能保障!&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;h3 id="are-functions-objects_1"&gt;Are functions objects?&lt;a class="headerlink" href="#are-functions-objects_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The original motivation of putting functions inside objects was to support &lt;span class="caps"&gt;GUI&lt;/span&gt; applications. You click on a button and some code (a callback) will be invoked. For the convenience of referring to the button that gets clicked, the callback takes the triggered object as its first argument. Since the callback does nothing more than this, it seems to be convenient to just store it inside the button. And thus we had an “object” which combines the attributes of the button and its method (the callback). Indeed it is convenient and a good idea. But the limited usage case of &lt;span class="caps"&gt;GUI&lt;/span&gt; applications can’t really justify a universal notion of “everything is an object”. Computer science often suffers from such over-generalizations.&lt;/p&gt;
&lt;p&gt;将函式塞到对象中的原始动机是在 &lt;span class="caps"&gt;GUI&lt;/span&gt; 开发中.点击一个按钮时,一些代码(回调)就应该被触发. 为了指明按了具体哪个按钮,回调的函式就想要一个指代的对象. 因为回调就这么单纯,看起来将其存储在按钮中没有什么不好. 于是我们有了个”对象”. 的确挺方便. 但 &lt;span class="caps"&gt;GUI&lt;/span&gt; 应用只是个非常有限的情景,并不能真正证明 “一切皆对象”的普世性. 可惜计算机科学这种过度概括是常态.&lt;/p&gt;
&lt;p&gt;But even the above contains a subtle mistake: the callback in the button is not really a method. It is just a usual function. Very few procedures should be considered methods of an object, and most others are just functions. If you look carefully, most of the time the objects just serve as a namespace (or module) in which you can put data fields and functions. But those functions can also live on their own (such as addition of velocities or time). They just take the objects as inputs and produce some output. Only the functions that are most intimately connected to the fields and provide an “abstraction layer” should be considered methods. Most of those are “getters”, “setters” or “iterators”. Functions don’t necessarily belong to objects. They are not objects. They describe a change, transition or transformation of objects. They are external to the objects.&lt;/p&gt;
&lt;p&gt;但是,即使上述包含一个微妙的错误:在按钮的回调是不是一个真正的方法. 这只是一个平常的功能. 很少有程序应被视为一个对象的方法,而大多数人都只是功能. 如果你仔细观察,大部分时间的对象只是作为一个命名空间(或模块)中,你可以把数据域和功能. 但是,这些功能也可以生活在他们自己的(如加速度或时间). 他们只是把对象作为输入,并产生一些输出. 只有那些最密切相关的领域,并提供了一个”抽象层”的功能,应考虑方法. 其中大部分是”干将”,”二传手”或”迭代器”. 功能不一定属于对象. 他们不是对象. 他们描述的改变,转变或物体的转型. 它们是外部的对象. &lt;/p&gt;
&lt;p&gt;In some languages such as Scala or Python, functions are also treated as objects. But they actually just wrapped the functions into an object, give them some name such as “apply” or “&lt;strong&gt;call&lt;/strong&gt;“, so that when the objects are “invoked”, you know which functions to call. But putting a function into an object doesn’t really mean functions are also objects, just like inviting friends to your house doesn’t make them your family.&lt;/p&gt;
&lt;p&gt;在一些语言,比如 Scala/Python, 函式也被视作对象.
而实际上,只是将一个函式包装成对象,
然后给予类似 &lt;code&gt;apply&lt;/code&gt; 或是 &lt;code&gt;__call__&lt;/code&gt; 的名称,
对象就酱紫能 &lt;code&gt;invoked&lt;/code&gt; 了,而大家都知道函式只是调用了而已.&lt;/p&gt;
&lt;p&gt;但是,将函式塞到对象中,并不等于函式也是对象, 好比,邀请朋友到家里来也不能令他们变成家人.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;h3 id="actor"&gt;一切皆角色(actor) ?&lt;a class="headerlink" href="#actor" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;~ Everything is an actor? &lt;/p&gt;
&lt;p&gt;In his talk, Gilad Bracha disagrees with the &lt;span class="caps"&gt;FP&lt;/span&gt; hypes such as monads and pattern matching (with some good points), but he over-valued the ways of &lt;span class="caps"&gt;OOP&lt;/span&gt; and the actor model. From the blog posts he refers to, you can see that he thinks of the actor model as the “one true way”.&lt;/p&gt;
&lt;p&gt;在 Gilad Bracha 的有关言论中,
他不认同 &lt;span class="caps"&gt;FP&lt;/span&gt; 的炒作,
类似 monads 以及 模式匹配(这有点儿好处),
但他完全高估了 &lt;span class="caps"&gt;OOP&lt;/span&gt; 和角色模式了.
从他的blog 文章中可以看到,他宣称 角色模式是 “唯一正解”.&lt;/p&gt;
&lt;p&gt;I’m always wary of such notion as “one true way” or “everything is… ” I actually read Carl Hewitt’s actor model paper a long time ago and also some of his other concepts such as Direct LogicTM (Yes, there is a trademark sign on it). I didn’t really appreciate the papers and his way of writing, with the “dedicated to some-big-names” headlines, trademark signs and grand claims.&lt;/p&gt;
&lt;p&gt;俺对任何宣称 “唯一…” 或是 “一切…”
的概念有疑虑.
其实很久以前,俺就查阅过 Carl Hewitt 的角色模式论文,
他也描述了其它模式,比如 “Direct LogicTM”
(是的,有商标签注的呢).
这些论文都是标题 “高大上”,签注商标以配套宏大的索赔可能性. 俺真心没体会到他论文这种撰写方法有什么意义.&lt;/p&gt;
&lt;p&gt;The actor model suffers from the same drawbacks of &lt;span class="caps"&gt;OOP&lt;/span&gt; as I mentioned: over-abstraction and lacking of general expressiveness. There is no way a human being or an automated system can effectively reason about the programs if you build them at way. It hides bugs. Although the actor model may be useful in some cases, it is not really expressive and simple enough to nicely capture all computations. It has too much application-specific logic (which is essentially &lt;span class="caps"&gt;OOP&lt;/span&gt;) built in, thus it is not at the same universal level as lambda calculus or Turing machines.&lt;/p&gt;
&lt;p&gt;角色模式有同&lt;span class="caps"&gt;OOP&lt;/span&gt; 一样的毛病,
正如俺所言:过度抽象,缺乏正常的表达能力.
用这种模式创建的程序,
没办法让一个人或是自动系统对其进行有效的推导.
当然,有时,角色模式很有用.
但是,它并不能真正很好的对所有计算进行简洁有效的表述.
它有太多内建的特殊应用逻辑
(这是&lt;span class="caps"&gt;OOP&lt;/span&gt; 的通病),
因此它和 lambda演算以及图灵机 不在一个能力水平上.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;h3 id="_9"&gt;面向对象设计模式的傻缺&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;~ The stupidity of &lt;span class="caps"&gt;OO&lt;/span&gt; design patterns &lt;/p&gt;
&lt;p&gt;It may not be inherent in all &lt;span class="caps"&gt;OO&lt;/span&gt; languages, but &lt;span class="caps"&gt;OO&lt;/span&gt; design patterns (such names as Factory, Facade, Flyweight, Singleton, Visitor etc) have been the major source of over-complication and confusion. Their origin was mostly due to the dogma of “everything is an object” and the lack of high-order functions (or the correct implementation of them).&lt;/p&gt;
&lt;p&gt;可能不是所有 &lt;span class="caps"&gt;OO&lt;/span&gt; 语言固有的,
但 面向对象设计模式 
(类似 Factory, Facade, Flyweight, Singleton, Visitor 等等)
就是代码过度复杂/混乱的根源.
主要原因就是 “一切皆对象” 的教条以及缺乏高阶函式 (或正确的执行它们).&lt;/p&gt;
&lt;p&gt;The design patterns are completely nonsense to me and I never used them. When I first heard about them I was already a PhD student at Cornell doing some &lt;span class="caps"&gt;PL&lt;/span&gt; research. I was curious about the book’s fame and borrowed one from the library. But I soon found a mapping from all those weird names to the programming techniques I have been using all the time. I don’t understand how such a book as GoF can ever be published which contains nothing but just giving new and weird names to existing programming techniques that I use every day. If you say the purpose of writing this book is to “improve communication of programmers”, then I would write a book and give new names to air, water and all kinds of food, in order to “improve the communication of all human beings”.&lt;/p&gt;
&lt;p&gt;这类设计模式完全是胡说八道,
俺从未使用过它们.
头一次听说它们时,
俺已经在康奈尔大学作为博士生在进行一些 &lt;span class="caps"&gt;PL&lt;/span&gt; 研究了.
(Programming Language research,参考:&lt;a href="http://zoomq.qiniudn.com/ZQScrapBook/ZqSKM/data/20120910004839/index.html"&gt;什么是程序语言的研究&lt;/a&gt;)
因为好奇这书的名气,
所以从图书馆借来的.
很快,俺发现书里那堆古怪的名称,可以逐一对应到俺一直在使用的各种编程技术上.
实在不明白,GoF
(&lt;code&gt;设计模式&lt;/code&gt; 作者通常叫做 &lt;code&gt;GoF&lt;/code&gt; ~Gang of Four, 即 &lt;code&gt;四人帮&lt;/code&gt;)
这书是怎么出版的,
这书中没有任何新知识,
只是将大家每天都在使用的现有编程技术,赋予了新奇的名字.
如果你说这书的目的就是为了 
&lt;code&gt;改善程序员的沟通&lt;/code&gt;.
那俺就应该写本书,来给空气/水/各种食物赋予全新名称,
以 &lt;code&gt;改善全人类的沟通&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Peter Norvig gave a talk on design patterns in 1998 pointing out most of the design patterns will be “transparent” once you have first-class functions. He was too polite to call design patterns nonsense or stupid, but that’s implied.&lt;/p&gt;
&lt;p&gt;Peter Norvig 在98年就设计模式指出,
一但你完成了 &lt;code&gt;高阶函数&lt;/code&gt;(first-class function) ,
大部分设计模式对你将是 “透明的”.
他其实就是过于文雅的暗示: 设计模式就是废话或是愚蠢的.&lt;/p&gt;
&lt;p&gt;Every time I remove a design pattern (some other people made) from PySonar, the code becomes simpler and more manageable. I just removed the last visitor pattern a few days ago, and I felt so relieved. They gave me nothing but extra work when they existed. I can do anything, including a lot more advanced things than those provided by visitor patterns, but without using them.&lt;/p&gt;
&lt;p&gt;每次俺从 &lt;a href="https://github.com/yinwang0/pysonar2"&gt;PySonar&lt;/a&gt;
中清除一个设计模式(由某些人物,生造出来的),
代码就变得的更加简洁,易于管理.
前几天,俺终于很欣慰的将最后一个 访问者模式 给清除了.
设计模式除了额外的工作,没有赋予俺任何好处.
俺可以作任何事儿,
包括所谓 访问者模式 提供的所有先进东西, 但是,不通用使用模式.&lt;/p&gt;
&lt;p&gt;I owe my insights into design patterns to some functional programming people. If you really want to understand the essence of &lt;span class="caps"&gt;OO&lt;/span&gt; design patterns, and how &lt;span class="caps"&gt;NOT&lt;/span&gt; to use them, take a look at this little book other than the GoF one.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;</content><category term="YinWang"></category><category term="Pythonner"></category><category term="Zh"></category></entry><entry><title>Tests and static analysis</title><link href="https://blog.zoomquiet.io/131127-yw-on-test-static-analysis.html" rel="alternate"></link><published>2013-11-27T00:00:00+08:00</published><updated>2013-11-27T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-27:/131127-yw-on-test-static-analysis.html</id><summary type="html">&lt;p&gt;via:&amp;nbsp;http://yinwang0.wordpress.com/2013/12/27/tests-and-static-anaysis/&lt;/p&gt;
&lt;p&gt;Ever since I made a static analysis tool for Python called PySonar, I have been asked about the question: &amp;#8220;What is the difference between testing and static analysis?&amp;#8221; I just replied to a comment asking a similar question, so I think …&lt;/p&gt;</summary><content type="html">&lt;p&gt;via:&amp;nbsp;http://yinwang0.wordpress.com/2013/12/27/tests-and-static-anaysis/&lt;/p&gt;
&lt;p&gt;Ever since I made a static analysis tool for Python called PySonar, I have been asked about the question: &amp;#8220;What is the difference between testing and static analysis?&amp;#8221; I just replied to a comment asking a similar question, so I think it&amp;#8217;s a good time to write down some systematic answer for this&amp;nbsp;question.&lt;/p&gt;
&lt;h2 id="static-analysis-is-static-tests-are-dynamic"&gt;Static analysis is static, tests are dynamic&lt;a class="headerlink" href="#static-analysis-is-static-tests-are-dynamic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Static analysis and tests are similar in their purposes. They are both tools for improving code quality. But they are very different in nature: static analysis is static, but tests are dynamic. &amp;#8220;Static&amp;#8221; basically means &amp;#8220;without running the&amp;nbsp;program&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Static analysis is similar to the compiler&amp;#8217;s type checker but usually a lot more powerful. It can find bugs that type checkers cannot find, such as resource leaks, array index out of bounds, security risks etc. Static analysis has the &amp;#8220;reasoning power&amp;#8221; that tests hasn&amp;#8217;t, so static analysis can find problems that testing may never detect. For example, a security static analysis may show you how your website can be hacked after a series of&amp;nbsp;events.&lt;/p&gt;
&lt;p&gt;Tests just run the programs with certain inputs. They are fully dynamic, so you can&amp;#8217;t test all cases but just some of them. But because tests run dynamically, they may detect bugs that static analysis can&amp;#8217;t find. For example, tests may find that your algorithm produces wrong results. Static analysis tools are not (yet) intelligent enough for checking this kind of high-level&amp;nbsp;properties.&lt;/p&gt;
&lt;p&gt;But notice that although tests can tell you that your algorithm is wrong, they can&amp;#8217;t tell you that it is correct. To guarantee the correctness of programs is terribly harder than tests or static analysis. You need a mechanical proof of the program&amp;#8217;s correctness, which means at the moment that you need a theorem prover such as Coq, Isabelle or &lt;span class="caps"&gt;ACL2&lt;/span&gt;, lots of math/logics knowledge, lots of time, and even with all those you may not be able to prove it, because your program may have encoded the Goldbach conjecture in it. So the program&amp;#8217;s passing the tests doesn&amp;#8217;t mean it is correct. It only means that you haven&amp;#8217;t done terribly stupid&amp;nbsp;things.&lt;/p&gt;
&lt;h2 id="huge-difference-in-manual-labor"&gt;Huge difference in manual labor&lt;a class="headerlink" href="#huge-difference-in-manual-labor" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Testing requires lots of manual work. Tests for &amp;#8220;silly bugs&amp;#8221; (such as null pointer dereference) are very boring and tedious to make. Because of thedesign flaws of lots of programming languages, those things can happen anywhere in the code, so you need a good coverage in order to prevent&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;You can&amp;#8217;t just make sure that every line of the code is covered by the tests, you need good path coverage. But in the worst case, the number of execution paths of the program is exponential to its size, so it is almost impossible to get good path coverage however careful you&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;On the other hand, static analysis is fully automatic. It explores all paths in the program systematically, so you get very high path coverage for free. Because of the exponential algorithm complexity exploring the paths, static analysis tools may use some heuristics to cut down running time, so the coverage may not be 100%, but it&amp;#8217;s still enormously higher than any human test writer can&amp;nbsp;get.&lt;/p&gt;
&lt;h2 id="static-analysis-is-symbolic"&gt;Static analysis is symbolic&lt;a class="headerlink" href="#static-analysis-is-symbolic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even when you get good path coverage in tests, you may still miss lots of bugs. Because you can only pass specific values into the tests, the code can still crash at the values that you haven&amp;#8217;t tested. In comparison, static analysis processes the code symbolically. It doesn&amp;#8217;t assume specific values for variables. It reasons about all possible values for every&amp;nbsp;variable.&lt;/p&gt;
&lt;p&gt;The most powerful static analysis tools can keep track of specific ranges of the numbers that the variables represent, so they may statically detect bugs such as &amp;#8220;array index out of bound&amp;#8221; etc. (PySonar hasn&amp;#8217;t that kind of power yet and I&amp;#8217;m working towards that.) Tests may detect those bugs too, but only if you pass them specific values that hits the boundary conditions. Those tests are painful to make, because the indexes may come after a series of arithmetic operations. You will have a hard time finding the cases where the final result can hit the&amp;nbsp;boundary.&lt;/p&gt;
&lt;h2 id="static-analysis-has-false-positives"&gt;Static analysis has false positives&lt;a class="headerlink" href="#static-analysis-has-false-positives" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some static analysis tools may be designed to be conservative. That is, whenever it is unsure, it can assume that the worst things can happen and issue a warning: &amp;#8220;You may have a problem here.&amp;#8221; Thus in principle it can tell you whenever some code may cause trouble. But a lot of times the bugs may never happen, this is called a false positive. This is like your doctor misdiagnosed you to have some disease which you don&amp;#8217;t have. Lots of the work in building static analysis tools is about how to reduce the false positive rate, so that the users don&amp;#8217;t lose faith in the diagnosis&amp;nbsp;reports.&lt;/p&gt;
&lt;p&gt;Tests don&amp;#8217;t have false positives, because when they fail your program will surely fail under those&amp;nbsp;conditions.&lt;/p&gt;
&lt;h2 id="the-value-of-static-analysis"&gt;The value of static analysis&lt;a class="headerlink" href="#the-value-of-static-analysis" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although static analysis tools don&amp;#8217;t have the power to guarantee the correctness of programs, they are the most powerful bug-finding tools that don&amp;#8217;t need lots of manual labor. They can prevent lots of the silly bugs that we spend a lot of time and energy writing tests for. Some of those bugs are so stupid but so easy to make. Once they happen they may crash an airplane or launch a missile. So static analysis is a very useful and valuable tool. It takes over the mindless and tedious jobs from human testers so that they can focus on more intellectual and interesting&amp;nbsp;tests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;试理解::&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id="_1"&gt;测试与静态分析&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;自从俺折腾了Python静态代码分析工具 PySonar, 俺就问过自个儿这个问题:&amp;#8221;究竟测试和静态分析的差异在哪儿?&amp;#8221;&amp;nbsp;这不是一个简单的评注就能回答的了的,现在俺想可以好好解释一下了.&lt;/p&gt;
&lt;h2 id="_2"&gt;静态分析是静态的,测试是动态的&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Static analysis is static, tests are dynamic Static analysis and tests are similar in their purposes. They are both tools for improving code quality. But they are very different in nature: static analysis is static, but tests are dynamic. &amp;#8220;Static&amp;#8221; basically means &amp;#8220;without running the&amp;nbsp;program&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Static analysis is similar to the compiler&amp;#8217;s type checker but usually a lot more powerful. It can find bugs that type checkers cannot find, such as resource leaks, array index out of bounds, security risks etc. Static analysis has the &amp;#8220;reasoning power&amp;#8221; that tests hasn&amp;#8217;t, so static analysis can find problems that testing may never detect. For example, a security static analysis may show you how your website can be hacked after a series of&amp;nbsp;events.&lt;/p&gt;
&lt;p&gt;Tests just run the programs with certain inputs. They are fully dynamic, so you can&amp;#8217;t test all cases but just some of them. But because tests run dynamically, they may detect bugs that static analysis can&amp;#8217;t find. For example, tests may find that your algorithm produces wrong results. Static analysis tools are not (yet) intelligent enough for checking this kind of high-level&amp;nbsp;properties.&lt;/p&gt;
&lt;p&gt;But notice that although tests can tell you that your algorithm is wrong, they can&amp;#8217;t tell you that it is correct. To guarantee the correctness of programs is terribly harder than tests or static analysis. You need a mechanical proof of the program&amp;#8217;s correctness, which means at the moment that you need a theorem prover such as Coq, Isabelle or &lt;span class="caps"&gt;ACL2&lt;/span&gt;, lots of math/logics knowledge, lots of time, and even with all those you may not be able to prove it, because your program may have encoded the Goldbach conjecture in it. So the program&amp;#8217;s passing the tests doesn&amp;#8217;t mean it is correct. It only means that you haven&amp;#8217;t done terribly stupid&amp;nbsp;things.&lt;/p&gt;
&lt;h2 id="_3"&gt;存在巨大的人肉工作量差异&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Huge difference in manual&amp;nbsp;labor &lt;/p&gt;
&lt;p&gt;Testing requires lots of manual work. Tests for &amp;#8220;silly bugs&amp;#8221; (such as null pointer dereference) are very boring and tedious to make. Because of thedesign flaws of lots of programming languages, those things can happen anywhere in the code, so you need a good coverage in order to prevent&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;You can&amp;#8217;t just make sure that every line of the code is covered by the tests, you need good path coverage. But in the worst case, the number of execution paths of the program is exponential to its size, so it is almost impossible to get good path coverage however careful you&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;On the other hand, static analysis is fully automatic. It explores all paths in the program systematically, so you get very high path coverage for free. Because of the exponential algorithm complexity exploring the paths, static analysis tools may use some heuristics to cut down running time, so the coverage may not be 100%, but it&amp;#8217;s still enormously higher than any human test writer can&amp;nbsp;get.&lt;/p&gt;
&lt;h2 id="_4"&gt;静态分析是符号化的&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Static analysis is&amp;nbsp;symbolic &lt;/p&gt;
&lt;p&gt;Even when you get good path coverage in tests, you may still miss lots of bugs. Because you can only pass specific values into the tests, the code can still crash at the values that you haven&amp;#8217;t tested. In comparison, static analysis processes the code symbolically. It doesn&amp;#8217;t assume specific values for variables. It reasons about all possible values for every&amp;nbsp;variable.&lt;/p&gt;
&lt;p&gt;The most powerful static analysis tools can keep track of specific ranges of the numbers that the variables represent, so they may statically detect bugs such as &amp;#8220;array index out of bound&amp;#8221; etc. (PySonar hasn&amp;#8217;t that kind of power yet and I&amp;#8217;m working towards that.) Tests may detect those bugs too, but only if you pass them specific values that hits the boundary conditions. Those tests are painful to make, because the indexes may come after a series of arithmetic operations. You will have a hard time finding the cases where the final result can hit the&amp;nbsp;boundary.&lt;/p&gt;
&lt;h2 id="_5"&gt;静态分析会误报&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ Static analysis has false&amp;nbsp;positives &lt;/p&gt;
&lt;p&gt;Some static analysis tools may be designed to be conservative. That is, whenever it is unsure, it can assume that the worst things can happen and issue a warning: &amp;#8220;You may have a problem here.&amp;#8221; Thus in principle it can tell you whenever some code may cause trouble. But a lot of times the bugs may never happen, this is called a false positive. This is like your doctor misdiagnosed you to have some disease which you don&amp;#8217;t have. Lots of the work in building static analysis tools is about how to reduce the false positive rate, so that the users don&amp;#8217;t lose faith in the diagnosis&amp;nbsp;reports.&lt;/p&gt;
&lt;p&gt;Tests don&amp;#8217;t have false positives, because when they fail your program will surely fail under those&amp;nbsp;conditions.&lt;/p&gt;
&lt;h2 id="_6"&gt;静态分析的价值&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~The value of static&amp;nbsp;analysis &lt;/p&gt;
&lt;p&gt;虽然静态分析工具并不能确保程序的正确性,但却是最强力的bug调查工具,而且不需要大量的手工劳动. 以往我们花费了巨大工作量编写的测试依然包含极其愚蠢的错误.有的蠢到你无法相信是自个儿写出来的.而这种低级问题一但出现,就可能令飞机坠毁导弹发射!&amp;nbsp;因此,静态分析是种非常有用以及有价值的工具.能接管测试人员盲目而乏味的工作,使人类测试工程师能专注更加智能/有趣的测试.&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;14010? &lt;/li&gt;
&lt;li&gt;131212 翻越抄录在 medium.com&amp;nbsp;开始翻译&lt;/li&gt;
&lt;/ul&gt;</content><category term="YinWang"></category><category term="Pythonner"></category><category term="Zh"></category></entry><entry><title>OSS good for enterprise</title><link href="https://blog.zoomquiet.io/oss-good-4-china-com.html" rel="alternate"></link><published>2013-11-11T00:00:00+08:00</published><updated>2013-11-11T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-11:/oss-good-4-china-com.html</id><summary type="html">&lt;h1 id="oss"&gt;企业进行&lt;span class="caps"&gt;OSS&lt;/span&gt;的好处&lt;a class="headerlink" href="#oss" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;~中国绝大多数IT企业&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="oss" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*2m0OBPBnBJu0WrobbfnBkg.png"&gt;&lt;/p&gt;
&lt;p&gt;其实也是欠稿一篇, 先是忽悠朋友完成了作文:
&lt;a href="http://zhuanlan.zhihu.com/zhuangbiaowei/19576637"&gt;企业开源杂谈 — 思考&lt;span class="caps"&gt;IT&lt;/span&gt; — 知乎专栏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后,又引发了系列讨论,结果变成了自个儿应该还的一篇文章,,,&amp;nbsp;同样的,由大脑自动后台组稿42天,快速输出一版本先:&lt;/p&gt;
&lt;h2 id="_1"&gt;背景:&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先, 俺自个儿, 社区称号:大妈, 入行以来加入N 多技术社区, 长年混杂在各种企业内外社区中,折腾,再折腾,从来没有什么成型的&lt;span class="caps"&gt;NB&lt;/span&gt;的流传于世或是企业生产系统中的项目&amp;#8230; 按照 Eric&amp;nbsp;Raymond的著名文章:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;如何成为一名黒客&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的定义,俺属于绝对意义上的大妈式 Hacker, 公布有效信息(文档/翻译)/维护维基/传播Hack&amp;nbsp;文化本身&amp;#8230; &lt;/p&gt;
&lt;p&gt;然后,从业14年,从前台作到后台,作不动现代的全端工程师,掺合过的公司从4人到4000人的级别都有;近年,基本作 开发者关系管理 …&lt;/p&gt;</summary><content type="html">&lt;h1 id="oss"&gt;企业进行&lt;span class="caps"&gt;OSS&lt;/span&gt;的好处&lt;a class="headerlink" href="#oss" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;~中国绝大多数IT企业&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="oss" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*2m0OBPBnBJu0WrobbfnBkg.png"&gt;&lt;/p&gt;
&lt;p&gt;其实也是欠稿一篇, 先是忽悠朋友完成了作文:
&lt;a href="http://zhuanlan.zhihu.com/zhuangbiaowei/19576637"&gt;企业开源杂谈 — 思考&lt;span class="caps"&gt;IT&lt;/span&gt; — 知乎专栏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后,又引发了系列讨论,结果变成了自个儿应该还的一篇文章,,,&amp;nbsp;同样的,由大脑自动后台组稿42天,快速输出一版本先:&lt;/p&gt;
&lt;h2 id="_1"&gt;背景:&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先, 俺自个儿, 社区称号:大妈, 入行以来加入N 多技术社区, 长年混杂在各种企业内外社区中,折腾,再折腾,从来没有什么成型的&lt;span class="caps"&gt;NB&lt;/span&gt;的流传于世或是企业生产系统中的项目&amp;#8230; 按照 Eric&amp;nbsp;Raymond的著名文章:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;如何成为一名黒客&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的定义,俺属于绝对意义上的大妈式 Hacker, 公布有效信息(文档/翻译)/维护维基/传播Hack&amp;nbsp;文化本身&amp;#8230; &lt;/p&gt;
&lt;p&gt;然后,从业14年,从前台作到后台,作不动现代的全端工程师,掺合过的公司从4人到4000人的级别都有;近年,基本作 开发者关系管理(&lt;span class="caps"&gt;DRM&lt;/span&gt;), &lt;span class="caps"&gt;KPI&lt;/span&gt; 计算&amp;nbsp;40%开发,其它是社区活动的组织/筹备/主持/演讲/宣传/推广&amp;#8230; &lt;/p&gt;
&lt;h2 id="_2"&gt;范畴&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一篇文章绝对不可能将一个领域的发展问题分析明白的,所以,为了表述的健康/合理,&amp;nbsp;先定一下讨论的范畴,以免各种扩大化式的乱入.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只说&lt;span class="caps"&gt;IT&lt;/span&gt;企业,即,主赢收业务是软件/互联网/移动/服务&amp;#8230;&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;中国企业,无论注册地/资本来由/管理层国藉,&amp;nbsp;只论主要业务在中国大陆,主要开发者是中国本土码农&amp;#8230; &lt;/li&gt;
&lt;li&gt;开源,就是标准的 &lt;span class="caps"&gt;FLOSS&lt;/span&gt; ~ 使用标准的许可证以及发布形式/维护过程 的 自由/开源软件, 因为开放源代码,对于&amp;nbsp;自由软件还是开源软件都是基本要求,只是后续发布的要求有差别,早已被中国媒体给搅合的说不清楚了,所以,一概论之了&amp;#8230; &lt;/li&gt;
&lt;li&gt;因为职业原因,不便对老雇主或是现雇主泄漏什么内部机密,所以,只讨论,如同化学实验,嗯嗯嗯,,,精确的说,就象写 SiFi 小说一样推演,企业推行 &lt;span class="caps"&gt;OSS&lt;/span&gt; 的好处; 试图达到度目标就是能向一般的&lt;span class="caps"&gt;BOSS&lt;/span&gt;/同事,以极其常识的叙述来说明白,为什么应该 &lt;span class="caps"&gt;OSS&lt;/span&gt;,&amp;nbsp;至于坏处,就当没有吧,反正在中国没有什么正当的追究过程&amp;#8230; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;故事&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;从前有个公司,使用了开源软件,后来,嗯嗯嗯,就没有后来了!&lt;/li&gt;
&lt;li&gt;从前又一公司,开源了内部系统,然后,嗯嗯嗯,就没有然后了!&lt;/li&gt;
&lt;li&gt;从前还是一公司,从一开始就用开源软件的形式来专发,嗯嗯嗯,然后也没有然后了&amp;#8230; &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_4"&gt;断语&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;嗯嗯嗯,共同之处就素:所有公司都玩一朝天子一朝臣,后人废掉前尘事儿! 大家都实在太习惯太顺畅太自说自话太自发自觉的作这类事儿了&amp;#8230; .其实,追点儿根儿,很简单,无论多重要,多&lt;span class="caps"&gt;NB&lt;/span&gt; 的代码,在公司中除了写那些代码的人,其余根本没有人能够/愿意/喜欢&amp;nbsp;真正理解这些要命的代码,而且最后竟然,就连代码原作者也都认同了这种&amp;#8221;文化&amp;#8221;随时抛弃无论当初花多少精力折腾出来的代码了&amp;#8230; &lt;/p&gt;
&lt;p&gt;所以,企业真正进行开源工程式的产品开发,目测至少有这么几个方面是立即可以获得好处的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;产品安全性立即获得极大的提高,因为所有人知道,代码都特么开源了,服务想安全,就得作到运行时,真正安全了!&lt;/li&gt;
&lt;li&gt;代码将真正为越来越多的人理解,从而所有工程师的工作将无法简单的通过行政命令抹杀,随着开源项目的不断扩散/衍生/复用,原作者的价值在不断增值!&lt;/li&gt;
&lt;li&gt;文档将被自主自发的不断完善,因为一个没有好文档的项目,本身再&lt;span class="caps"&gt;NB&lt;/span&gt; 也没人用!
测试将被自主自发的由开发者自个儿进行了,因为开源后,有太多自动化测试服务可以在外网自在的使用了,再也不用跟测试部的那帮&lt;span class="caps"&gt;XX&lt;/span&gt;叽歪了!&lt;/li&gt;
&lt;li&gt;开发人员的工作时间立即被自主自发的延长了! 因为开源工程受到关注后,全球用户可不管你们是否下班了,那 Issue&amp;nbsp;是随时捅过来的!&lt;/li&gt;
&lt;li&gt;项目维护人员免费增加了! 只要项目真正解决领域问题,那么公司自个儿都没有用到的场景也一定会有人用上,根据开源协议,人家也必须将修订提交回来&amp;#8230; 好了,免费的比自家公司还&lt;span class="caps"&gt;NB&lt;/span&gt;&amp;nbsp;的工程师为咱开始工作了!&lt;/li&gt;
&lt;li&gt;技术团队的业界形象立即加持圣光了! 以后招人,也就不用送&lt;span class="caps"&gt;MM&lt;/span&gt; 之类的下作手法了,只说来了能同 &lt;span class="caps"&gt;XX&lt;/span&gt;项目的原创程序员一起工作!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等等吧&amp;#8230;&amp;nbsp;就不逐一推导了&amp;#8230; &lt;/p&gt;
&lt;h1 id="_5"&gt;但是!&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;以上的一切好处获得的前题是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;进行真正的开源项目运行&lt;/span&gt;
&lt;span class="err"&gt;坚持以纯粹的开源社区形式运营&lt;/span&gt;
&lt;span class="err"&gt;公司的真实业务系统真正使用开源项目的代码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及,其实隐藏在这三项基本坚持之下引发的各种
&lt;code&gt;管理/组织/绩效/人力&lt;/code&gt; 等等的配套支撑.&lt;/p&gt;
&lt;p&gt;所以, 只能是SiFi 式的推导了&amp;#8230; 因为中国&lt;span class="caps"&gt;IT&lt;/span&gt; 企业天生的同开源社区式开发有内在的抵触&amp;#8230;&amp;nbsp;具体的,大家都懂的,不用俺费劲分析了卟?!&lt;/p&gt;
&lt;h2 id="_6"&gt;所以&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;友人收作业后反馈,肿么没有后续了?&amp;nbsp;比如遭遇各种反驳,如何进一步攻防之类&amp;#8230; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;图样儿图森破!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在公司里,不遭受质疑那是不可能的!&lt;/p&gt;
&lt;p&gt;但是,有质疑就进行反驳&amp;#8230;&amp;nbsp;你以为你是方舟子对韩寒哪!&lt;/p&gt;
&lt;p&gt;企业进行开源,无非两种推行模式: &lt;code&gt;嬴政式&lt;/code&gt;/&lt;code&gt;吴广式&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前者,&lt;span class="caps"&gt;BOSS&lt;/span&gt; 就是开源出身,先信了,强行推之,整个公司所有部门为之配合,反正败了&lt;span class="caps"&gt;BOSS&lt;/span&gt; 自个儿负责,然后,慢慢品出了好处,于是更加大力在实践中学习再学习,在学习中感动再感动&amp;#8230; 慢慢的,公司如果不死,那就真正形成文化传承下去了,否则就变成业界又一&lt;span class="caps"&gt;SB&lt;/span&gt;&amp;nbsp;传说&amp;#8230; &lt;/li&gt;
&lt;li&gt;后者,习惯了开源开发方式了,瞒着公司,将自个儿一亩三分田先折腾起来,慢慢的,慢慢的对比其它同类团队的同类系统,肿么这么出名呢? 靠! 原来这丫开源了!&amp;nbsp;然后,没有然后了,不是被掐掉,就是这团队解散了&amp;#8230; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以? 这些好处,多数情况,要不根本无从质疑 (&lt;span class="caps"&gt;BOSS&lt;/span&gt;稀饭!-) ,&amp;nbsp;要不根本轮不到质疑,也就没有什么反击之说了&amp;#8230; &lt;/p&gt;
&lt;p&gt;其实!&amp;nbsp;公司里的质疑,根本没有质疑的任何意思在里面,无非是责任推卸:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s"&gt;&amp;quot;我早就质疑过的哟,只是这丫不听,所以,没俺一毛钱关系!&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;看吧! 要不是早先我质疑过,他们才改进,现在肿么可能成功?!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以?&amp;nbsp;有质疑时,只要你勇敢的担当下来,没人有空跟你分析什么协议的&amp;#8230; &lt;/p&gt;
&lt;p&gt;所以! 在企业里推进&lt;span class="caps"&gt;OSS&lt;/span&gt;,&amp;nbsp;最最最低程度,你得是个有足够话语权的强力团队头目,或领域技术带头人&amp;#8230; &lt;/p&gt;
&lt;p&gt;不过,一般在这种地位上,都要担营收的&lt;span class="caps"&gt;KPI&lt;/span&gt;, 需要接销售各种奇葩的单子,哪儿有空搞 &lt;span class="caps"&gt;OSS&lt;/span&gt;&amp;nbsp;运动哪&amp;#8230; &lt;/p&gt;
&lt;p&gt;所以,俺反复说了是 &lt;code&gt;SiFi&lt;/code&gt; 式的推理呢&amp;#8230; &lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131114&amp;nbsp;增补后续地图炮&lt;/li&gt;
&lt;li&gt;131112 初放 &lt;a href="https://medium.com/i-m-h-o/74caad149e7e"&gt;企业进行&lt;span class="caps"&gt;OSS&lt;/span&gt;的好处 — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="OSS"></category><category term="Think"></category><category term="China"></category></entry><entry><title>Collections and Embedded Documents in MongoDB</title><link href="https://blog.zoomquiet.io/mongo-collections-embdded-think.html" rel="alternate"></link><published>2013-10-27T00:00:00+08:00</published><updated>2013-10-27T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-10-27:/mongo-collections-embdded-think.html</id><summary type="html">&lt;h1 id="mongodb"&gt;MongoDB 中的集合或嵌入式文档&lt;a class="headerlink" href="#mongodb" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="mongo" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*cwCnTFQEbcUSy1KvoiIqXg.png"&gt;&lt;/p&gt;
&lt;p&gt;[via]&amp;nbsp;http://fosterelli.co/collections-and-embedded-documents-in-mongodb.html&lt;/p&gt;
&lt;p&gt;When someone is approaching MongoDB from the &lt;span class="caps"&gt;SQL&lt;/span&gt; world, a very common confusion regarding database structure is when to use embedded documents, and when to create an entirely new collection. This distinction is very important because, although MongoDB is schemaless in nature …&lt;/p&gt;</summary><content type="html">&lt;h1 id="mongodb"&gt;MongoDB 中的集合或嵌入式文档&lt;a class="headerlink" href="#mongodb" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="mongo" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*cwCnTFQEbcUSy1KvoiIqXg.png"&gt;&lt;/p&gt;
&lt;p&gt;[via]&amp;nbsp;http://fosterelli.co/collections-and-embedded-documents-in-mongodb.html&lt;/p&gt;
&lt;p&gt;When someone is approaching MongoDB from the &lt;span class="caps"&gt;SQL&lt;/span&gt; world, a very common confusion regarding database structure is when to use embedded documents, and when to create an entirely new collection. This distinction is very important because, although MongoDB is schemaless in nature, whether or not an element of your database is structured as embedded documents or a separate collection will change your code a fair amount. Making this change later on can represent a fair amount of work, so it helps to get this right the first&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;There is no &amp;#8220;right answer&amp;#8221; to this question, as it depends entirely on the situation at hand. The natural tendency of people coming from the &lt;span class="caps"&gt;SQL&lt;/span&gt; world is to stick everything in separate collections, but often this is very unnecessary and will cause serious performance impacts. However, mistakenly placing something within another document may lead to pain further down the&amp;nbsp;road.&lt;/p&gt;
&lt;p&gt;A set of rules I have found useful is to ask yourself the following&amp;nbsp;questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does the embedded document relate to one or more other&amp;nbsp;collections?&lt;/li&gt;
&lt;li&gt;Will you most often need the embedded document without the parent&amp;nbsp;document?&lt;/li&gt;
&lt;li&gt;Will you most often need the parent document without the embedded&amp;nbsp;document?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the answer to two or more of these is yes, you likely will want a separate collection. If the answer to only one of these is yes, a separate collection should still be considered, but likely not&amp;nbsp;needed.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;a class="headerlink" href="#examples" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="comments-on-a-blog"&gt;Comments on a blog&lt;a class="headerlink" href="#comments-on-a-blog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You would like to create a system where people may submit comments on blog posts. The problem is that you are unsure if you should store the comment on the post document, or create a separate collection named&amp;nbsp;comments.&lt;/p&gt;
&lt;h4 id="does-the-embedded-document-relate-to-one-or-more-other-collections"&gt;Does the embedded document relate to one or more other collections?&lt;a class="headerlink" href="#does-the-embedded-document-relate-to-one-or-more-other-collections" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;No. A comment is typically related to only the post that it is commented on. There may be some situations where this is not true, such as if you provided comment author accounts for editing. However, even this is not a very convincing reason by itself to separate the comment into a separate&amp;nbsp;collection.&lt;/p&gt;
&lt;h4 id="will-you-most-often-need-the-embedded-document-without-the-parent-document"&gt;Will you most often need the embedded document without the parent document?&lt;a class="headerlink" href="#will-you-most-often-need-the-embedded-document-without-the-parent-document" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Again, the answer is no. You likely will not often need to load a comment without also needing the context of the&amp;nbsp;post.&lt;/p&gt;
&lt;h4 id="will-you-most-often-need-the-parent-document-without-the-embedded-document"&gt;Will you most often need the parent document without the embedded document?&lt;a class="headerlink" href="#will-you-most-often-need-the-parent-document-without-the-embedded-document" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In the majority of cases, the answer here is no. Most of the time you use this object, someone will be viewing a blog entry. You will want to both display the post and the comments at once, so it makes sense to fetch those&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;Overall, comments for a blog is a very good candidate for embedded&amp;nbsp;documents.&lt;/p&gt;
&lt;h3 id="students-in-a-class"&gt;Students in a class&lt;a class="headerlink" href="#students-in-a-class" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You have a school management system, and you would like to enable students to enrol in a particular class. You are unsure if you should store the student objects on the class, or create a separate collection named&amp;nbsp;students.&lt;/p&gt;
&lt;h4 id="does-the-embedded-document-relate-to-one-or-more-other-collections_1"&gt;Does the embedded document relate to one or more other collections?&lt;a class="headerlink" href="#does-the-embedded-document-relate-to-one-or-more-other-collections_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Typically, we can assume yes. A student will likely relate to other things, such as an assignment or school object. Also, a very important note is that each embedded document will likely relate to multiple documents in the classes collection, which is a very strong hint you need a separate&amp;nbsp;collection.&lt;/p&gt;
&lt;h3 id="3-will-you-most-often-need-the-embedded-document-without-the-parent-document"&gt;3 Will you most often need the embedded document without the parent document?&lt;a class="headerlink" href="#3-will-you-most-often-need-the-embedded-document-without-the-parent-document" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The answer here will often be yes. If you want any sort of student information panel or want to have students enrolled in different classes, then you will often want the student document without needing the context of each&amp;nbsp;class.&lt;/p&gt;
&lt;h4 id="will-you-most-often-need-the-parent-document-without-the-embedded-document_1"&gt;Will you most often need the parent document without the embedded document?&lt;a class="headerlink" href="#will-you-most-often-need-the-parent-document-without-the-embedded-document_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Probably no for this one. It depends on what operation we are doing most often with the class, but I imagine that when we fetch a class we would likely need at least one student as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Overall, students in a class are probably better suited for a separate collection. It&amp;#8217;s important to keep in mind the scope of the problem you are solving with the data, and the operations that will be done most commonly. That said, a student is a very relational piece of data and better fits a separate&amp;nbsp;collection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;尝试翻译为中文:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果刚刚从&lt;span class="caps"&gt;SQL&lt;/span&gt; 世界进入 MongoDB, 最常见的困惑就是 &amp;#8220;嵌入式文档&amp;#8221; 以及何时创建新的&amp;#8221;集合&amp;#8221;?
这类困惑的根源就是还没有建立起来 MongoDB 的自由结构世界观 ;-)
&lt;span class="caps"&gt;SQL&lt;/span&gt; 世界的来客,总是试图先建立起一个完美的关系体系可以兼容以后的所有业务变化, 而&amp;nbsp;Mongo们,则是更加愿意先将已知的数据舒服的收集起来,随着业务的理解,不断的调整结构,同时代码永远可用!&lt;/p&gt;
&lt;p&gt;那么,这里给出俺知道的判定问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嵌入的文档,同其它集合有一个或以上的关联嘛?&lt;/li&gt;
&lt;li&gt;你将总会请求嵌入的文档,而 不需要&amp;nbsp;父文档嘛?&lt;/li&gt;
&lt;li&gt;你将总会请求父文档,而 不需要&amp;nbsp;嵌入的文档嘛?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果以上问题,有两个或以上回答为 yes, 那么最好使用独立的集合.
如果回答只有一个为 yes,&amp;nbsp;那么独立集合也应该考虑,但一般不必要了.&lt;/p&gt;
&lt;h2 id="_1"&gt;示例&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="blog"&gt;blog 的评注&lt;a class="headerlink" href="#blog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;你可能创建过类似blog 的系统,允许用户创建评注.问题在于你无法确定这堆评注,是存储在文章对象中呢,还是另外创建集合来保存?&amp;nbsp;动用以上问题来考查一下&amp;#8230; &lt;/p&gt;
&lt;h4 id="_2"&gt;嵌入的文档,同其它集合有一个或以上的关联嘛?&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;首先呢,评注肯定是先同当前文章有关联的. 同时也有很多其它方案, 比如想支持作者可以修订评注.&amp;nbsp;但是,这还不足以今评注分离成独立集合.&lt;/p&gt;
&lt;p&gt;你将总会请求嵌入的文档,而 不需要&amp;nbsp;父文档嘛?&lt;/p&gt;
&lt;p&gt;再来,如果这问题的回答是 否.&amp;nbsp;意味着你并不想加载文章时,一定就显示评注.&lt;/p&gt;
&lt;h4 id="_3"&gt;你将总会请求父文档,而 不需要 嵌入的文档嘛?&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;多数情况,这个问题的回答是 否. 一般只是想显示文章, 只是有时,期望同时显示,&amp;nbsp;那就必须让这一动作简单.&lt;/p&gt;
&lt;p&gt;综上, 评注作为 嵌入文档&amp;nbsp;是合理的.&lt;/p&gt;
&lt;h2 id="_4"&gt;班级中的学生&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;你有个学校管理系统, 想让学生作为特殊的一个类, 但是,不肯定是作为班级的嵌入文档呢,&amp;nbsp;还是独立集合.&lt;/p&gt;
&lt;h4 id="_5"&gt;嵌入的文档,同其它集合有一个或以上的关联嘛?&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;典型的,我们回答 是 . 每个学生总是会关联各种事物,&amp;nbsp;比如学校.同时,重要的每个嵌入文档同多个班级有关系时,这是分离为单独集合的重要暗示.&lt;/p&gt;
&lt;h4 id="_6"&gt;你将总会请求嵌入的文档,而 不需要 父文档嘛?&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这问题经常回答为 是. 如果你想对学生进行多种排序,或是不同班级有不同学生参加,所以你总是想使用&amp;nbsp;学生节点而不是班级的信息.&lt;/p&gt;
&lt;h4 id="_7"&gt;你将总会请求父文档,而 不需要 嵌入的文档嘛?&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这问题可能就是 否了. 这取决于我们经常怎么使用班级的数据,&amp;nbsp;目测其实我们最常查询班级的数据就是最后那名学生是谁.&lt;/p&gt;
&lt;p&gt;综上,班级学生最好分离为独立的集合. 重要的是问题域要关注你的数据,并且令数据分布吻合常见事务要求. 即,&amp;nbsp;学生关联那多数据,最好独立!&lt;/p&gt;
&lt;p&gt;that&amp;nbsp;all!&lt;/p&gt;
&lt;p&gt;其实, 使用文档型NoSQL, 特别是 MongoDB, 放弃&lt;span class="caps"&gt;RMDB&lt;/span&gt;&amp;nbsp;那堆范式的概念,使用我们的直觉,从当前已知的常见操作出现来设计文档结构就对了!&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131027 pub. &lt;a href="https://medium.com/i-m-h-o/c161d7036f89"&gt;Collections and Embedded Documents in MongoDB — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="NoSQL"></category><category term="Mongo"></category><category term="Zh"></category></entry><entry><title>reply On literate programming</title><link href="https://blog.zoomquiet.io/reply-yw-on-literate-programming.html" rel="alternate"></link><published>2012-09-18T00:00:00+08:00</published><updated>2012-09-18T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2012-09-18:/reply-yw-on-literate-programming.html</id><summary type="html">&lt;p&gt;&lt;a href="http://yinwang0.wordpress.com/2011/05/18/literate-programming/"&gt;On Literate Programming | Surely I Am&amp;nbsp;Joking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于文学化编程,俺使用的是 Leo :&amp;nbsp;http://wiki.woodpecker.org.cn/moin/LeoEnvironment&lt;/p&gt;
&lt;p&gt;你提及的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丢失了全景思考&lt;/li&gt;
&lt;li&gt;程序不仅仅是文本&lt;/li&gt;
&lt;li&gt;人的语言/认知&amp;nbsp;至上&lt;/li&gt;
&lt;li&gt;痛苦的导航&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个观点中,俺非常同意的是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前并没有一个,可以真正统一人的思想以及程序代码形式的编辑方式/环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是,目前为止,在代码的语法结构维度之上,可以给予我们一个可以自在记录原始思路的编辑方式,应该只有 &lt;span class="caps"&gt;LP&lt;/span&gt; 了;
从俺使用 Leo 进行各种编辑/编程&amp;nbsp;的体验而言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;LP&lt;/span&gt;&amp;nbsp;其实是关注包含时间维度的代码的变迁过程,而不是简单的精细化切分&lt;/li&gt;
&lt;li&gt;其实,到最后看起来是碎片的代码片段,以及关系,并不是从一开始就形成的&lt;/li&gt;
&lt;li&gt;而是在开发的过程中,逐步抽象 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://yinwang0.wordpress.com/2011/05/18/literate-programming/"&gt;On Literate Programming | Surely I Am&amp;nbsp;Joking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于文学化编程,俺使用的是 Leo :&amp;nbsp;http://wiki.woodpecker.org.cn/moin/LeoEnvironment&lt;/p&gt;
&lt;p&gt;你提及的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丢失了全景思考&lt;/li&gt;
&lt;li&gt;程序不仅仅是文本&lt;/li&gt;
&lt;li&gt;人的语言/认知&amp;nbsp;至上&lt;/li&gt;
&lt;li&gt;痛苦的导航&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个观点中,俺非常同意的是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前并没有一个,可以真正统一人的思想以及程序代码形式的编辑方式/环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是,目前为止,在代码的语法结构维度之上,可以给予我们一个可以自在记录原始思路的编辑方式,应该只有 &lt;span class="caps"&gt;LP&lt;/span&gt; 了;
从俺使用 Leo 进行各种编辑/编程&amp;nbsp;的体验而言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;LP&lt;/span&gt;&amp;nbsp;其实是关注包含时间维度的代码的变迁过程,而不是简单的精细化切分&lt;/li&gt;
&lt;li&gt;其实,到最后看起来是碎片的代码片段,以及关系,并不是从一开始就形成的&lt;/li&gt;
&lt;li&gt;而是在开发的过程中,逐步抽象/提取而成的&lt;/li&gt;
&lt;li&gt;也就是説,在 &lt;span class="caps"&gt;LP&lt;/span&gt;&amp;nbsp;的编辑思想中,人的整体思路是最重要的对象,是必须随时加以记录的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序当然不仅仅是文本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是,程序只能以文本形式来管理/编辑/传播吼,,,&lt;/li&gt;
&lt;li&gt;当然的,因为 &lt;span class="caps"&gt;LP&lt;/span&gt; 不关心&amp;nbsp;程序文本的运行时结构,所以,无法自动跳转到相关定义&amp;#8230;&lt;/li&gt;
&lt;li&gt;不过,俺感受到的是:&lt;/li&gt;
&lt;li&gt;记不住的就是不重要的&lt;/li&gt;
&lt;li&gt;不知道的就是不必要的&lt;/li&gt;
&lt;li&gt;如附件截屏:&lt;/li&gt;
&lt;li&gt;Leo&amp;nbsp;通过可视化的树形结点来记录了我对程序的整体思考&lt;/li&gt;
&lt;li&gt;而右方的编辑区,永远只是当前结点的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是説,通过 Leo&amp;nbsp;进行文学化编程的整体过程是一系列相同的重构过程串起来的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定个文件的框架&lt;/li&gt;
&lt;li&gt;定个大致的(子)功能流程,每个先以可运行的伪代码记录下来&lt;/li&gt;
&lt;li&gt;进入对应的结点完成功能&lt;/li&gt;
&lt;li&gt;每当超过一定的行数 hold 不住了,说明应该进行重构,将重复部分抽象出去了&amp;nbsp;回到第1或是第2步&amp;#8230;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以,如果是 Leo&amp;nbsp;这种的文学化编程环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并不太需要 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;类似的全程自动解析,追踪,导航,以帮助我们快速定位代码&lt;/li&gt;
&lt;li&gt;因为,每次进行修訂的代码片段都足够小,关注的因素也足够少&lt;/li&gt;
&lt;li&gt;而每个足够小的片段,都是从足够大的上层逻辑节点演化来的&lt;/li&gt;
&lt;li&gt;即,有关整体程序的概念,结构,思路,永远在 outline&amp;nbsp;的节点树中有体验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过,你点出的工程性问题的确存在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同 coffeescript , Leo&amp;nbsp;进行编程调试时,一样麻烦在&lt;/li&gt;
&lt;li&gt;如果调试运行时,引发错误的代码,超出当前编程的片段范围时&lt;/li&gt;
&lt;li&gt;错误信息反馈的行数,在 Leo&amp;nbsp;中找不到精确的对应&lt;/li&gt;
&lt;li&gt;所以,只能 到输出的正常文本程序中搜索,明确了代码所在代码段后,才能回到 Leo&amp;nbsp;人工定位到对应的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期待你的大一统式编程/测试/运行环境!&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140109 pub. as zoomquiet.io&amp;#8217;s&amp;nbsp;blog&lt;/li&gt;
&lt;li&gt;120918 邮件 as:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;发件人&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;Zoom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quiet&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quiet&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;发送至&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;shredderyin&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="err"&gt;日期&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="err"&gt;年&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="err"&gt;月&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="err"&gt;日&lt;/span&gt; &lt;span class="err"&gt;下午&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="err"&gt;主题&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="n"&gt;Literate&lt;/span&gt; &lt;span class="n"&gt;Programming&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;我的体验&lt;/span&gt;

&lt;span class="err"&gt;很有感觉&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;但是没有找到评注入口&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;只好直接邮件了&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</content><category term="LP"></category><category term="Think"></category><category term="Leo"></category></entry><entry><title>CI is hard!</title><link href="https://blog.zoomquiet.io/101028_jacob-ci-is-hard.html" rel="alternate"></link><published>2010-10-09T00:00:00+08:00</published><updated>2010-10-09T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2010-10-09:/101028_jacob-ci-is-hard.html</id><summary type="html">
&lt;p&gt;&lt;a href="http://buildbot.net/"&gt;Buildbot&lt;/a&gt;, 
the venerable Python 
&lt;a href="http://en.wikipedia.org/wiki/Continuous_integration"&gt;continuous integration&lt;/a&gt;
server, has the reputation of being complex and difficult to set up.&lt;/p&gt;
&lt;p&gt;After spending a couple of weeks deep in Buildbot land, I’ve come to the conclusion that this reputation, while true, is only partially deserved. That is, Buildbot is complex, but only …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;a href="http://buildbot.net/"&gt;Buildbot&lt;/a&gt;, 
the venerable Python 
&lt;a href="http://en.wikipedia.org/wiki/Continuous_integration"&gt;continuous integration&lt;/a&gt;
server, has the reputation of being complex and difficult to set up.&lt;/p&gt;
&lt;p&gt;After spending a couple of weeks deep in Buildbot land, I’ve come to the conclusion that this reputation, while true, is only partially deserved. That is, Buildbot is complex, but only if you’re trying to view it as an out-of-the-box &lt;span class="caps"&gt;CI&lt;/span&gt; solution. Buildbot suddenly starts to make much more sense if you view it as a framework for creating your own &lt;span class="caps"&gt;CI&lt;/span&gt; solution, not a &lt;span class="caps"&gt;CI&lt;/span&gt; server in its own right.&lt;/p&gt;
&lt;p&gt;You won’t find this revelation anywhere in the Buildbot docs, nor in any of the books or online material that cover the tool. There are some good tutorials out there showing how to set up a simple Buildbot instance – Jeff Younker’s 
&lt;a href="http://www.amazon.com/dp/1590599810/?tag=jacobian-20"&gt;Foundations of Agile Python Development&lt;/a&gt;
has the best one I’ve run across – but none of these examples make much sense when setting up a complex buildfarm with complicated requirements.&lt;/p&gt;
&lt;p&gt;So I’m here to fill that gap. In this series of posts – I think I’m looking at five parts – I’ll explain this “Buildbot is a &lt;span class="caps"&gt;CI&lt;/span&gt; framework” view, delve into Buildbot’s architecture, and then walk through the complicated-but-worth-the-effort &lt;span class="caps"&gt;CI&lt;/span&gt; sever I’ve built for Django.&lt;/p&gt;
&lt;p&gt;By way of disclaimer I should mention I’m anything but a Buildbot expert. I’m almost certainly Doing Things Entirely Wrong. I may or may not be using public APIs as I’ve simply trolled through Buildbot’s source until I found something that did what I wanted. However, what I’ve got here on the other side makes me pretty damn happy, and I want to show it off.&lt;/p&gt;
&lt;p&gt;Here, then, is&lt;/p&gt;
&lt;h2 id="part-1-background"&gt;Part 1: Background&lt;a class="headerlink" href="#part-1-background" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve been looking for a &lt;span class="caps"&gt;CI&lt;/span&gt; solution for Django for quite some time. Over the years we’ve tried a bunch of different tools: Buildbot, 
&lt;a href="http://cruisecontrol.sourceforge.net/"&gt;CruiseControl&lt;/a&gt;
, 
&lt;a href="http://hudson-ci.org/"&gt;Hudson&lt;/a&gt;, and even some home-grown solutions.&lt;/p&gt;
&lt;p&gt;Nothing’s worked out. That is, nothing’s been able to provide the “continuous” part: builds only continue working as long as there’s someone dedicated around to babysit the system. This sucks: it’s meant that at times Django’s been broken on supported platforms simply because nobody’s been bothering to run the tests.&lt;/p&gt;
&lt;p&gt;A few weeks ago a few of us started banging on this problem again, determined to get it right this time. Eric set up a new Hudson instance (modeled after the one he’d been using at work), and I dove headlong into Buildbot again. I’m not really going to talk much about Hudson here, but I’ll note that it’s actually been really instructive working on two different systems in parallel. It’s forced us to really think through and formalize our &lt;span class="caps"&gt;CI&lt;/span&gt; needs.&lt;/p&gt;
&lt;p&gt;This led me to my first big &lt;span class="caps"&gt;CI&lt;/span&gt; revelation: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;CI&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s any number of “simple” &lt;span class="caps"&gt;CI&lt;/span&gt; tools out there…  and they appear to work for exactly two projects (the project the tool was built to test, and the &lt;span class="caps"&gt;CI&lt;/span&gt; server itself, natch). The general purpose tools – Hudson, Buildbot, CruiseControl, etc. – are big, complicated, and heavily opinionated. This is a clear sign that we’re in a space where even the basic tenets of the problem can’t be agreed upon by all parties. &lt;span class="caps"&gt;CI&lt;/span&gt; is one of those problems that’s hard because there really isn’t a good core set of needs to be abstracted. Nearly every project has very different &lt;span class="caps"&gt;CI&lt;/span&gt; needs.&lt;/p&gt;
&lt;p&gt;[This is part of what makes Buildbot so complicated: I think it’s actually trying pretty hard to be completely agnostic and allow any kind of continuous integration system you could think up. If Buildbot was more opinionated it could drop some of the layers of abstraction, but because it’s trying so hard to be everything to everyone it ends up being crazy complex. I’ve not decided if this is admirable or crazy. Both, perhaps.]&lt;/p&gt;
&lt;p&gt;So what are Django’s needs? What make &lt;span class="caps"&gt;CI&lt;/span&gt; hard for us?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django’s big. The test suite is around 40,000 lines of code in something like 3,000 individual tests. We work constantly to speed up the test suite, but best case it still takes about 5 minutes to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that our &lt;span class="caps"&gt;CI&lt;/span&gt; absolutely needs to be distributed – a single test server won’t cut it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our test suite isn’t just unit tests; in fact, it’s mostly integration tests. We run most tests against real databases and attempt to simulate as much of the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request/response cycle as we can.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that our build system needs to be heterogeneous: since we test against real databases, we need to have lots of different ones to test against. We can’t just run a farm of Linux buildslaves running Python 2.6 and SQLite. Since slaves are heterogeneous, the build system needs to be highly targeted. We can’t treat each build slave identically, but we’ll need to target certain types of tests to the slaves that support ‘em.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We’re ambitious in what we support: Django supports four versions of Python (2.4, 2.5, 2.6, and 2.7), three Python implementations (CPython, Jython, and PyPy), four database engines (PostgreSQL, MySQL, SQLite, and Oracle), multiple versions of each database (for example, we support six versions of PostgreSQL: 8.0, 8.1, 8.2, 8.3, 8.4, and 9.0), and a bunch of OSes (Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X, Windows, and most Linux and &lt;span class="caps"&gt;BSD&lt;/span&gt; flavors).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need the capability to run all sorts of crazy combinations. In an ideal world, we’d actually be able to test against every single unique python/db/os combination.&lt;/p&gt;
&lt;p&gt;This means that our build system needs to be capable of getting really big, potentially spanning dozens or even hundreds of machines. We’re clearly talking cloud computing here: there’s no way a bunch of volunteers can afford the money and time to keep a rack of dozens of heterogeneous hardware all running smoothly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As I mentioned, we’re all volunteers. Nobody gets paid to babysit the &lt;span class="caps"&gt;CI&lt;/span&gt; server, which means it needs to be highly autonomous. Builds need to happen without any intervention. Most critically, build servers can’t disappear, go “stale” or break because /tmp gets full.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a bunch of playing with these requirements, I sketched out a dream system that looked something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We’ve got a bunch of (dormant) &lt;span class="caps"&gt;VM&lt;/span&gt; images for a cloud computing service or platform.&lt;/li&gt;
&lt;li&gt;Each image “knows” which kinds of configs it can build. For example, one image might have Python 2.4 and SQLite, while another might have Python 2.7 and PostgreSQL 9.0.&lt;/li&gt;
&lt;li&gt;When new requests are made the build master spins up some VMs, hands them build jobs (based on the types of builds the &lt;span class="caps"&gt;VM&lt;/span&gt; can support).&lt;/li&gt;
&lt;li&gt;When no more builds are in the queue for a particular &lt;span class="caps"&gt;VM&lt;/span&gt;, the build master shuts down the image and saves us money.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every out-of-the-box &lt;span class="caps"&gt;CI&lt;/span&gt; system I examined failed to give me that workflow. Most failed on the “heterogeneous” requirement. That includes Buildbot. I knew, however, that a few projects – PyPy, Chrome, and Python itself – were using Buildbot to some success against similar issues, and I knew that Buildbot had recently gained the ability to deal with cloud computing. Finally, since Buildbot’s written in Python I was fairly confidant in my own ability to hack it to pieces if necessary.&lt;/p&gt;
&lt;p&gt;Well, a couple of weeks later, I’m there: I have a Buildbot-based system that’s doing exactly what I described above. I’m still not 100% sure this is the solution, but it’s a solution, and it’s working.&lt;/p&gt;
&lt;p&gt;The rest of this series will dive into the code. Next time, we’ll look at an overview of Buildbot’s architecture and configuration, and I’ll explain my Buildbot-is-a-framework revelation in more detail.&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1406?? &lt;/li&gt;
&lt;li&gt;140618 偶遇抄转&lt;/li&gt;
&lt;/ul&gt;</content><category term="Jacob"></category><category term="Pythoneer"></category><category term="Zh"></category></entry><entry><title>What to write</title><link href="https://blog.zoomquiet.io/091110_jacob-what2write.html" rel="alternate"></link><published>2009-11-10T00:00:00+08:00</published><updated>2009-11-10T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2009-11-10:/091110_jacob-what2write.html</id><summary type="html">
&lt;p&gt;Tech docs can take a bunch of different forms ranging from high-level overviews, to step-by-step walkthroughs, to auto-generated &lt;span class="caps"&gt;API&lt;/span&gt; documentation. Unfortunately, no single format works for all users; there’s huge differences in the way that people learn, so a well-documented project needs to provide many different forms of documentation …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Tech docs can take a bunch of different forms ranging from high-level overviews, to step-by-step walkthroughs, to auto-generated &lt;span class="caps"&gt;API&lt;/span&gt; documentation. Unfortunately, no single format works for all users; there’s huge differences in the way that people learn, so a well-documented project needs to provide many different forms of documentation.&lt;/p&gt;
&lt;p&gt;At a high level, you can break down the different types of documentation you need to provide into three different formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step-by-step tutorials,&lt;/li&gt;
&lt;li&gt;overviews and topical guides to the various conceptual areas of your project, and
-low-level, deep-dive reference material.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s look at each in turn.&lt;/p&gt;
&lt;h2 id="tutorials"&gt;Tutorials&lt;a class="headerlink" href="#tutorials" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Good tutorials are a must as they’re usually the first thing someone sees when trying out a new piece of tech. First impressions are incredibly important: that rush of success as you work through a good tutorial will likely color your future opinions about the project.&lt;/p&gt;
&lt;p&gt;Django’s tutorial is frankly a bit musty at this point and is probably due for at least a light refresh, but it hits all the important points. A good tutorial should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Be quick.&lt;/code&gt; At some conference or another I heard someone – I think it was &lt;a href="http://headrush.typepad.com/"&gt;Kathy Sierra&lt;/a&gt; – say that, as a rule of thumb, a new user should be able to experience success within thirty minutes. That’s a great rule: thirty minutes is nothing – think “half a lunch hour.” If your project can give new users the warm fuzzies that quickly, they’ll come away wondering about all the awesome successes a deeper dive might give.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Be easy.&lt;/code&gt; Remember: you want success to be the outcome of the tutorial. This means you need to playtest the tutorial under all sorts of different circumstances, making sure that it always works (even on Windows).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;But not too easy.&lt;/code&gt; There’s always going to be a class of users who aren’t really qualified to use your project. Someone who’s never written any code before isn’t going to get very far with Django; those types of users should fail quickly. Don’t get them through the tutorial only to run into a wall later on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another similar anti-pattern is glossing over bad choices made in the interest of expediency. Django’s tutorial makes this mistake: we gloss over the project/app distinction in a way that bites users later on. (It’ll get fixed soon, I promise!)&lt;/p&gt;
&lt;p&gt;The best way of thinking about a tutorial’s ease is that it’s the on-ramp onto your project’s learning curve. This means the slope can be more gradual than later tasks, but no so much so that things suddenly get much much harder after the tutorial’s finished.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Demonstrate how your project "feels."&lt;/code&gt; More than anything, people are using your tutorial to get a sense of how your project is going to “feel” in the long term. This means you that it should be pretty cross-sectional; a good tutorial should show off most of the different areas of the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A couple of projects with really good tutorials to check out for inspiration are 
&lt;a href="http://love2d.org/documentation?page=documentation"&gt;&lt;span class="caps"&gt;LOVE&lt;/span&gt;&lt;/a&gt; and 
&lt;a href="http://lamsonproject.com/docs/getting_started.html"&gt;Lamson&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="topical-guides"&gt;Topical guides&lt;a class="headerlink" href="#topical-guides" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the meat of your documentation. Once somebody’s learned (from a tutorial) the high-level concepts, they’re going to need to dive into the details of some area or another. Any documentation worth its salt is going to have a whole bunch of these – Django’s got about 35 different topical guides, covering each conceptual area (e.g. models, sessions, testing, etc.)&lt;/p&gt;
&lt;p&gt;These don’t need to cover every single configuration option or function argument – that’s what reference material is for – but each guide (or section, or chapter, depending on how things are organized) needs to take a pretty deep dive into its respective area.&lt;/p&gt;
&lt;p&gt;The main goal for topical coverage should be &lt;code&gt;comprehensiveness&lt;/code&gt;. The reader ought to come away from a close read feeling very comfortable with the topic in question. They should feel that they know the vast majority of the possible options, and more importantly they should understand how all the concepts fit together.&lt;/p&gt;
&lt;p&gt;Unfortunately there aren’t a lot of projects that do these very well. Most have reasonable tutorials, many have okay-to-good reference material, but most seem to leave the topical guides to books.&lt;/p&gt;
&lt;p&gt;While it’s true that books shine in the “topical guide” area, they’re not really a great substitute for guides as part of the official documentation. Official docs, even when done poorly, are usually much more up-to-date; books, even when done well, are often out of date the day they hit the shelves.&lt;/p&gt;
&lt;p&gt;Books-as-guides can be done well – the 
&lt;a href="http://svnbook.red-bean.com/"&gt;Subversion Book&lt;/a&gt;
is a great example – but only when the book is continuously maintained available for free.&lt;/p&gt;
&lt;p&gt;There’s a particularly pernicious anti-pattern in documentation where tutorials are provided for free but the real documentation is only available for purchase. At best that’s lazy and sloppy; at worst it’s downright evil. Free software needs free documentation. If you’ve got otherwise you should be ashamed of yourself.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, you need complete reference for all the public APIs your project provides. These should be designed for those who already know how to use some &lt;span class="caps"&gt;API&lt;/span&gt;, but need to look up the exact arguments some function takes, or how a particular setting influences behavior, etc.&lt;/p&gt;
&lt;p&gt;It’s important to point out that reference material is not in any way a substitute for good tutorials and guides! Great reference material on the foo.baz package does readers no good whatsoever if they don’t know the name of the package they’re looking for.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/"&gt;Python’s documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;is a perfect case in point. The individual standard library modules tend to have incredibly good documentation, but there’s no high-level overviews to help you discover which module you might actually want! Take for example the 
&lt;a href="http://docs.python.org/library/collections.html"&gt;collections&lt;/a&gt;
module: it’s great reference material, explaining exactly what’s in the module, how to use it, and what all the options are. But if you don’t know that Python ships with a 
&lt;a href="http://en.wikipedia.org/wiki/Double-ended_queue"&gt;deque&lt;/a&gt;
implementation in collections.deque you’ll probably end up missing the library entirely.&lt;/p&gt;
&lt;p&gt;Think of guides and reference as partners: guides give you the “why,” and reference gives you the “how.” Following the deque example, some sort of “guide to data structures in Python” could give an overview of all the different types of data structures in Python (be they built-in or standard library), linking off to the documentation for each module and type for the complete details.&lt;/p&gt;
&lt;p&gt;It’s really tempting to use an auto-documentation tool like Javadoc or RDoc for reference material.&lt;/p&gt;
&lt;h2 id="dont"&gt;Don’t.&lt;a class="headerlink" href="#dont" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Auto-generated documentation is almost worthless. At best it’s a slightly improved version of simply browsing through the source, but most of the time it’s easier just to read the source than to navigate the bullshit that these autodoc tools produce. About the only thing auto-generated documentation is good for is filling printed pages when contracts dictate delivery of a certain number of pages of documentation. I feel a particularly deep form of rage every time I click on a “documentation” link and see auto-generated documentation.&lt;/p&gt;
&lt;p&gt;There’s no substitute for documentation written, organized, and edited by hand.&lt;/p&gt;
&lt;p&gt;I’ll even go further and say that auto-generated documentation is worse than useless: it lets maintainers fool themselves into thinking they have documentation, thus putting off actually writing good reference by hand. If you don’t have documentation just admit to it. Maybe a volunteer will offer to write some! But don’t lie and give me that auto-documentation crap.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What’s next&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that I’ve covered what to write, I’ll move into how to write. Tomorrow I’ll start going into the actual mechanics of writing good, readable technical prose.&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1406?? &lt;/li&gt;
&lt;li&gt;140618 偶遇抄转&lt;/li&gt;
&lt;/ul&gt;</content><category term="Jacob"></category><category term="Pythoneer"></category><category term="Zh"></category></entry><entry><title>探讨 信息化社会中 中国传统思想的作用</title><link href="https://blog.zoomquiet.io/issue-chinese-for-internet.html" rel="alternate"></link><published>1998-01-01T11:17:00+08:00</published><updated>1998-01-01T11:17:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,1998-01-01:/issue-chinese-for-internet.html</id><summary type="html">&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是大学选修课:&lt;code&gt;科学史&lt;/code&gt; 的论文,
算是自个儿思想的黑历史…总算能有足够的心力来直面互联网时代前的5毛思想了… )&lt;/p&gt;

&lt;p&gt;~ 不远的将来面对的是技术化,信息化的高科技社会,这种社会本身是反人文,反文化的,中国传统思想是救赎信息化人类社会的唯一凭借!&lt;/p&gt;
&lt;h1 id="_1"&gt;二十一世纪必然是信息化社会,面对的是计算机技术为主的数字化生存.&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;70年代中期以后,出现了以微电子技术为核心的新兴技术群,开始了继蒸汽机,电力之后的第三次技术革命. 主要包括信息技术,新能源技术,新材料技术,生物技术,空间技术和海洋技术六大领域的革命. 以微电子技术为基础的信息技术是新技术革命的主导技术和主要标志,其开辟了人类历史上的新时代棗信息时代. &lt;/p&gt;
&lt;p&gt;随着信息的采集,加工,利用的技术越来越成熟,对信息认识的深化;又随着信息高速公路的建设,信息的产业化,已使之越来越成为全社会影响力最大的因素. &lt;/p&gt;
&lt;p&gt;全人类也以达成共识:当信息高速公路将所有图书馆,学校,医院,实验室,电视,电话,公司等等全社会连接起来时,将产生不可估量的社会生产力!&lt;/p&gt;
&lt;p&gt;随着各种新技术的广泛应用,将使人类的生存条件和生活方式发生前所未有的改变:环境污染大大减少;资源能够合理开发利用;人口数量得到控制,素质会有较大提高”绿色食品”和新型医药,使人们更加长寿和健康……&lt;/p&gt;
&lt;p&gt;如此美好的前景 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是大学选修课:&lt;code&gt;科学史&lt;/code&gt; 的论文,
算是自个儿思想的黑历史…总算能有足够的心力来直面互联网时代前的5毛思想了… )&lt;/p&gt;

&lt;p&gt;~ 不远的将来面对的是技术化,信息化的高科技社会,这种社会本身是反人文,反文化的,中国传统思想是救赎信息化人类社会的唯一凭借!&lt;/p&gt;
&lt;h1 id="_1"&gt;二十一世纪必然是信息化社会,面对的是计算机技术为主的数字化生存.&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;70年代中期以后,出现了以微电子技术为核心的新兴技术群,开始了继蒸汽机,电力之后的第三次技术革命. 主要包括信息技术,新能源技术,新材料技术,生物技术,空间技术和海洋技术六大领域的革命. 以微电子技术为基础的信息技术是新技术革命的主导技术和主要标志,其开辟了人类历史上的新时代棗信息时代. &lt;/p&gt;
&lt;p&gt;随着信息的采集,加工,利用的技术越来越成熟,对信息认识的深化;又随着信息高速公路的建设,信息的产业化,已使之越来越成为全社会影响力最大的因素. &lt;/p&gt;
&lt;p&gt;全人类也以达成共识:当信息高速公路将所有图书馆,学校,医院,实验室,电视,电话,公司等等全社会连接起来时,将产生不可估量的社会生产力!&lt;/p&gt;
&lt;p&gt;随着各种新技术的广泛应用,将使人类的生存条件和生活方式发生前所未有的改变:环境污染大大减少;资源能够合理开发利用;人口数量得到控制,素质会有较大提高”绿色食品”和新型医药,使人们更加长寿和健康……&lt;/p&gt;
&lt;p&gt;如此美好的前景,使人类社会进入到”后工业社会”,即以信息产业为主的社会,成为不可扼止的趋势. &lt;/p&gt;
&lt;h2 id="_2"&gt;高技术化,信息化的社会与自然人文本质上背离&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ 现代技术的进步是以几何速度递增的. &lt;/p&gt;
&lt;p&gt;人类大约经过100万年才达到农业革命,再10,000年便达到第一次工业革命,仅仅又不到两个世纪就达到第二次工业革命,不足半个世纪便迎来了第三次技术革命!&lt;/p&gt;
&lt;p&gt;如此惊人的速度带来了一个不能回避的问题:人类作为一个物种,能否柔顺到足以适应一种他们正在如此迅速地改变,并在许多情况下予以污染的环境?&lt;/p&gt;
&lt;p&gt;发达工业社会中,人们社会心理的虚无,失衡,精神创伤和人际关系的淡漠不断加剧,社会”失范”……使人们越来越意识到高科技的消极影响,认识到科学既能成为潘多拉盒子,又能成为神灯. 同时,又自信地想象选择权在人类手中—-“因为科学是中立的”,认为所有新技术都是人类精神发展的无情的产物. 不管它是否会造福于人类,还是会给人类带来灾难,都应该被人们接受,因为它与科学一样是冷酷的,是不含有意识形态的价值判断的!&lt;/p&gt;
&lt;p&gt;但是,现在发觉,沉醉于现代生活中的人类所依赖的高技术,决不是中立的!&lt;/p&gt;
&lt;p&gt;科学是一种价值观. 当人们试图谅解和揭示宇宙运行所遵循的自然法则时,所面对的是一个需要静思冥想的严肃话题. 人们如果想揭示和认知这一法则取决于人们能否听命于善德的支配,在与自然对话和进行自我批评时,能否做到绝然的率真和谦逊. 就是一个道德上的问题. 技术同样也会涉及伦理学的范畴,但是其出发点与之孑然相反—-绝大多数技术是为了巩固和维系现时社会的统治与依附关系的. &lt;/p&gt;
&lt;p&gt;在对自然界进行观察以及在与自然界对话的过程中,科学总是表现得谦恭,深沉,同时又是令人满怀敬意的,而技术则总是高高在上,作出主宰一切的姿态. &lt;/p&gt;
&lt;p&gt;比如说:当抗议声浪迭起时,当人们反对在自己的住所附近兴建核电站时,那些对于不断拓展自己的财富和权力感兴趣的人,就会反驳:”这些人太感情用事了. 我们总不不能回到石器时期. “(他们最喜欢说石器时期)”他们知道核物理对于不断增长的人口的能源需要意味着什么?”以及”这一问题只能和受过良好教育的专家,那些头脑冷静客观的人们探讨,他们知道自己应该说些什么. “许多参加抗议的人就会因此信服技术官僚. &lt;/p&gt;
&lt;p&gt;事实上,在这里两方面都存在着很强烈的感情因素. 抗议一方,感到自己的生命受到了威胁,同时看到就种损害还将危及到自己的子孙后代;而可以从兴建核电站中受益的一方,则担心自己的利益受到伤害,害怕失去自己手中的权力. &lt;/p&gt;
&lt;p&gt;但是,情感出了什么问题?人类的各种行为无不是被不同的情感所左右的. 科学和技术同样都具有感情色彩,但是它们展现的是孑然相反的不同情感:科学是深沉的,它力求理解这个世界,这一态度充满了爱. 而技术则希望统治,最终走向野心勃勃!&lt;/p&gt;
&lt;p&gt;诚然技术的发展满足了人对物质欲望和现世幸福的需要,但人类也为此付出了巨大的代价. 在技术社会中,大规模生产产生的是标准化产品,大众媒介产生的是一种单一的文化. 个性失去了,甚至人与人之间的相互联系也被机械化与客观化了. 不仅如此,技术要求合理和有效的分层制组织,效率需要分工,专业化,速度和输出的最大化. 当它本身成为目的之时,其所产生的一切负作用棗人类的代价就被漠视了. 人文主义者所构想的理性王国在实践上表现为技术王国. 在这个王国里,技术以理性的名义支配着一切,所有的东西都是按照成本和利润原则,效率原则等运作的,自由,平等,博爱的理想在现实面前显得苍白无力;在技术的权威之下,人的自主性消失殆尽. 而这一切,有悖于当初人们热切地发展科技时所怀的崇高理想. &lt;/p&gt;
&lt;p&gt;这都是因为技术,在它帮助人类改造自然时,也对人类自身的生活方式,思维方式和处事方式等产生了不可逆转的巨大影响,从而体现了其伦理与政治的价值,而非是一种简单的为达到目的的中性手段或工具体系. &lt;/p&gt;
&lt;p&gt;需要注意的是,技术总是指下面几种东西的任何一种:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;技术知识,规则与概念;&lt;/li&gt;
&lt;li&gt;工程或其它的技术实践,甚至包括对应用技术知识的特定职业态度,规范与假定;&lt;/li&gt;
&lt;li&gt;由这种技术实践所生产或制造出来的物质工具,装置与人造物;&lt;/li&gt;
&lt;li&gt;将技术人员与工艺建构到技术系统与体制中的组织活动;&lt;/li&gt;
&lt;li&gt;由技术所带来的社会的技术状况或特点等等. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里所讨论的只是那种人类改变与控制自然环境的物质性技术或”自然技术”. &lt;/p&gt;
&lt;h3 id="_3"&gt;现代技术是价值负载的:&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这至少体现在如下几个方面:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;现代技术急剧改变了人类周围的空间,造成了生态环境的严重后果;&lt;/li&gt;
&lt;li&gt;随着现代技术与工业厂家和工业利用结合成一个整体,现代技术作为第一位的生产力已纳入到经济与政治系统之中,对技术活动的控制与导向已成为各国政府的重要责权;&lt;/li&gt;
&lt;li&gt;现代技术执行着意识形态的功能. 现代技术与科学已取代传统的神话和宗教而成为现代社会中一切现象赖以合法化的基础. 当代工业社会利用技术的进步而非传统的恐怖手段来征服对立的,离心的社会力量. (因而当代工业社会成为没有对立面和反对派的单向度的社会!)&lt;/li&gt;
&lt;li&gt;现代技术制成了知识与生活世界的分裂;&lt;/li&gt;
&lt;li&gt;现代技术造成了传统文化与价值观的崩溃与断裂.  现代技术是建立在传统形而上学(某种意义上即人类中心论)的基础上的,它趋向于捕获和控制每一个东西,使世界变得愈来愈依赖于人,而人愈来愈依赖于其虚无缥缈的意识. 因此,现时代是一个虚无主义的时代,上帝已死,人则无家可归. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;当代工业社会使人变成了单向度的人:&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;即丧失了对现存社会否定和批判的原则这一第二向度,而只剩下屈从于现存社会制度的向度的人. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当代工业社会通过愈来愈舒适的生活标准把人们束缚在现有的社会体制中,使人变成了只追求物质的人,丧失了追求精神自由和批判的思维能力. 现代社会大量的运输与通讯工具,住,吃,穿的各种商品,娱乐和新闻事业的产品,造成了一种人们愿意接受的很好的生活方式. 然而,这种为商品而生活的生活方式妨碍着质的变化,于是便出现了单向度的思想和行为,任何超越,否定现存制度的思想和行为会受到排斥;&lt;/li&gt;
&lt;li&gt;由于科技的高度发展,当代工业社会不仅能够利用先进的技术手段控制物质生产过程,而且也加强了对人的心理,意识的操纵与控制,使人们彻底屈从于整体社会需要,从而丧失了对现存制度的怀疑性;&lt;/li&gt;
&lt;li&gt;当代工业社会由于自动化的实现而变成了一架巨大的机器,人沦为一个功能性的部件,丧失了自由,成为被管制和操纵的对象. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_5"&gt;现代社会所依从的技术理性&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;至少包括如下基本文化旨趣的一整套观念:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;人类征服自然;&lt;/li&gt;
&lt;li&gt;自然的定量化;&lt;/li&gt;
&lt;li&gt;有效性思维;(指的是在行动中对各种行动方案的正确决择和对工具的效率的追求)&lt;/li&gt;
&lt;li&gt;社会组织生活的理性化,包括体力劳动与脑力劳动的分工,生产的科层控制等;&lt;/li&gt;
&lt;li&gt;人类物质需求的先决性—-这是最根本的一点. 只有在人类的物质需求获得了相对于其它需求的绝对优先后,人类的才华才有可能大规模地投入物质生产技术,而非诸如欧洲中世纪的那种拯救技艺. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;人类在技术理性的指导下,从自然界和宗教的蒙昧中解放出来,却又被理性的自身创造物—-机器,商品和技术官僚制所奴役. &lt;/p&gt;
&lt;p&gt;但是,人类已在这条依赖技术的社会发展之路上无法回头,解决问题还是要靠科学技术的正面价值,靠技术与科学的发展来解决. 若因噎废食,一味地排斥技术只有可能造成更大的灾难. &lt;/p&gt;
&lt;p&gt;所以,原子时代之父爱因斯坦留下了一句警世之语:”原子释放出的能量正改变我们的思想方式以外的一切,因此我们正走向空前的灾难”. &lt;/p&gt;
&lt;p&gt;果然,出现了新的希望—-以研究信息的获取,存贮,变换,传输,处理,利用和控制的规律为任务的当代新兴学科—-信息科学掘起!&lt;/p&gt;
&lt;h1 id="_6"&gt;网络时代·数字空间里,没有宗教,国家,政党·”原子”与”比特”&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;40年来,信息技术以极惊人的速度发展着. 自1945年第一台电子计算机&lt;span class="caps"&gt;ENIAC&lt;/span&gt;成功制造到今天,全球已充满了电子计算机,信息技术已渗透到社会生产和生活的一切领域,信息产业正逐步取代传统工业占据主导地位,人类社会已进入了信息时代. &lt;/p&gt;
&lt;p&gt;信息时代向我们所展开的图景,根本不同于工业时代的机械化大生产的观念,即在任何一个特定的时间和地点以统一的标准化方式重复生产的经济形态. 而是一种”数字化生存”,其能够显示甚至更大的经济规模,令时空与经济的相关性减弱了,无论何时何地人们都可以制造’比特’而实现价值… &lt;/p&gt;
&lt;p&gt;越来越多的信息提供者(同时又是消费者)连入信息高速公路,越来越多的信息资源在网上共享,增殖和利用… 整个世界正渐渐为信息更有效的管理和控制. &lt;/p&gt;
&lt;p&gt;人也已一代比一代”数字化”,越来越多的接受数字化的信息,发布数字化的指令,生产享用数字化的产品,进行数字化的交流… &lt;/p&gt;
&lt;h2 id="_7"&gt;因为数字技术的四个强力的特质,使信息时代的前进不可阻止:&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;分散权力: &lt;ul&gt;
&lt;li&gt;原先尊贵的大型机,已逐渐被低成本,大批量生产的&lt;span class="caps"&gt;PC&lt;/span&gt;的相互联结而取代;分布式系统已被证明具有无限升级的潜质,就是之前无论多么伟大的巨型机都不可想象的!&lt;/li&gt;
&lt;li&gt;电脑联结起来共同处理计算消耗大的问题,使它可以用一种全新的,可升级的方式满足自身的需求. &lt;/li&gt;
&lt;li&gt;这令电脑确实的既可以为个人服务,也可以为群体服务. 可以看到同样的分权心态正逐渐弥漫于整个社会中,这是由于数字化世界的年轻公民的影响所致. &lt;/li&gt;
&lt;li&gt;传统的中央集权的生活观念将成为明日黄花. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全球化: &lt;ul&gt;
&lt;li&gt;由于网络中,数字化空间是个没有距离的空间,在这里世界已缩小为一个’地球村’,且能在任何一台&lt;span class="caps"&gt;PC&lt;/span&gt;上被自由地互览. &lt;/li&gt;
&lt;li&gt;民族国家本身也就遭受到巨大的冲击,因为从前受民族主义力量的阻挠,而无法达成的方案等,在数字空间里都为轻而易举. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;追求合谐:&lt;ul&gt;
&lt;li&gt;当政治家们还在背负着历史的包袱沉重而行时,新的一代正在从数字化的环境中脱颖而出,完全摆脱了许多传统的偏见. &lt;/li&gt;
&lt;li&gt;过去,地理位置相近是友谊,合作,游戏和邻里关系等一切的基础,而现在的数字化一代则完全不受地理的束缚. &lt;/li&gt;
&lt;li&gt;数字科技可以变成一股把人们吸引到一个更和谐的世界之中的自然动力.  &lt;/li&gt;
&lt;li&gt;这一点已变得很明了了—-过去明争暗斗的学术界和尔虞我诈的企业都开始以合作取代竞争,因为一切的发明和进步都不须等候,它就在此时,此地!(数字化多媒体通信,可以让全球不同地方的科学家同时进行同一个实验;或是不同地点的学生同时学习一个最新技术概念… )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;赋予权力:&lt;ul&gt;
&lt;li&gt;这是数字化生存的本质,也是对数字化生存抱有乐观主义的人的主要依赖. &lt;/li&gt;
&lt;li&gt;数字化生存之所以能让我们的未来不同于现在,完全是因为它易进入,具备流动性及引发变迁的能力. 数字化的未来将超越人们最大胆的预测. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数字化生存以更惊人的速度,更彻底的深度,广泛地改变着我们的生活. 
信息时代中,大众传媒的受众往往只是单独一人. 所有的商品都可以订购,信息极端个人化,数字化生存中,我就是”我”,而非人口统计学中的一个”子集”. &lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Have It Your Way”,成为数字化生存的标准. 在熟知你的一切的&lt;span class="caps"&gt;PC&lt;/span&gt;的帮助下,你可以在你所喜欢的任何时候,任何地点,以任何你所喜欢的方式受教育,工作,消费… 进行一切社会活动!&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;没有空间的地方”, 数字化空间,即电脑空间中,每一个机器的距离都一样,除了地球本身的范畴
之外,电脑空间完全没有物理边界. 正如媒体一方面变得越来越大,另一方面又变得越来越小,就整个世界的管理而言,情况也如出一辙. 
… … &lt;/p&gt;
&lt;p&gt;当然可以看出,数字化生存,依然是一种高技术的反人文的非自然生存. 只不过技术所控制的对象由全社会变成了具体的个人. 每一个人被信息技术精心照料着,人对技术的依赖性更强了. 虽然这种数字化生存,表面上不再受8小时工作制,机关,教室等的时空限制,而实际上每个人还是技术化社会中精细分工的一个小小的单一功能单元,而非人本主义意义下的完整的人. &lt;/p&gt;
&lt;h2 id="_8"&gt;原子与比特…&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;更可虑的是,在由原子组成的现实的社会空间中,每个人被迫禁锢在一个功能角色上;而在由比特组成的数字空间里,却又绝对的平等,自由,被公平的赋予权力棗只要以适当的方式方法,不论你是想邮购书籍,还是想控制美国的核武器,都不会受到限制! &lt;/p&gt;
&lt;p&gt;如此剧烈的反差,当然的造成了一个不满社会现实的最佳宣泄口,致使数字化犯罪,Hacker盛行… 更可怕的是,现行的一切法律,法规都是针对”原子”的,在数字化空间中,它们就象离开了水的鱼拼命挣扎般难逃毁灭的命运. &lt;/p&gt;
&lt;p&gt;比如:你带了一些&lt;span class="caps"&gt;CD&lt;/span&gt;想通过海关,可能被视为走私,但是你从网上传送同样的&lt;span class="caps"&gt;CD&lt;/span&gt;的”比特”回家,则不会有任何人来找你的麻烦;你在一个国家的边境行走时,很可能因越界而被射杀,但是你在网上随意浏览他国的一切时却毫无危险… &lt;/p&gt;
&lt;p&gt;所以说数字空间是世界性的,无疆界的世界,国家的角色将越来越没有发展的空间. 可以料想如同樟脑丸会从固态直接挥发一样,国家根本不需要经过一场混乱,就已消逝无踪. &lt;/p&gt;
&lt;h2 id="_9"&gt;进而,人类文化的混乱是不可避免的!&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基于如此的前景和后果,人类现存社会及可预测的未来社会的社会弊端和问题可以归咎于技术,但是试图拒斥技术的作法是错误的. 我们需要反对的是科学技术的文化霸权,是技术理性的虚无主义扩张. 推进人文主义的人性化,论理化技术!&lt;/p&gt;
&lt;p&gt;然而,面对正急速到来的信息化社会,依据什么来推行人文视野中的技术?依据什么来重新构筑适应新社会的人类文化?依据什么来重新构筑数字化生存中的有效法规,社会规范?依据什么来协调与已被蹂躏得千创百孔的自然的关系?依据什么来… ?!&lt;/p&gt;
&lt;h1 id="_10"&gt;基于以上前景,中国传统思想的博大精深使之成为数字化生存中人类的救星:&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;面对战后世界的急剧变迁,当代世界哲学也适应地有了速度更快,传布更广的运动性特点. 并且具有了科学化,内在化,伦理化的共同特性. 任何哲学都不可能超越它所处的时代和社会,同样每一个时代和社会又需要适当的哲学的参与和干预. &lt;/p&gt;
&lt;p&gt;在我们现时代所盛行扩散的工业文化,更确切的说是一门狂热的宗教,是一门不幸的婚姻—-中世纪基督教徒的世界观和古希腊古典主义思想结合的产物. 这种宗教没有从佛教或是印度教中汲取任何营养,它从万物有灵论中吸取的精华也似是而非,同时也不是单纯发端于古希腊的思想. 格守人本主义思想的中世纪基督徒把世界视为”涕泣之谷”,就个充溢了罪恶的深渊同时也是难以持久的,它必须被人类征服,并臣服于人类的统治. 这种消极的目光一直保留到今天. 在我们眼里,科学不是人类认识和读解宇宙奇伟瑰丽的窗口,而是一个技术不断更新的源泉,用以征服,统治整个自然和人类自身!&lt;/p&gt;
&lt;p&gt;那末面对信息时代中,由于人的”原子”化孤立和”比特”化自由的社会属性之断裂而造成的文化,观念崩溃,要什么样的哲学思想才能匡护纠正?&lt;/p&gt;
&lt;p&gt;放眼世界哲学思想,可以说只有中国传统思想才能担当此重任! 这就是由中国传统思想的特性所决定的:&lt;/p&gt;
&lt;p&gt;中国传统哲学思想很独特,不论是儒之入世务实还是道之玄妙或是佛之浪漫圆融,其核心总是人生观而非宇宙观,侧重点是社会观而非自然观,重点研究对象,是”人”. &lt;/p&gt;
&lt;p&gt;与西方的人本主义不同,中国的人本主义是作为传统文化存在的,而非是作为反传统思潮出现的. 更重要的是,中国传统思想所研究的”人”,从来不是孤立的,个体的,孤独的”人”,而是群体的人或人的群体,是社会的人和人的社会. 总而言之,中国传统思想哲学是从相互联系中推论和规定人的本质的,中国传统思想所研究的是联系中的人或人的联系,其最高宗旨是寻求人际关系的稳定,有序,和谐,所以,中国传统思想哲学,堪称是辩证的人本主义,或有机和谐的人本主义. &lt;/p&gt;
&lt;h2 id="_11"&gt;可以看出,中国传统思想的很多本质特性是与数字化生存图景里的特性相契合的:&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;全球意识”与儒家的”天人合一”,老子之”人法自然”,佛之”诸法空相”… 思想相一致;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;追求和谐”与儒家的视人我和谐的人生理想为生活最高准则的观念,与老子之”自然无为”,佛之追求”常乐我净”的立地成佛等的观念相一致;&lt;/li&gt;
&lt;li&gt;… … &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并且中国传统思想一向不同于西方传统哲学那种封闭,一元绝对的体系的思维方式不同,是一种大自然眼光的追求大和谐的思维方式,可以说是一种”道德的宗教”. 在仪式上,它将一般宗教仪式转化为日常生活中的礼乐;在信仰上,它以天人一体取代一般宗教的人格神. 因此,儒教能够给人们现世的安慰,使人通过道德养成而达到”仁者与天地万物一体”的境界,从而满足人们突破个人有限生命取得无限圆满的愿望. 儒家这种将神性通过道德寓于人性的进路,完善地统一了现世伦理界与未来超越界,是其它宗教所做不到的. &lt;/p&gt;
&lt;p&gt;中国传统思想的这种圆通的,着眼于人性,不执着于现世社会的开放的思维方式,正是其历久常新的积极因质所在. 也非常与现代自然观相吻合. &lt;/p&gt;
&lt;p&gt;通过宇航技术使人类得以以新的视角来看待地球—-地球,并非如达尔文进化论所理解的先为生物提供了适于生存的条件而后才有生物的适者生存;相反,地球通过生命(光合作用)而捕获,转移,储存太阳能,通过生命活动(生物与地球的化学作用)而推动地球表层物质元素循环,并通过生命过程去调节,控制,维持自身的系统平衡. 正是生命的参与,才使地质历史构成生物圈,才使地球保持平衡态!地球本身也是一个生命体系,作为一个有生命的机体,它的要求本身也应得到应有的关注和尊重!—-生态学家将这种关系称作”该娅定则”(以古希腊中大地女神该娅的名字来称呼我们所世代居住的这个星球)&lt;/p&gt;
&lt;p&gt;另一方面,电脑虽然没有道德观念,但随着数字化生存的到来,电脑越来越以一种实在的生活参与者的姿态加入人类社会,人文主义的人性化,论理化技术的发展,也要求电脑具备一种全球性的全人类高度的道德!以便在数字化空间里建立秩序;并且也需要人性化,论理化的数字化管理者,在数字化空间中行使职权… 也只有一贯注意伦理道德的中国传统思想才有资格提出这样一种旨在全人类社会与地球,自然的大合谐的道德规范. &lt;/p&gt;
&lt;p&gt;还有,中国传统思想的”合知行”观念,即强调思想学说与生活实践相融合使道德准则融于日常生活中,令博大精深的哲学思想观念外表上平淡得不象思想,却又在日常工作中潜移默化入人的血脉之中再无法摆脱. 也只有这种形式才可能有效地约束住不断高速变迁的社会中的社会行为!
… … &lt;/p&gt;
&lt;h1 id="_12"&gt;总之,&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;中国传统思想的沉厚人文主义内容,决定了其指导信息社会数字化生存的主导地位. &lt;/p&gt;
&lt;p&gt;这是通过对信息的社会特点的分析,明确主要矛盾后反推出的唯一回答. &lt;/p&gt;
&lt;p&gt;并且东方哲学中,印度哲学和阿拉伯哲学与宗教意识密不可分,因而,不可能象中国传统思想哲学那样作为全人类的哲学来发展. &lt;/p&gt;
&lt;p&gt;中国传统思想的主要成分—-现世思想(儒学),只是因近代的外族入侵,而被迫中断了发展,并为更注重实效的适合于工业化商品社会的马列主义,毛泽东思想所替代. 但,其之固有的可贵特质,使我们不得不重新认识它,发展它,完成古代哲学思想向现代的转化,使中国传统思想的’无为而制’,’天人合一’等的积极因质发扬起来,拯救危机中的人类文化!&lt;/p&gt;
&lt;p&gt;我们再不能继续扮演地球致命寄生虫的角色了!&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;科幻是一种引导我们如何面对未来的伟大艺术”,所以,作为科幻迷亦或是科幻事业的从业者,都必须具有比常人更加敏锐的感知力,和历史责任感,将对宇宙,生命,未来… 的敬畏,对人类不同前景的合理推想,未来社会的生活态度等等作为人不能逃避的种种思考传播出去,让越来越多的人们特别是青少年,也加入到这种向上的健康活力的阵营之中,形成力量改变更多人的观念,让人类学会与创造合谐共处,否则我们终会走向灭亡!&lt;/p&gt;
&lt;h2 id="_13"&gt;希望在未来,向下一代讲述科技时会象这般自然朴素:&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一小群人聚集在山坡草地的篝火旁,坐在中间的最年长的妇女是在座某个孩子的祖母. &lt;/p&gt;
&lt;p&gt;老奶奶也许会拾起一大块花岗石说道:’从前,在地球刚刚形成的时候,整个星球到处是沸腾的溶岩,我们膜拜岩石,因为岩石给了我们一切—-不仅是大洲和高山,而且还有树木,海洋和你们的身体. 岩石就是你们的祖父祖母. 当你想知道是什么将你铸造成今天的这个生命时,你必须首先想到岩石,因为没有岩石,你也就不存在. ‘&lt;/p&gt;
&lt;p&gt;她在他们面前举着这块岩石,向他们一一展示. ‘你们 听见岩石在歌唱吗?&lt;/p&gt;
&lt;p&gt;在上个世纪元,人们认为岩石里没有音乐,但今天我们知道那是错的. 总之,一些岩石变成了莫扎特,并像莫扎特那样表现音乐. 你是不是认为人们必须到火星上去学习音乐?不必,莫扎特就岩石,他就是地球上岩石的音符. “现在她慢慢把手插入土地,掬起一捧沃土放在面前:”每一块岩石都是一首交响乐,但泥土所发出的音乐却不是人类的语言可以表述的,我们必须进入外层空间才能够理解泥土是多么的宝贵. 只有地球才产生泥土. 火星上没有泥土,金星上没有泥土,太阳,木星或亿万英里之内的空间都没有泥土. 即使在太阳系中最富有创造力的地球上,也要化上40亿年的时间才会产生泥土. 我们之所以崇拜,滋养和保护地球上的泥土,因为所有的音乐和生命以及所有的一切都来自于泥土. 泥土是人类的源泉. ‘&lt;/p&gt;
&lt;p&gt;现在她指着无边无际的夜空中低垂的一颗星星说:’你看,那颗星正在创造元素,这些元素有一天会成为生命的基本要素. 地球上的一切事物都产生于我们的元素,这些元素构成了地球上的一切,当她耗尽了自己无比强大的创造力时,她爆炸了,以此庆祝自己的成就,和宇宙共享她的财富并创造了人类. ‘&lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;她的命运就是你们的命运. 你们存在的目的,也就是要创造,要用你们自己的创造力作为回报. 你们的生命中充满磨难和欢乐,你们将不时面对死亡和困苦,但所有这一切都将由于你们置身于地球的伟大生命之中而变得有意义. 由于你们的创造力,宇宙的行程更加深刻. ‘&lt;/p&gt;
&lt;p&gt;她凝视着远方,此刻万籁俱寂,她听到惊涛拍岸,发出阵阵轰鸣,看见它在夜色中时隐时现. 海水悄无声息地卷起,又猛然拍打到海岸上. 他们就这样倾听着. &lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;想想看,当我们是多么的疲惫,而我们要做的一切就是拖着我们弱小的身躯爬上山顶. 现在,让我们冥想:世界上所有的海滩都卷起激浪拍击着海岸,生生不息地运动着;地球永不停息地围绕着太阳运行;银河系中1000多亿颗星球不停地围绕着银河系的中心运动. &lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;但是星辰有运动时并未意识到这些,海洋也未意识到它那永不停息地海浪,它们被一种无法抗拒的力量驱使着,不停地运动. 地球发现,它无可抗拒地被太阳吸引着,对其它的生命方式完全不能忍受. 星辰和行星所做的一切真是不可思议,我们从未听见它们抱怨过什么. ‘&lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;我们人类和动物也是如此. 我们发现,我们无法摆脱某种生活道路. 如若我们遵守这些道路,我们的生活,即使充满了苦难和艰辛,也会有丰硕的果实. 一旦我们屈从于宇宙中的深深的诱惑,我们就会被抛弃. 就会被置于150-200亿年前宇宙蒙昧时代的边缘.人类最大的快乐便是置身于这种无所不在的诱惑中,并给他物—-土地,草场和一切被遗忘了的东西—-以力量,以使它们自己深陷于它们的诱惑之中. ‘&lt;/p&gt;
&lt;p&gt;黄昏的最后一抹亮色已经消失了,她与他们在黑暗的寂寞中默坐着. 篝火渐渐熄灭,只有一些火星儿在闪烁,海洋反射出点点星光. &lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;你们会时时遇到困难使你们放弃你们的梦想,满足于玩世不恭和贪婪,你们会面对巨大的不安和恐惧. &lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;但无论发生了什么,请记住,我们的宇宙是一个充满惊奇的宇宙,我们的自信不是建立在自我身上而是建立在能够聚集起星辰和把生命细胞编织在一起的那就是说股力量之上. 请记住,你们在这个150-200亿年中编排的戏剧中已经觉醒. 启迪最初心智的智慧,分配着夜莺般音符的天赐,把1000亿颗星星抛洒向天际的力量,都像你一样觉醒了,并完全渗入了你的生命. &lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;我们并不知道,眼前等待着我们的是什么样的奥秘,但是它一定会使我们惊奇和着迷. 整个宇宙是从一个单一的超自然的微粒进化而来的,我们的起源是神秘的;我们的命运是紧密地连在一起的;我们全体物种的共同目标是颂扬那个塑造我们生命的伟大的欢愉. ‘&lt;/p&gt;
&lt;p&gt;岩石,泥土,海洋,星辰用宇宙间上万种的语言诉说着它们的故事,它们深深植根于我们的情感,精神,思想和肉体之中. 地球和宇宙是万物中至高无上的,宇宙创造故事不过是宇宙宣布开始其行程纪元的一种方式. &lt;/p&gt;
&lt;p&gt;”
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(引自—-新世纪学术译丛”后现代科学—-科学魅力的再现”大卫·雷·格里芬)&lt;/p&gt;
&lt;h1 id="_14"&gt;参考书目&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;&lt;span class="caps"&gt;BEING&lt;/span&gt; &lt;span class="caps"&gt;DIGITAL&lt;/span&gt;”  Negroponte&lt;ul&gt;
&lt;li&gt;海南出版社&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ISBN&lt;/span&gt; 7-80617-643-81N·3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;The World since 1500 A Globe histoty”  Englewood Cliffs,N.J              &lt;ul&gt;
&lt;li&gt;上海社会科学院出版社&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ISBN&lt;/span&gt; 7-80515-657-3/K·92&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;中国人的大思路—辩证的人本主义”  马中&lt;ul&gt;
&lt;li&gt;陕西人民出版社&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ISBN&lt;/span&gt; 7-224-02880-0/B·50&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;世界全史”&lt;ul&gt;
&lt;li&gt;第94卷:”世界当代哲学思想史”&lt;/li&gt;
&lt;li&gt;第97卷:”世界当代科学技术史”&lt;/li&gt;
&lt;li&gt;中国国际广播出版社&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;世纪之交—与高技术专家对话”&lt;ul&gt;
&lt;li&gt;辽宁教育出版社&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;科学观念丛书”:中国社会科学出版社&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;人文主义视野中的技术”  高亮华 &lt;span class="caps"&gt;ISBN&lt;/span&gt; 7-5004-2015-7&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;自然的沉沦与拯救”  李章印 &lt;span class="caps"&gt;ISBN&lt;/span&gt; 7-5004-2015-3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;自然不可改良”  何塞·卢岑贝格&lt;ul&gt;
&lt;li&gt;三联出版社&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ISBN&lt;/span&gt; 7-108-01300-2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;后现代科学—-科学魅力的再现”  大卫·雷·格里芬&lt;ul&gt;
&lt;li&gt;中央编译出版社&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_15"&gt;是也乎:&lt;a class="headerlink" href="#_15" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;多年后的再曰:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;科学是深沉的,它力求理解这个世界,这一态度充满了爱. 而技术则希望统治,最终走向野心勃勃!”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; 科学是放肆的,力求突破一切常识来理解世界,这一态度是孩童般的纯粹;&lt;ul&gt;
&lt;li&gt;技术是集约的,解决问题是一切目的而不论问题何来,最终总是被利益集团控制,毕竟技术需要经济的投入…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="thinked"></category><category term="Livin"></category><category term="Zoomq"></category></entry></feed>
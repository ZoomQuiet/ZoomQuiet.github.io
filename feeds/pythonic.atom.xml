<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>- Pythonic</title><link href="https://blog.zoomquiet.io/" rel="alternate"></link><link href="https://blog.zoomquiet.io/feeds/pythonic.atom.xml" rel="self"></link><id>https://blog.zoomquiet.io/</id><updated>2020-07-25T10:43:30+08:00</updated><entry><title>VNC回归轻松</title><link href="https://blog.zoomquiet.io/200704-easy-vnc.html" rel="alternate"></link><published>2020-07-04T19:42:00+08:00</published><updated>2020-07-25T10:43:30+08:00</updated><author><name>ZoomQuiet</name></author><id>tag:blog.zoomquiet.io,2020-07-04:/200704-easy-vnc.html</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;SCM&lt;/span&gt;/&amp;nbsp;跨平台桌面控制最纯粹和轻松的协议桟还是原生的好&amp;#8230;&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problems"&gt;problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asking"&gt;asking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixed"&gt;fixed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refer"&gt;refer.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;logging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;.&lt;a class="headerlink" href="#bg" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;很早就有这种需求:&lt;/p&gt;
&lt;p&gt;比如当年参与开发浏览器时,
对应工程是 windows only 的,
而俺的笔记本是 macOS,
所以, 必须有个方便的远程控制工具,将 &lt;span class="caps"&gt;PB&lt;/span&gt; 上的桌面变成本地一个窗口,&amp;nbsp;并能无缝进行切换控制.&lt;/p&gt;
&lt;p&gt;当年用 vnc server 的 windows&amp;nbsp;版本.&lt;/p&gt;
&lt;p&gt;后来创业时, 要确保客户端同时可以安定运行在 win7 以及 linux 上,&amp;nbsp;更加需要一个通用的全平台桌面控制工具.&lt;/p&gt;
&lt;p&gt;当时用的是 TeamViewer&amp;nbsp;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商业软件&lt;/li&gt;
&lt;li&gt;非常稳定&lt;/li&gt;
&lt;li&gt;功能良好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题是, 对于私人商用非常敏感,
用的时间长点儿,&amp;nbsp;就判定为非法商用直接断掉了.&lt;/p&gt;
&lt;h2 id="problems"&gt;problems&lt;a class="headerlink" href="#problems" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;然后, 也尝试过各种其它通用类 &lt;span class="caps"&gt;VNC&lt;/span&gt;&amp;nbsp;工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X2Go&amp;nbsp;安装失败&lt;/li&gt;
&lt;li&gt;TigerVNC/UltraVNC/&lt;span class="caps"&gt;RDP&lt;/span&gt;/&amp;#8230;&amp;nbsp;不兼容&lt;/li&gt;
&lt;li&gt;NoMachine &lt;span class="caps"&gt;NX&lt;/span&gt; ~ 唉嘛开始还好, 真正一用各种 diss,&amp;nbsp;而且无法删除&lt;/li&gt;
&lt;li&gt;还有国产的什么太阳花桌面 ~&amp;nbsp;根本无用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只能切换到 RealVNC, 也是商用, 但是,&amp;nbsp;印象不错;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好容易按照官方文档在 mac/ubuntu&amp;nbsp;间配置好&lt;/li&gt;
&lt;li&gt;也用了一段时间&lt;/li&gt;
&lt;li&gt;没想到, 一次系统升级后无论怎么折腾&lt;ul&gt;
&lt;li&gt;远程进入后都是黑屏&lt;/li&gt;
&lt;li&gt;无法进入 &lt;span class="caps"&gt;GNOME&lt;/span&gt;&amp;nbsp;桌面.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="asking"&gt;asking&lt;a class="headerlink" href="#asking" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;搜索才发现,&amp;nbsp;这是常见问题&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尝试了一堆方法都没办法解决,&amp;nbsp;那个糟心哪&amp;#8230;&lt;/p&gt;
&lt;p&gt;想想, 用 RealVNC 其实和 TeamViewer&amp;nbsp;没什么区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次连接主机,&amp;nbsp;都要先去人家官网绕一圈&lt;/li&gt;
&lt;li&gt;注册一台主机,&amp;nbsp;而且免费有限额,只能5台&lt;/li&gt;
&lt;li&gt;真正连接自己本地局域网旁边一台机器时&lt;/li&gt;
&lt;li&gt;其实, 无论客户端/服务端&amp;nbsp;都要连接官网检验是否合法&lt;/li&gt;
&lt;li&gt;而且, 在使用过程中,&amp;nbsp;俺的所有操作也一定有对应监察数据上报..&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说, 俺用俺自己的主机, 就得向厂商老实汇报思想,&amp;nbsp;否则断你没商量.&lt;/p&gt;
&lt;p&gt;俺为什么要这么贱?&lt;/p&gt;
&lt;h2 id="fixed"&gt;fixed&lt;a class="headerlink" href="#fixed" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;回归 &lt;span class="caps"&gt;FLOSS&lt;/span&gt;&amp;nbsp;社区内置方案吧&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装标准 vnc&amp;nbsp;服务:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo apt install vnc4server xfce4 xfce4-goodies
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置访问口令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ vncpasswd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;指定启动桌面 ~/.vnc/xstartup&amp;nbsp;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
startxfce4 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;并启用配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ chmod +x ~/.vnc/xstartup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动服务:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ vnc4server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;检验状态:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ss -ltn
...
LISTEN      &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;5&lt;/span&gt;            *:5901                     *:*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;注意: 如果有防火墙的话, 要打开 5901&amp;nbsp;的访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;macOS&amp;nbsp;本地代理端口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;༄  ssh -L 5901:127.0.0.1:5901 -C -N -l &amp;lt;主机用户&amp;gt; &amp;lt;主机IP&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(也就是将 Linux 主机上的 :5901 用 &lt;span class="caps"&gt;SSH&lt;/span&gt; 工具映射为本地&amp;nbsp;:5901)&lt;/p&gt;
&lt;p&gt;&lt;img alt="连接" src="http://ydlj.zoomquiet.top/ipic/2020-07-25-ScreenShot%202020-07-25%2010.37.01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;使用本地端口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;vnc://localhost:5901&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Bazinga&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="win7vbox" src="http://ydlj.zoomquiet.top/ipic/2020-07-25-ScreenShot%202020-07-25%2010.39.36.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 中安装 vncserver 以及 xfce4&amp;nbsp;桌面&lt;/li&gt;
&lt;li&gt;Ubuntu 中启动&amp;nbsp;vncserver&lt;/li&gt;
&lt;li&gt;macOS 中用 &lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;反向代理对应端口&lt;/li&gt;
&lt;li&gt;用 macOS 内置远程桌面工具直连进入 Ubuntu 桌面&lt;ul&gt;
&lt;li&gt;安装&amp;nbsp;VirtualBOX &lt;/li&gt;
&lt;li&gt;加载 win7&amp;nbsp;镜像&lt;/li&gt;
&lt;li&gt;同时自由使用 windiws 环境以及 linux&amp;nbsp;工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且速度比之前各种 &lt;span class="caps"&gt;VNC&lt;/span&gt; 工具要快,&amp;nbsp;充分发挥了本地网络能力.&lt;/p&gt;
&lt;h2 id="refer"&gt;refer.&lt;a class="headerlink" href="#refer" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linuxconfig.org/vnc-server-on-ubuntu-18-04-bionic-beaver-linux"&gt;&lt;span class="caps"&gt;VNC&lt;/span&gt; server on Ubuntu 18.04 Bionic Beaver Linux -&amp;nbsp;LinuxConfig.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cat.pdx.edu/platforms/mac/remote-access/vnc-to-linux/"&gt;&lt;span class="caps"&gt;VNC&lt;/span&gt; from Mac to Linux – Computer Action&amp;nbsp;Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/docs/applications/remote-desktop/install-vnc-on-ubuntu-18-04/"&gt;Install &lt;span class="caps"&gt;VNC&lt;/span&gt; on Ubuntu 18.04 |&amp;nbsp;Linode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/community/questions/18877/how-do-i-set-up-vnc-with-mac-osx"&gt;How do I set up &lt;span class="caps"&gt;VNC&lt;/span&gt; with Mac &lt;span class="caps"&gt;OSX&lt;/span&gt;? | Linode&amp;nbsp;Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-14-04"&gt;How to Install and Configure &lt;span class="caps"&gt;VNC&lt;/span&gt; on Ubuntu 14.04 |&amp;nbsp;DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="logging"&gt;logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;200725 zoomquiet&amp;nbsp;pub&lt;/li&gt;
&lt;li&gt;200704 zoomquiet&amp;nbsp;解决&lt;/li&gt;
&lt;li&gt;200626 zoomquiet&amp;nbsp;init.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="DAMA"></category><category term="SCM"></category><category term="VNC"></category><category term="Linux"></category><category term="macOS"></category></entry><entry><title>Elixir 中列出 Map 中值键对的折腾…</title><link href="https://blog.zoomquiet.io/200108-ex-map-enum.html" rel="alternate"></link><published>2020-01-08T00:00:00+08:00</published><updated>2020-01-09T12:37:57+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2020-01-08:/200108-ex-map-enum.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#env"&gt;env.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problem"&gt;problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#try"&gt;try&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hummm"&gt;Hummm?!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refer"&gt;refer.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;因为各种原因吧&amp;#8230;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很早在 &lt;span class="caps"&gt;ECUG&lt;/span&gt; 就接触了 Erlang&lt;ul&gt;
&lt;li&gt;但是,&amp;nbsp;怪异的语法,以及狭小的应用领域,一直没真正使用起来&lt;/li&gt;
&lt;li&gt;现在, 发现 Elixir 很好的解决了 &lt;span class="caps"&gt;OTP&lt;/span&gt;&amp;nbsp;生态的通用应用问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以,&amp;nbsp;开始折腾&amp;#8230;&lt;/li&gt;
&lt;li&gt;结果,&amp;nbsp;撞见各种值得嗯哼的事儿&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="env"&gt;env.&lt;a class="headerlink" href="#env" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;༄&amp;nbsp;screenfetch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                 &lt;span class="s s-Atom"&gt;-/+:.&lt;/span&gt;          &lt;span class="s s-Atom"&gt;zoomq@&lt;/span&gt;&lt;span class="nv"&gt;ZQ160626rMBP&lt;/span&gt;
                &lt;span class="s s-Atom"&gt;:++++.&lt;/span&gt;          &lt;span class="nv"&gt;OS&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="s s-Atom"&gt;bit&lt;/span&gt; &lt;span class="nv"&gt;Mac&lt;/span&gt; &lt;span class="nv"&gt;OS&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="mf"&gt;10.12.6&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="nv"&gt;G2136&lt;/span&gt;
               &lt;span class="s s-Atom"&gt;/+++/.&lt;/span&gt;           &lt;span class="nv"&gt;Kernel&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;x86_64&lt;/span&gt; &lt;span class="nv"&gt;Darwin&lt;/span&gt; &lt;span class="mf"&gt;16.7.0&lt;/span&gt;
       &lt;span class="p"&gt;.:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;+/:-&lt;/span&gt;&lt;span class="err"&gt;``&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt;       &lt;span class="nv"&gt;Uptime&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="s s-Atom"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;12 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#env"&gt;env.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problem"&gt;problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#try"&gt;try&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hummm"&gt;Hummm?!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refer"&gt;refer.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;因为各种原因吧&amp;#8230;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很早在 &lt;span class="caps"&gt;ECUG&lt;/span&gt; 就接触了 Erlang&lt;ul&gt;
&lt;li&gt;但是,&amp;nbsp;怪异的语法,以及狭小的应用领域,一直没真正使用起来&lt;/li&gt;
&lt;li&gt;现在, 发现 Elixir 很好的解决了 &lt;span class="caps"&gt;OTP&lt;/span&gt;&amp;nbsp;生态的通用应用问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以,&amp;nbsp;开始折腾&amp;#8230;&lt;/li&gt;
&lt;li&gt;结果,&amp;nbsp;撞见各种值得嗯哼的事儿&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="env"&gt;env.&lt;a class="headerlink" href="#env" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;༄&amp;nbsp;screenfetch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                 &lt;span class="s s-Atom"&gt;-/+:.&lt;/span&gt;          &lt;span class="s s-Atom"&gt;zoomq@&lt;/span&gt;&lt;span class="nv"&gt;ZQ160626rMBP&lt;/span&gt;
                &lt;span class="s s-Atom"&gt;:++++.&lt;/span&gt;          &lt;span class="nv"&gt;OS&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="s s-Atom"&gt;bit&lt;/span&gt; &lt;span class="nv"&gt;Mac&lt;/span&gt; &lt;span class="nv"&gt;OS&lt;/span&gt; &lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="mf"&gt;10.12.6&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="nv"&gt;G2136&lt;/span&gt;
               &lt;span class="s s-Atom"&gt;/+++/.&lt;/span&gt;           &lt;span class="nv"&gt;Kernel&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;x86_64&lt;/span&gt; &lt;span class="nv"&gt;Darwin&lt;/span&gt; &lt;span class="mf"&gt;16.7.0&lt;/span&gt;
       &lt;span class="p"&gt;.:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;+/:-&lt;/span&gt;&lt;span class="err"&gt;``&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;::-&lt;/span&gt;       &lt;span class="nv"&gt;Uptime&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="s s-Atom"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="s s-Atom"&gt;h&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="s s-Atom"&gt;m&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;:/++++++/::::/++++++/:&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;    &lt;span class="nv"&gt;Packages&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;241&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;:///////////////////////:&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;   &lt;span class="nv"&gt;Shell&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;bash&lt;/span&gt;
  &lt;span class="s s-Atom"&gt;////////////////////////&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;     &lt;span class="nv"&gt;Resolution&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2560&lt;/span&gt;&lt;span class="s s-Atom"&gt;x1440&lt;/span&gt;
 &lt;span class="s s-Atom"&gt;-+++++++++++++++++++++++&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;      &lt;span class="nv"&gt;DE&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Aqua&lt;/span&gt;
 &lt;span class="s s-Atom"&gt;/++++++++++++++++++++++/&lt;/span&gt;       &lt;span class="nv"&gt;WM&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Quartz&lt;/span&gt; &lt;span class="nv"&gt;Compositor&lt;/span&gt;
 &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;sssssssssssssssssssssss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;      &lt;span class="nv"&gt;WM&lt;/span&gt; &lt;span class="nv"&gt;Theme&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Blue&lt;/span&gt;
 &lt;span class="s s-Atom"&gt;:ssssssssssssssssssssssss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;     &lt;span class="nv"&gt;CPU&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Intel&lt;/span&gt; &lt;span class="nv"&gt;Core&lt;/span&gt; &lt;span class="s s-Atom"&gt;i7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5557&lt;/span&gt;&lt;span class="nv"&gt;U&lt;/span&gt; &lt;span class="s s-Atom"&gt;@&lt;/span&gt; &lt;span class="mf"&gt;3.10&lt;/span&gt;&lt;span class="nv"&gt;GHz&lt;/span&gt;
  &lt;span class="s s-Atom"&gt;osssssssssssssssssssssssso/&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;  &lt;span class="nv"&gt;GPU&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Intel&lt;/span&gt; &lt;span class="nv"&gt;Iris&lt;/span&gt; &lt;span class="nv"&gt;Graphics&lt;/span&gt; &lt;span class="mi"&gt;6100&lt;/span&gt;
  &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="s s-Atom"&gt;syyyyyyyyyyyyyyyyyyyyyyyy+&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;  &lt;span class="nv"&gt;RAM&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9318&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;16384&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;
   &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="s s-Atom"&gt;ossssssssssssssssssssss&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
     &lt;span class="s s-Atom"&gt;:ooooooooooooooooooo+.&lt;/span&gt;
      &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="s s-Atom"&gt;:+oo+/:-..-:/+o+/-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Erlang/&lt;span class="caps"&gt;OTP&lt;/span&gt; 21 [erts-10.2] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1]&amp;nbsp;[hipe]&lt;/li&gt;
&lt;li&gt;Elixir 1.9.1 (compiled with Erlang/&lt;span class="caps"&gt;OTP&lt;/span&gt;&amp;nbsp;20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="problem"&gt;problem&lt;a class="headerlink" href="#problem" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Plug 快速开发 Slack&amp;nbsp;插件&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先得完成基于 Plug 的 &lt;span class="caps"&gt;API&lt;/span&gt; 服务,
这其中最关键的是从 &lt;span class="caps"&gt;GET&lt;/span&gt;/&lt;span class="caps"&gt;POST&lt;/span&gt; 协议请求中获得 Slack&amp;nbsp;转发过来的用户指令;&lt;/p&gt;
&lt;p&gt;官方文档中 demo&amp;nbsp;形似:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;defmodule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Plug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyRequest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;defmodule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IncompleteRequestError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;@moduledoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="ss"&gt;    Error raised when a required field is missing.&lt;/span&gt;
&lt;span class="ss"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;defexception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Plug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;:paths&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;verify_request&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;:fields&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;defp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;verify_request&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;verified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contains_fields&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;unless&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;verified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IncompleteRequestError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;defp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;contains_fields&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="ow"&gt;all&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应检验请求可以是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;问题是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;|&amp;gt; contains_fields?(fields)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;提供的函式只是对所有 &lt;span class="caps"&gt;URI&lt;/span&gt; 参数键进行检验,&amp;nbsp;如果缺少了则报错,&lt;/li&gt;
&lt;li&gt;可是, 正确请求时,&amp;nbsp;如何获得所有参数值?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先使用输出语句来探查 params&amp;nbsp;是什么数据类型:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;IO.inspect(params)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;请求触发后终端输出:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;%{&amp;quot;cnt&amp;quot; =&amp;gt; &amp;quot;foo&amp;quot;, &amp;quot;mmt&amp;quot; =&amp;gt; &amp;quot;bar&amp;quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是标准 Map&amp;nbsp;对象.&lt;/p&gt;
&lt;h2 id="try"&gt;try&lt;a class="headerlink" href="#try" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Enum.all?()&amp;nbsp;是个重要的入口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;追查文档, 知道 Enum&amp;nbsp;有丰富的序列型数据处置支持:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enum.each&amp;nbsp;可以针对每个键进行附加处置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;echo_vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; 
    &lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chk. as #{keys} ;-)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是, 各种出错, 因为这时, 传入的 keys 是只有请求 Map&amp;nbsp;中的键;&lt;/p&gt;
&lt;p&gt;那么:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Enum.each(params,fn(k) -&amp;gt; IO.puts(Map.get(params,k)) end)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;跳出 verified = params &amp;#8230;&amp;nbsp;的处理流水线;&lt;/li&gt;
&lt;li&gt;直接追加列印处理?&lt;/li&gt;
&lt;li&gt;也不行&amp;#8230;&lt;ul&gt;
&lt;li&gt;光是看形式就有问题&lt;/li&gt;
&lt;li&gt;先对 Map 进行&amp;nbsp;Enum.each &lt;/li&gt;
&lt;li&gt;然后对每一个键, 再进行&amp;nbsp;Map.get&lt;/li&gt;
&lt;li&gt;这简直是对相同的数据进行反复操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="hummm"&gt;Hummm?!&lt;a class="headerlink" href="#hummm" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;万万没想到&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无意中在 &lt;a href="https://mlog.club/article/1923002"&gt;如何在Elixir中将映射键从字符串转换为原子 | 码农俱乐部 - Golang中国 -&amp;nbsp;Go语言中文社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看到:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;iex(1)&amp;gt; string_key_map = %{&amp;quot;foo&amp;quot; =&amp;gt; &amp;quot;bar&amp;quot;, &amp;quot;hello&amp;quot; =&amp;gt; &amp;quot;world&amp;quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;%{&amp;#8220;foo&amp;#8221; =&amp;gt; &amp;#8220;bar&amp;#8221;, &amp;#8220;hello&amp;#8221; =&amp;gt;&amp;nbsp;&amp;#8220;world&amp;#8221;}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;string_key_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;%{}, do: {String.to_atom(key), val}&lt;/span&gt;
&lt;span class="c"&gt;%{foo: &amp;quot;bar&amp;quot;, hello: &amp;quot;world&amp;quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽说这是 Comprehensions 概念的通常使用,
但是, 发现, for 这个操作, 和 Python 中的完全一致哪,&amp;nbsp;于是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="n"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;echo_vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;
      &lt;span class="c1"&gt;#IO.inspect(key)&lt;/span&gt;
      &lt;span class="c1"&gt;#IO.inspect(val)&lt;/span&gt;
      &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;each -&amp;gt; #{key}=&amp;gt;#{val} ;-)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;简直和 Python&amp;nbsp;中解包行为完全一致&amp;#8230;&lt;/p&gt;
&lt;p&gt;可是: &lt;a href="https://learnxinyminutes.com/docs/zh-cn/elixir-cn/"&gt;Learn elixir in Y Minutes&lt;/a&gt;
一句也没提及, for 这么 &lt;span class="caps"&gt;NB&lt;/span&gt;&amp;nbsp;的操作符哪&amp;#8230;&lt;/p&gt;
&lt;h2 id="refer"&gt;refer.&lt;a class="headerlink" href="#refer" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/plug/Plug.Router.html"&gt;Plug.Router — Plug v1.8.3&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://elixirschool.com/zh-hans/lessons/specifics/plug/"&gt;Plug · Elixir&amp;nbsp;School&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlog.club/article/1923002"&gt;如何在Elixir中将映射键从字符串转换为原子&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://szpzs.oschina.io/2017/02/11/elixir-getting-started-comprehensions/"&gt;Elixir入门教程－速构 | Time is&amp;nbsp;all&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;200109 .5h&amp;nbsp;配置模板,重新发布&lt;/li&gt;
&lt;li&gt;200108 .5h&amp;nbsp;输出&lt;/li&gt;
&lt;li&gt;200107 2.5h&amp;nbsp;折腾&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="Elixir"></category><category term="FAQ"></category><category term="sayeahooo"></category></entry><entry><title>Leo 第N次科普</title><link href="https://blog.zoomquiet.io/leo-101-againnn.html" rel="alternate"></link><published>2019-08-23T00:00:00+08:00</published><updated>2019-09-08T12:44:51+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2019-08-23:/leo-101-againnn.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;引子:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;断言:&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;文学化:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;回顾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refer"&gt;refer.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wewe.t9t.io/chat/%E3%80%90%E9%9B%86%E6%99%BA%E3%80%91%E6%B3%A8%E6%84%8F%E5%8A%9B%E4%B8%8E%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E7%BE%A4"&gt;[集智]注意力与知识管理群&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中大家经常就一些工具产生各种讨论,&amp;nbsp;俺一向的标签是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pythonic&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.leoeditor.com/"&gt;Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其它还好, 有广泛群众基础, 这个 Leo&amp;nbsp;就经常引发嗯哼&lt;/p&gt;
&lt;h2 id="_2"&gt;引子:&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;pimgeek-知识管理工具研究者:&amp;nbsp;插一个技术提问&amp;#8230;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@大妈🙊Zoom.Quiet LeoEditor 的节点支持类似 {{ var }} 这样的模板语法吗?&lt;ul&gt;
&lt;li&gt;我知道 &amp;lt;&amp;lt; section &amp;gt;&amp;gt; 这样的用法,还有 valuespace + jinja 的方式, 不知还有没有其它实现方式?[疑问]&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;lt; section &amp;gt;&amp;gt; 这种用法是 LeoEditor&amp;nbsp;内置的实现方式&lt;/li&gt;
&lt;li&gt;{{ var }} 这种用法是 LeoEditor&amp;nbsp;插件的实现方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我就是希望定义一些可填充的内容,把这些内容从代码主体中抽取出来,这样我编辑起来方便 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;引子:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;断言:&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;文学化:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;回顾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refer"&gt;refer.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wewe.t9t.io/chat/%E3%80%90%E9%9B%86%E6%99%BA%E3%80%91%E6%B3%A8%E6%84%8F%E5%8A%9B%E4%B8%8E%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E7%BE%A4"&gt;[集智]注意力与知识管理群&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中大家经常就一些工具产生各种讨论,&amp;nbsp;俺一向的标签是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pythonic&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.leoeditor.com/"&gt;Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其它还好, 有广泛群众基础, 这个 Leo&amp;nbsp;就经常引发嗯哼&lt;/p&gt;
&lt;h2 id="_2"&gt;引子:&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;pimgeek-知识管理工具研究者:&amp;nbsp;插一个技术提问&amp;#8230;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@大妈🙊Zoom.Quiet LeoEditor 的节点支持类似 {{ var }} 这样的模板语法吗?&lt;ul&gt;
&lt;li&gt;我知道 &amp;lt;&amp;lt; section &amp;gt;&amp;gt; 这样的用法,还有 valuespace + jinja 的方式, 不知还有没有其它实现方式?[疑问]&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;lt; section &amp;gt;&amp;gt; 这种用法是 LeoEditor&amp;nbsp;内置的实现方式&lt;/li&gt;
&lt;li&gt;{{ var }} 这种用法是 LeoEditor&amp;nbsp;插件的实现方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我就是希望定义一些可填充的内容,把这些内容从代码主体中抽取出来,这样我编辑起来方便.  &amp;#8216;&lt;ul&gt;
&lt;li&gt;有些内容,比如网页里的作者信息等,一次编辑后反复引用.&amp;nbsp;修改时也方便. &lt;/li&gt;
&lt;li&gt;专业的 Web 开发者应该是把这些代码拆成多个文件来管理. 我现在尝试用一个 LeoEditor 的大纲文件来管理.&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;lt; section &amp;gt;&amp;gt; 的用法也是类似的,只不过它必须是模板节点的子节点.  &amp;#8216;&lt;ul&gt;
&lt;li&gt;这样不必对每个节点都执行特殊操作,最省心.&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;li&gt;如果需要复用比如 html-header 中的信息,我可以利用 clone 节点的方式.&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;tomz-没有褒贬: 发现leo把tangle命令去掉了. 只能命令行输入tangle. 没有尝试成功怎么用尖括号引用父节点. 找不到文档了.  &amp;#8216;
noweb和org这种没有outline结构的软件就能任意引用任何节点.  &amp;#8216;
tomz-没有褒贬: 对啊 原来用tangle命令就能引用父节点 等于是全局变量 &amp;#8216;
tangle才是真正的noweb方式 现在只能子节点有了局限&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;pimgeek-知识管理工具研究者: @tomz-没有褒贬 我昨天已经实现自己的想法了,虽然没有 tangle&amp;nbsp;没有全局变量,可能会稍微麻烦一些. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我现在是这样,如果有需要被反复引用的代码段&amp;nbsp;S,我会先放在一个专门收集这类代码的大纲节点下. &lt;/li&gt;
&lt;li&gt;后面但凡有代码 X 需要用到时,我就在 X 下方创建一个 S 的 clone 子节点,然后在 X  中使用 &amp;lt;&amp;lt; S &amp;gt;&amp;gt; 引用之. 😄&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;li&gt;如果我发现 S 代码段,暂时对 X 没有帮助了, 我也不用把这个 clone 节点删除, 只要把那个 &amp;lt;&amp;lt; S &amp;gt;&amp;gt; 从代码 X 中移除掉就可以了 😎&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;li&gt;所以 Leo Editor 的 clone 节点是个好东西啊 [耶]&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;大妈🙊Zoom.Quiet: 才发现?
俺宣传了有14年了&amp;#8230;没人相信, 这是最好的重构姿势&amp;#8230;&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;pimgeek-知识管理工具研究者: 不是我不相信,而是以往的开发需求没被明晰化,更早以前则不知道 Leo Editor 😂 &amp;#8216;&lt;ul&gt;
&lt;li&gt;2016 年关于 Leo Editor 的讨论&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;li&gt;理论上可以把个人的所有开发代码都这样管理起来:&lt;ul&gt;
&lt;li&gt;网上发布用 Git, 本地管理用&amp;nbsp;Leo, &lt;/li&gt;
&lt;li&gt;互不干扰&lt;/li&gt;
&lt;li&gt;(Leo 大纲可以自动生成带有特殊注释的代码文件, 文件发生变化时也能同步回 Leo 里&amp;nbsp;)互不干扰.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;𝙰𝚣𝚎𝚛𝚒𝚕: 这是大妈的上古神器系列的&amp;#8230;&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;大妈🙊Zoom.Quiet: 是也乎&amp;nbsp;╮(╯▽╰)╭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@pimgeek-知识管理工具研究者  &amp;#8212;&amp;gt;&amp;nbsp;那都是老黄历了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;现在 Leo 有了更好的算子&lt;/span&gt;
&lt;span class="err"&gt;    ~可以不污染输入又确保双向感知了~ &amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;pimgeek-知识管理工具研究者:&amp;nbsp;我集中问一下: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;有什么比 @file 更好的方式,&amp;nbsp;可以双向感知?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;有什么比 &amp;lt;&amp;lt; section &amp;gt;&amp;gt; 更好的方式, 可以实现代码段引用?&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt; 大妈🙊Zoom.Quiet: 代码引用 &amp;#8212;&amp;gt; 这是高德纳原创发明~比宏直觉又简洁~含自注释~
多用~没毛病&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;pimgeek-知识管理工具研究者: @file 节点我去看文档, 但是问题 2 我真没找到, 可能我搜索方式不对, 昨天至少花了 3 个小时找替代, 就是没找到.&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大妈🙊Zoom.Quiet: &lt;a href="http://www.leoeditor.com/directives.html"&gt;Directives Reference — Leo 6.0 documentation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;之前是用 @nosent 替代 @file 的&lt;ul&gt;
&lt;li&gt;后来找到自动 diff&amp;nbsp;并双向合并技术后&lt;/li&gt;
&lt;li&gt;就有了 @auto&amp;nbsp;@clean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一次性将 混入/出 时依赖的标记文本从目标文本中清除了&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以, 作为 Leo 老用户, 从来不看官方文档,&lt;ul&gt;
&lt;li&gt;导致一直用老经验使用效率有问题的流程&amp;#8230;&lt;/li&gt;
&lt;li&gt;那么, 推而广之, 可能其它工具也都有类似问题存在////&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt; 大妈🙊Zoom.Quiet: &amp;#8216; pimgeek-知识管理工具研究者: 大多数文档中的例子和提问/设问相对较少,  如果能多一些例子和提问/设问就好多了.&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看 &lt;span class="caps"&gt;FAQ&lt;/span&gt;&amp;nbsp;&amp;#8230;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;官方文档很多都是从代码自动生成, &lt;/span&gt;
&lt;span class="err"&gt;难免呆板,&lt;/span&gt;
&lt;span class="err"&gt;所以, FAQ 中有灵活自然的问答...&lt;/span&gt;
&lt;span class="err"&gt;甚至于, 都是开源项目哪, &lt;/span&gt;
&lt;span class="err"&gt;你哪儿不舒服, 问哪.... &amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;pimgeek-知识管理工具研究者: LeoEditor 似乎没有规定源码的组织方式,如果要批量导入,可能还是先在自己头脑中预先想好一种结构,而不是依赖它的&amp;#8221;内置结构&amp;#8221; &amp;#8230;&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;@&lt;span class="caps"&gt;SML&lt;/span&gt; 似乎不行,他的大纲树 和 硬盘的路径树&amp;nbsp;是两个东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_3"&gt;断言:&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;SML&lt;/span&gt;: 嗯嗯 所以不太适合开发flask这种组织好的工程项目&amp;#8217;,更适合学习,归类,阅读代码,或者开发小型项目&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;额,大家可能误会我意思了 &amp;#8216;
我并不是批判leoeditor &amp;#8216;
他确实不适合,类似laravel,flask这种成熟的工程项目开发 &amp;#8216;
django项目的文件超过数百个了 &amp;#8216;
连批量导入都不支持&amp;#8230;&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;我明白你说的,就是用大纲的形式串起来,当做模板语言的使用 &amp;#8216;
这个我清楚,leo的思想是想以类,或者组件为单位 &amp;#8216;
这不就是 前端的经常用的组建化开发 或者模板语法么&amp;#8230;&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;@&lt;span class="caps"&gt;SML&lt;/span&gt; 这个&amp;#8230;.作为 ide 使用啊 &amp;#8216;
你可以尝试一下,用它来开发django,或flask 基本是不可能的&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大妈🙊Zoom.Quiet: 该批就批~俺又不是 Leo&amp;nbsp;厂商代理~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题是不说问题 &amp;#8212;&amp;gt; 只给大家你的方案&amp;#8230; 没法儿聊啊~ &amp;#8216;&lt;ul&gt;
&lt;li&gt;就算是ide 也和批量导入文件无关啊 &amp;#8212;&amp;gt; 你想干什么?真正的?&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;li&gt;关键为什么大家习惯性讨论问题的某个方案 &amp;#8212;&amp;gt;&amp;nbsp;而不讨论问题本身呢?&lt;/li&gt;
&lt;li&gt;批量导入工程是为什么啊?&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;俺用 Leo 14年了~&lt;ul&gt;
&lt;li&gt;从服务端 web server / DevOps 管理/数据分析~到 chrome 插件开发&amp;#8230; golang 单体服务 &amp;#8212;&amp;gt; Qt 桌面应用&amp;#8230; bottle dango flask&amp;nbsp;&amp;#8230;.&lt;/li&gt;
&lt;li&gt;基本上凡涉及文件越过三个的都用 leo&amp;nbsp;管理了&amp;#8230; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leo 没有自动重构&lt;ul&gt;
&lt;li&gt;没有自动跳类定义&amp;#8230; &lt;/li&gt;
&lt;li&gt;没有您依赖的一切 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;功能~&lt;/li&gt;
&lt;li&gt;但并不影响开发任何想开发的软件~&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因为&amp;#8230; &lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;IDE&lt;/span&gt; 从&amp;nbsp;TurboC之后俺再没用过任何一种&amp;#8230; &lt;/li&gt;
&lt;li&gt;VSCode 也关闭或不用任何 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;特有功能&amp;#8230;  &lt;/li&gt;
&lt;li&gt;所以&amp;#8230; 没理解你说的不合适在哪个功能上?&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;俺通过 Leo 管理的文件过千了&amp;#8230;&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;SML&lt;/span&gt;: 编辑哪个就导入哪个&amp;#8230;好吧 你解答了我的疑惑&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pimgeek-知识管理工具研究者: &amp;#8216;我:如果想把手头现有的,已经用传统项目结构组织好的代码,转换为 Leo Editor 的&amp;#8221;树状网结构&amp;#8221;,那可能是一项浩大的工程&amp;#8230; 
与放弃 pyCharm 转投 &lt;span class="caps"&gt;VS&lt;/span&gt;.Code 那种变化相比,肯定是不一样,要麻烦的多. &amp;#8216;
&amp;#8216; &lt;span class="caps"&gt;SML&lt;/span&gt;: 这个我清楚,leo的思想是想以类,或者组件为单位 &amp;#8216;
&amp;#8216; tomz-没有褒贬: 不是类和组件为单位 单位可以是一个函数其中的几行 &amp;#8216;
如果不是说代码内部的组织 那就是说对文件之上层次的组织了 &amp;#8216;
将几行作为单位 等于是为这几行做了一个注释 同时就将这几行折叠起来了&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;大妈🙊Zoom.Quiet:&amp;nbsp;也不是~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leo 可抽象管理的 note 从几行到几个文件夹&amp;#8230; 都可以~&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt; &lt;span class="caps"&gt;SML&lt;/span&gt;: 嗯嗯 就是想以 snippet 为单位吧&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大妈🙊Zoom.Quiet: 更加不是~~~~&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你写过小说就懂了&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;@tomz-没有褒贬: 文学编程就是让代码更整齐更帅 😂 &amp;#8216;
换个词 叫一目了然&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;是也乎,(￣▽￣)&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Yes and Not;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文学化编辑器,&amp;nbsp;正好不怎么关心最终输出的代码是否整齐/帅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是, 一目了然,&amp;nbsp;的确是真的&amp;#8230;&lt;/li&gt;
&lt;li&gt;只是,&amp;nbsp;只针对作者本人&amp;#8230;&lt;/li&gt;
&lt;li&gt;为什么这么说 &amp;#8216;&lt;ul&gt;
&lt;li&gt;@pimgeek-知识管理工具研究者&amp;nbsp;发现并研究以及尝试整合的,也从无一个主流工具/软件,&lt;/li&gt;
&lt;li&gt;为什么?原因相似&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可惜, 世人从来不关心自己被浪费掉的时间和精力&amp;#8230;&lt;ul&gt;
&lt;li&gt;一脑门子 &lt;span class="caps"&gt;WYSIWYG&lt;/span&gt;&amp;nbsp;要求,&lt;/li&gt;
&lt;li&gt;全然无视了在计算机发展过程中,&amp;nbsp;最宝贵的从来不是视觉要求,&lt;/li&gt;
&lt;li&gt;而是思想要求&amp;nbsp;&amp;#8216;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django 或是 Flask 工程, 之所以, 会有多个目录和很多文件;&lt;ul&gt;
&lt;li&gt;是框架本身引导和要求的?为什么?&lt;/li&gt;
&lt;li&gt;因为框架是领域工程经验集成,&amp;nbsp;要求我们必须按照人家的工程经验走&amp;#8230; &lt;/li&gt;
&lt;li&gt;凡是上点儿规模的工程, 一个共同经验就是:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目录即系统架构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目录结构以及命名以及文件分布约定本身,&lt;/li&gt;
&lt;li&gt;就决定了系统依赖/功能/数据/调运/&amp;#8230;&amp;nbsp;内部架构;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是, 正如小说撰写, 虽然最终是由/字/词/句/段落/章节构成了小说,&lt;ul&gt;
&lt;li&gt;可小说真正想传达的意象,&amp;nbsp;叙述结构, &lt;/li&gt;
&lt;li&gt;却正好超脱这些最终产物的, &lt;/li&gt;
&lt;li&gt;而是萦绕在作者头脑内心深处的另外结构;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当初为了和 C 初始人们提倡的结构化编辑叫劲儿,&lt;ul&gt;
&lt;li&gt;高老爷创造的文学化编程, &lt;/li&gt;
&lt;li&gt;就是抓住了这一更加 Bigger 的思想, &lt;ul&gt;
&lt;li&gt;完成了专用 &lt;span class="caps"&gt;DSL&lt;/span&gt; -&amp;gt; &lt;span class="caps"&gt;WEB&lt;/span&gt; 以及对应方言 &lt;span class="caps"&gt;CWEB&lt;/span&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以在 变量/语句/函式/类/文件/目录&amp;nbsp;之上,&lt;/li&gt;
&lt;li&gt;描述工程师对系统真正的理解和结构;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是, 为什么现在 &amp;#8220;所有人&amp;#8221; 用的各种 &lt;span class="caps"&gt;IDE&lt;/span&gt; 都没有这种支持?&lt;ul&gt;
&lt;li&gt;原因非常简单, 因为 &lt;span class="caps"&gt;IDE&lt;/span&gt; 所包含的工程思想,&amp;nbsp;是最平庸简单的,&lt;/li&gt;
&lt;li&gt;是能为最大多数快速理解并使用的,&lt;/li&gt;
&lt;li&gt;甚至于连商务人员都能理解和宣传的;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可惜, 编程是门手艺活,&lt;ul&gt;
&lt;li&gt;每个手艺人都有自己的个性和习惯,&lt;/li&gt;
&lt;li&gt;真正注意到自己习惯和个性的手艺人,&amp;nbsp;一定是从工具开始自行构造的;&lt;/li&gt;
&lt;li&gt;这也是为什么 Plan9 小组, 大家使用的 &lt;span class="caps"&gt;ACM&lt;/span&gt;&amp;nbsp;是针对三键鼠标优化的,&lt;/li&gt;
&lt;li&gt;所有功能集成在中键点击菜单中, &lt;/li&gt;
&lt;li&gt;根本不兼容任何 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;的主要功能;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;即, 编程, 这么私人的事儿,&lt;ul&gt;
&lt;li&gt;如果工具不能充分匹配或是定制匹配,&lt;/li&gt;
&lt;li&gt;那么,&amp;nbsp;就只能被迫将自己训化为现有流行工具包含的工程思想/编程习惯/思维&amp;#8230;&lt;/li&gt;
&lt;li&gt;当然, 多数人将之视为理所当然,&amp;nbsp;完全无视了这过程中,&lt;/li&gt;
&lt;li&gt;自己被主动无形中格式化掉的个性和思想;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简单说, 商业社会中, 主流产品一定不是最优的,&lt;ul&gt;
&lt;li&gt;毕竟主流产品一定得是利润最好的&amp;#8230;&lt;/li&gt;
&lt;li&gt;所以,&amp;nbsp;美军手中武器一定是最便宜的那种&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件行业更加是:&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;XP&lt;/span&gt; 统治PC 多年,&lt;ul&gt;
&lt;li&gt;为什么最后还是给放弃了?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;JAVA&lt;/span&gt; 这么多人吐糟, 连创始人都退出维护团队了,&lt;ul&gt;
&lt;li&gt;为什么,&amp;nbsp;照样是商用软件C位选择?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是, &lt;span class="caps"&gt;NASA&lt;/span&gt; 照样用古老的LISP&amp;nbsp;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt; tomz-没有褒贬: leo本身的代码就是例子 leo是吃自己的狗食的&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;文学化:&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt; 𝙰𝚣𝚎𝚛𝚒𝚕: 印象中 大妈貌似还认识 Leo 编辑器的开发者老爷子吧&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大妈🙊Zoom.Quiet: http://0.zoomquiet.top/pychina/PyCon2013China/PyConChina2013-&lt;span class="caps"&gt;EKR&lt;/span&gt;-final-v2.mp4&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;#8212; 是也乎&amp;nbsp;╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;作者本人介绍 Leo 
可参考理解&amp;#8230;&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@tomz-没有褒贬 leo所做的工作只是把一个文件的一些行折叠为一个代码块 所以我觉得可以用emacs的folding程序代替
先写文档后写代码我没有尝试过&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;是也乎 ╮(╯▽╰)╭&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;正好理解反了~&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;p&gt;俺也没尝试过&amp;#8230; 文学化编辑&amp;#8230; 洽洽和文档无关~ &amp;#8216;
也都关联不大
 &amp;#8212;&amp;gt; 文学化编辑和以往结构化编辑是根本性不同的思想 &amp;#8212;&amp;gt; 最大阻碍是思维惯性&amp;#8230;&amp;nbsp;&amp;#8216;&lt;/p&gt;
&lt;h2 id="_5"&gt;分析&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一定要找一个生活化的案例,&amp;nbsp;可能就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刚刚来到中国的西方探险家,&amp;nbsp;一定无法理解为如何用筷子叉起食物?&lt;/li&gt;
&lt;li&gt;被 &lt;span class="caps"&gt;IDE&lt;/span&gt; 训化的绝大多数程序猿, &lt;ul&gt;
&lt;li&gt;早已忘记了写代码时自己是怎么思考的&lt;/li&gt;
&lt;li&gt;而是替之以 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;要求我们如何去写的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这样其实, 并没什么不好&lt;ul&gt;
&lt;li&gt;毕竟, 公司不关心,&amp;nbsp;代码是怎么生产出来的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这就好比, 被卖猪仔到美国的华工&lt;ul&gt;
&lt;li&gt;如果想融入当地&lt;ul&gt;
&lt;li&gt;要作的事儿,&amp;nbsp;可能就是丢指筷子,剪指头发&lt;/li&gt;
&lt;li&gt;永远不再吃米饭/炒菜,&amp;nbsp;在一切细节上伪装成周围的人&lt;/li&gt;
&lt;li&gt;直到最后从思想上也同化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;才可能被美国人视作长的实在丑的人&lt;ul&gt;
&lt;li&gt;而不是吃死老鼠的黄种鸡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其实, 类似 Leo 这样设计思想和 &lt;span class="caps"&gt;IDE&lt;/span&gt; 完全不同的编辑环境非常多:&lt;ul&gt;
&lt;li&gt;神之编辑器 ~&amp;nbsp;Emacs&lt;/li&gt;
&lt;li&gt;编辑器之神 ~&amp;nbsp;Vim&lt;/li&gt;
&lt;li&gt;行编辑器 ~&amp;nbsp;le&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那么多尝试吧,&amp;nbsp;找到自己最喜欢的那种&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;回顾&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;其实, 俺当年也用了将近一年,&amp;nbsp;才慢慢明白过来的:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实,&amp;nbsp;和其它全新技能一样,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先熟悉工具内置功能&lt;/li&gt;
&lt;li&gt;然后,&amp;nbsp;结合具体任务&lt;/li&gt;
&lt;li&gt;完成基本行为的肌肉记忆后&lt;/li&gt;
&lt;li&gt;才可能进一步完成以往用 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;才能完成任务的文学化再流程&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多时候, 和 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;的感觉有点儿象:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手工绘画和打印槐打印一张图片的差别&lt;/li&gt;
&lt;li&gt;Leo 是响应自然的思考和尝试过程&lt;ul&gt;
&lt;li&gt;将最终代码/文档的形成从目标形式中抽离了&lt;/li&gt;
&lt;li&gt;以提纲为主要结构&lt;/li&gt;
&lt;li&gt;每次时应对 node&amp;nbsp;中非常小的几行内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不象 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;无时不刻在整体分析/提醒你应该作什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refer"&gt;refer.&lt;a class="headerlink" href="#refer" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以往也用自己的方式尝试解释过:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://s5.zoomquiet.top/060730-abtLeo/index.html"&gt;啄木鸟/&lt;span class="caps"&gt;CPUG&lt;/span&gt; 会课06年度第九次 (built by&amp;nbsp;S5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s5.zoomquiet.top/131101-leo-china/index.html"&gt;Leo ~&amp;nbsp;文学式编程体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://s5.zoomquiet.top/131113-MyTools/index.html"&gt;我的工具箱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关录音:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://org.up.zoomquiet.top/ztapes/wav4zoomq/060730-cpug_abt-leo.ogg"&gt;060730-cpug_abt-leo.ogg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://org.up.zoomquiet.top/ztapes/wav4zoomq/100716-Leo-LiterateProgramming/"&gt;100716-Leo-LiterateProgramming/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://org.up.zoomquiet.top/ztapes/wav4zoomq/100930-snda-mytools/"&gt;100930-snda-mytools/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="python"></category><category term="howto"></category><category term="leo"></category><category term="doc"></category></entry><entry><title>Python 列表为毛从0开始索引?</title><link href="https://blog.zoomquiet.io/131023-why0base-indexing-python.html" rel="alternate"></link><published>2019-03-23T00:00:00+08:00</published><updated>2020-05-31T16:48:03+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2019-03-23:/131023-why0base-indexing-python.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;发现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;是也乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://plus.google.com/115212051037621986145/posts/YTUxbXYZyfi"&gt;I was asked on Twitter why Python uses 0-based&amp;nbsp;indexing,&amp;#8230;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老爹当年也很是积累使用 G+ 的,
公开回答了很多价值问题&amp;#8230;&amp;nbsp;能看一眼少一眼了&amp;#8230;&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Google+ 帐号将于 2019 年 4 月 2 日关停. 下载 Google+ 内容可能需要一些时间,因此请在 2019 年 3 月 31&amp;nbsp;日之前开始下载. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;发现&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Guido van&amp;nbsp;Rossum&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公开&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2013年10月23日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was asked on Twitter why Python …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;发现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;是也乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://plus.google.com/115212051037621986145/posts/YTUxbXYZyfi"&gt;I was asked on Twitter why Python uses 0-based&amp;nbsp;indexing,&amp;#8230;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老爹当年也很是积累使用 G+ 的,
公开回答了很多价值问题&amp;#8230;&amp;nbsp;能看一眼少一眼了&amp;#8230;&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Google+ 帐号将于 2019 年 4 月 2 日关停. 下载 Google+ 内容可能需要一些时间,因此请在 2019 年 3 月 31&amp;nbsp;日之前开始下载. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;发现&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Guido van&amp;nbsp;Rossum&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公开&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2013年10月23日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was asked on Twitter why Python uses 0-based indexing, with a link to a new (fascinating) post on the subject (http://exple.tive.org/blarg/2013/10/22/citation-needed/). I recall thinking about it a lot; &lt;span class="caps"&gt;ABC&lt;/span&gt;, one of Python&amp;#8217;s predecessors, used 1-based indexing, while C, the other big influence, used 0-based. My first few programming languages (Algol, Fortran, Pascal) used 1-based or variable-based. I think that one of the issues that helped me decide was slice&amp;nbsp;notation.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s first look at use cases. Probably the most common use cases for slicing are &amp;#8220;get the first n items&amp;#8221; and &amp;#8220;get the next n items starting at i&amp;#8221; (the first is a special case of that for i == the first index). It would be nice if both of these could be expressed as without awkward +1 or -1&amp;nbsp;compensations.&lt;/p&gt;
&lt;p&gt;Using 0-based indexing, half-open intervals, and suitable defaults (as Python ended up having), they are beautiful: a[:n] and a[i:i+n]; the former is long for&amp;nbsp;a[0:n].&lt;/p&gt;
&lt;p&gt;Using 1-based indexing, if you want a[:n] to mean the first n elements, you either have to use closed intervals or you can use a slice notation that uses start and length as the slice parameters. Using half-open intervals just isn&amp;#8217;t very elegant when combined with 1-based indexing. Using closed intervals, you&amp;#8217;d have to write a[i:i+n-1] for the n items starting at i. So perhaps using the slice length would be more elegant with 1-based indexing? Then you could write a[i:n]. And this is in fact what &lt;span class="caps"&gt;ABC&lt;/span&gt; did &amp;#8212; it used a different notation so you could write a@i|n.(See http://homepages.cwi.nl/~steven/abc/qr.html#&lt;span class="caps"&gt;EXPRESSIONS&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;But how does the index:length convention work out for other use cases? &lt;span class="caps"&gt;TBH&lt;/span&gt; this is where my memory gets fuzzy, but I think I was swayed by the elegance of half-open intervals. Especially the invariant that when two slices are adjacent, the first slice&amp;#8217;s end index is the second slice&amp;#8217;s start index is just too beautiful to ignore. For example, suppose you split a string into three parts at indices i and j &amp;#8212; the parts would be a[:i], a[i:j], and&amp;nbsp;a[j:].&lt;/p&gt;
&lt;p&gt;So that&amp;#8217;s why Python uses 0-based&amp;nbsp;indexing.&lt;/p&gt;
&lt;h2 id="_3"&gt;是也乎&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;简单说,&amp;nbsp;就是为了切片时的语义合理性&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Pythonic"></category><category term="guido"></category><category term="python"></category><category term="gplus"></category></entry><entry><title>如何自在定义 macOS 截屏文件名?</title><link href="https://blog.zoomquiet.io/how2rename-mac-screen-shot.html" rel="alternate"></link><published>2019-02-13T22:42:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2019-02-13:/how2rename-mac-screen-shot.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#goal"&gt;goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;logging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#screencapturestrings"&gt;ScreenCapture.strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automator"&gt;Automator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bash"&gt;bash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#refer"&gt;refer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sayeahooo"&gt;Sayeahooo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;&lt;a class="headerlink" href="#bg" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认系统截屏工具输出图片是:&lt;ul&gt;
&lt;li&gt;到桌面&lt;/li&gt;
&lt;li&gt;文件名: &lt;code&gt;屏幕快照 2019-02-13 17.17.32.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="goal"&gt;goal&lt;a class="headerlink" href="#goal" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当年在 Linux 中,是可以自由定义输出的, 俺期望是:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;screenshot_190213-17.17.32.jpg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在怎么作到?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="logging"&gt;logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;记要尝试过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;格式&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ defaults write com.apple.screencapture &lt;span class="nb"&gt;type&lt;/span&gt; jpg
$ killall SystemUIServer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上即可&lt;/p&gt;
&lt;h3 id="_2"&gt;命名&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ defaults write com.apple …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#goal"&gt;goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;logging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#screencapturestrings"&gt;ScreenCapture.strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automator"&gt;Automator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bash"&gt;bash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#refer"&gt;refer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sayeahooo"&gt;Sayeahooo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="bg"&gt;&lt;span class="caps"&gt;BG&lt;/span&gt;&lt;a class="headerlink" href="#bg" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认系统截屏工具输出图片是:&lt;ul&gt;
&lt;li&gt;到桌面&lt;/li&gt;
&lt;li&gt;文件名: &lt;code&gt;屏幕快照 2019-02-13 17.17.32.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="goal"&gt;goal&lt;a class="headerlink" href="#goal" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当年在 Linux 中,是可以自由定义输出的, 俺期望是:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;screenshot_190213-17.17.32.jpg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在怎么作到?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="logging"&gt;logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;记要尝试过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;格式&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ defaults write com.apple.screencapture &lt;span class="nb"&gt;type&lt;/span&gt; jpg
$ killall SystemUIServer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上即可&lt;/p&gt;
&lt;h3 id="_2"&gt;命名&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ defaults write com.apple.screencapture name screenshot
$ killall SystemUIServer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上只能变成:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;screenshot 2019-02-13 17.17.32.jpg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="screencapturestrings"&gt;ScreenCapture.strings&lt;a class="headerlink" href="#screencapturestrings" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以往可以进行的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;sudo su&lt;/span&gt;
&lt;span class="err"&gt;cd /System/Library/CoreServices/SystemUIServer.app/Contents/Resources/Spanish.lpro &lt;/span&gt;
&lt;span class="err"&gt;plutil -convert xml1 ScreenCapture.strings&lt;/span&gt;
&lt;span class="err"&gt;vim ScreenCapture.strings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 macOS Sierra 10.12.6&amp;nbsp;中失败:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无论是否是 root&amp;nbsp;身份&lt;/li&gt;
&lt;li&gt;都说系统没有权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="automator"&gt;Automator&lt;a class="headerlink" href="#automator" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;另外一种思路是用内置自动脚本来刷指定目录中指定文件名的文件名:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是, 尝试后发现,&amp;nbsp;这种可视化编程限制太多&lt;/li&gt;
&lt;li&gt;而且调整困难,&amp;nbsp;根本无法有效完成设想&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bash"&gt;bash&lt;a class="headerlink" href="#bash" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;经检测:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;screencapture -io ~/Desktop/screenshot_`date &amp;#39;+%y%m%d-%H.%M.%S&amp;#39;`.jpg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以满足所有构想,可是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先要打开终端&lt;/li&gt;
&lt;li&gt;运行, 无论是配置为别名, 还是部署为指定 .sh&amp;nbsp;脚本&lt;/li&gt;
&lt;li&gt;然后才能进行截屏&lt;/li&gt;
&lt;li&gt;相比原先随时 &lt;code&gt;cmd+shift+4&lt;/code&gt; 进入截屏, 还是多了一层,&amp;nbsp;不方便&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题变成如何可以用原有快捷键调用 bash&amp;nbsp;指令?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alfred&amp;nbsp;复杂&lt;/li&gt;
&lt;li&gt;HotKey 只能绑定 .app 使用自定快捷键&lt;ul&gt;
&lt;li&gt;那么问题进一步变成: &lt;code&gt;如何快速将一个 shell 脚本变成标准 mac app?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;果然有很多方式,&amp;nbsp;脚本,编译,应用&amp;#8230;&lt;/li&gt;
&lt;li&gt;试用 Platypus 一下子就形成了无界面后台运行的&amp;nbsp;app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配合 HotKay 达成目标效果&amp;nbsp;;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="screenshot_190213" src="https://ipic.zoomquiet.top/2019-02-13-screenshot_190213-23.03.43.jpg"&gt;&lt;/p&gt;
&lt;h2 id="refer"&gt;refer&lt;a class="headerlink" href="#refer" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://snowleopardtips.net/tips/everything-you-need-to-know-about-screen-captures.html"&gt;&lt;span class="caps"&gt;TIP&lt;/span&gt;: Change default screen shot filenames, format and location | Snow Leopard Tips&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tekrevue.com/tip/how-to-customize-screenshot-options-in-mac-os-x/"&gt;The Complete Guide to Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X Screenshots -&amp;nbsp;TekRevue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.stackexchange.com/questions/27729/changing-the-default-screenshot-filename"&gt;uti - Changing the default screenshot filename - Ask&amp;nbsp;Different&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apple.stackexchange.com/questions/200125/how-to-create-an-osx-application-to-wrap-a-call-to-a-shell-script"&gt;macos - How to create an &lt;span class="caps"&gt;OSX&lt;/span&gt; Application to wrap a call to a shell script? - Ask Different&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apple.stackexchange.com/questions/103621/run-applescript-from-bash-script"&gt;macos - Run AppleScript from bash script - Ask&amp;nbsp;Different&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/30792569/converting-a-shell-script-into-a-app-file"&gt;macos - Converting a Shell Script Into a *.app File - Stack&amp;nbsp;Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://christopher.su/2012/creating-mac-applications-shell-scripts/"&gt;Creating Mac Applications from Shell Scripts - Christopher&amp;nbsp;Su&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sveinbjorn.org/platypus"&gt;Platypus - Create Mac apps from command line scripts&amp;nbsp;|&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sayeahooo"&gt;Sayeahooo&lt;a class="headerlink" href="#sayeahooo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.5h&amp;nbsp;资料搜索理解&lt;/li&gt;
&lt;li&gt;2h&amp;nbsp;嗯哼&lt;/li&gt;
&lt;li&gt;.5h&amp;nbsp;截屏,文档嗯哼&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="MAC"></category><category term="Livin"></category><category term="SCM"></category></entry><entry><title>用 DSL 们构筑商用系统</title><link href="https://blog.zoomquiet.io/dsl-atop-openresty.html" rel="alternate"></link><published>2017-08-27T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2017-08-27:/dsl-atop-openresty.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#building-business-systems-with-dsls-for-nginx-openresty"&gt;Building Business Systems with DSLs for &lt;span class="caps"&gt;NGINX&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; OpenResty&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tldr"&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#or"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&amp;nbsp;的世界观&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#or_1"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&amp;nbsp;的应用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sregex"&gt;大事儿:&amp;nbsp;sregex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dsl-lzsql"&gt;DSL实验: &lt;span class="caps"&gt;LZSQL&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dsl"&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;的爆发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#or_2"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&amp;nbsp;的目标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tlog"&gt;TLog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="building-business-systems-with-dsls-for-nginx-openresty"&gt;Building Business Systems with DSLs for &lt;span class="caps"&gt;NGINX&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; OpenResty&lt;a class="headerlink" href="#building-business-systems-with-dsls-for-nginx-openresty" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;~&amp;nbsp;来自春哥的分享&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5年前也听录了一次 春哥的分享:&lt;a href="http://blog-zq-org.qiniucdn.com/pyblosxom/oss/openresty-intro-2012-03-06-01-13.html"&gt;由Lua&amp;nbsp;粘合的Nginx生态环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,&amp;nbsp;神奇的引发了各种后来的然后&lt;/li&gt;
&lt;li&gt;去年, 在 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 大会上, 春哥才真正讲出了10年前设计 OpenResty&amp;nbsp;前身时内心的宏大构想&lt;/li&gt;
&lt;li&gt;所以, 值得认真 review …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#building-business-systems-with-dsls-for-nginx-openresty"&gt;Building Business Systems with DSLs for &lt;span class="caps"&gt;NGINX&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; OpenResty&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tldr"&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#or"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&amp;nbsp;的世界观&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#or_1"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&amp;nbsp;的应用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sregex"&gt;大事儿:&amp;nbsp;sregex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dsl-lzsql"&gt;DSL实验: &lt;span class="caps"&gt;LZSQL&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dsl"&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;的爆发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#or_2"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&amp;nbsp;的目标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tlog"&gt;TLog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="building-business-systems-with-dsls-for-nginx-openresty"&gt;Building Business Systems with DSLs for &lt;span class="caps"&gt;NGINX&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; OpenResty&lt;a class="headerlink" href="#building-business-systems-with-dsls-for-nginx-openresty" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;~&amp;nbsp;来自春哥的分享&lt;/p&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5年前也听录了一次 春哥的分享:&lt;a href="http://blog-zq-org.qiniucdn.com/pyblosxom/oss/openresty-intro-2012-03-06-01-13.html"&gt;由Lua&amp;nbsp;粘合的Nginx生态环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,&amp;nbsp;神奇的引发了各种后来的然后&lt;/li&gt;
&lt;li&gt;去年, 在 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 大会上, 春哥才真正讲出了10年前设计 OpenResty&amp;nbsp;前身时内心的宏大构想&lt;/li&gt;
&lt;li&gt;所以, 值得认真 review 一下:&lt;ul&gt;
&lt;li&gt;视频:&lt;a href="https://www.youtube.com/watch?v=w2RAZLptE-U"&gt;Building Business Systems with Domain-Specific Languages for &lt;span class="caps"&gt;NGINX&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; OpenResty | Cloudflare -&amp;nbsp;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文稿:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/blog/building-business-systems-with-domain-specific-languages-for-nginx-openresty-part-1/"&gt;Domain-Specific Languages for &lt;span class="caps"&gt;NGINX&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; OpenResty, Part&amp;nbsp;1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/blog/building-business-systems-with-domain-specific-languages-for-nginx-openresty-part-2/"&gt;Domain-Specific Languages for &lt;span class="caps"&gt;NGINX&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; OpenResty, Part&amp;nbsp;1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tldr"&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;a class="headerlink" href="#tldr" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="p0" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide0_First-image.png"&gt;&lt;/p&gt;
&lt;p&gt;nginx.conf 2016 春哥进行的是压轴分享,对于在主厅面对千人的演讲,&amp;nbsp;他表示了虚伪的不好意思.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p2" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide2_OpenResty.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 项目发起自10年前,现在已经有完备的团队专门进行维护和开发,
twitter 官方帐号是:&amp;nbsp;@OpenResty&lt;/p&gt;
&lt;p&gt;推荐关注&lt;/p&gt;
&lt;p&gt;&lt;img alt="p4" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide4_Lua-Libraries.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 在 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 内嵌了 LuaJIT 环境,
得以支持丰富的 Lua 库,结合 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 原生的非阻塞机制,
支持我们可以快速的完成复杂的 web 应用系统,
当前 &lt;code&gt;lus-resty-*&lt;/code&gt; 库已经支持非常多领域功能,比如说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各种数据库客户端:&amp;nbsp;MySQL/Pg/MongoDB/RabbitMQ/..&lt;/li&gt;
&lt;li&gt;各种 upstreams&amp;nbsp;的健康检验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的, OpenResty&amp;nbsp;是成长非常迅猛的社区&lt;/p&gt;
&lt;p&gt;&lt;img alt="p5" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide5_NGINX-LuaJIT.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 不仅仅将 LuaJIT 嵌入到 &lt;span class="caps"&gt;NGINX&lt;/span&gt; ,
感谢 Lus 的 &lt;code&gt;co-routines&lt;/code&gt; 特性,&amp;nbsp;我们还创造了独有的特性,比如说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;light&amp;nbsp;threads&lt;/li&gt;
&lt;li&gt;timers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="or"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt; 的世界观&lt;a class="headerlink" href="#or" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="p6" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide6_The-All-Inclusive-Philosophy.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 的世界观是 &lt;code&gt;全包容&lt;/code&gt; 的,
不排斥其它任何技术, 事实上 resty 用户来自从 &lt;span class="caps"&gt;JAVA&lt;/span&gt; 到 Go&amp;nbsp;各种技术人群.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;NGINX&lt;/span&gt; 可以在后端到客户端之间作很多有趣的事儿,
所以, 在 OpenResty 帮助下, 可以很好的完成混合解决,&amp;nbsp;能和旧系统无缝衔接.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p7" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide7_Simple-Small-Fast-Flexible.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty&amp;nbsp;的目标是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简洁&lt;/li&gt;
&lt;li&gt;轻便&lt;/li&gt;
&lt;li&gt;快速&lt;/li&gt;
&lt;li&gt;灵活&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;认真研究 Lua 后, 我们发现这真是个神奇的恩物,&amp;nbsp;不仅小而且快,更加灵活,支撑复杂的大型系统也没有问题.&lt;/p&gt;
&lt;p&gt;总之这是个设计务实,发展良好,基础稳定的好语言,
OpenResty 将 Lua 和 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 深度结合,&amp;nbsp;倍增了双方的实力.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p8" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide8_Synchronously-Nonblocking.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 的 I/O 模式是 &lt;code&gt;无阻塞异步&lt;/code&gt;,
虽然 异步 在现实世界中无处不在,
但是,人类的头脑只习惯同步,&amp;nbsp;当然,俺也反感回调&lt;/p&gt;
&lt;p&gt;&lt;img alt="p9" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide9_Light-Threads-Semaphores.png"&gt;&lt;/p&gt;
&lt;p&gt;所以,我们设计了 纤程和信号 来模拟并发,&amp;nbsp;而实际上只有一个唯一的系统线程.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p10" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide10_Cosockets.png"&gt;&lt;/p&gt;
&lt;p&gt;并发明了: &amp;#8216;Cosockets&amp;#8217; ~ 肯接字 (哈N 年前就想翻译了,&amp;nbsp;现在才有好想法儿)&lt;/p&gt;
&lt;p&gt;类似 &lt;span class="caps"&gt;BSD&lt;/span&gt;/Lua 套接字的容器,
支持我们象写 &lt;span class="caps"&gt;PHP&lt;/span&gt; 代码一样写同步表述,&amp;nbsp;但实际运行是完全异步的.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;golang 其实也借鉴了我们这一设计&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="p11" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide11_Timers-and-Sleeping.png"&gt;&lt;/p&gt;
&lt;p&gt;我们也重新定义了 计时器和睡眠原语,
将异步和下游任务在 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 中完备的分离了,
使用起来就象 cron&amp;nbsp;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p12" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide12_Shm-Based-Dictionaries-and-Queues.png"&gt;&lt;/p&gt;
&lt;p&gt;同时还发明了 &lt;code&gt;shm&lt;/code&gt; ~ 内存分享式字典和队列,
以便支持我们的应用在 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 不同进程间分享数据,
同时又不打破 &lt;span class="caps"&gt;NGINX&lt;/span&gt;&amp;nbsp;的异步性能.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p13" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide13_Dynamic-SSL-Handshakes.png"&gt;&lt;/p&gt;
&lt;p&gt;而且刚刚我们也开始支持 动态SSL握手, 以便支持下游的 &lt;span class="caps"&gt;HTTPS&lt;/span&gt;&amp;nbsp;事务.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p14" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide14_Dynamic-SSL-Handshakes-Example.png"&gt;&lt;/p&gt;
&lt;p&gt;比如在 Cloudflare, 作为CDN 供应商,&amp;nbsp;有很多客户以及虚拟服务器和边缘服务器构成网络,&lt;/p&gt;
&lt;p&gt;要面对的一个主要问题就是: &lt;span class="caps"&gt;SSL&lt;/span&gt;&amp;nbsp;证书/密钥太多&lt;/p&gt;
&lt;p&gt;理论上应该根据实际请求来动态加载对应的证书/密钥,
这样我们就可以同时持有无限量的 &lt;span class="caps"&gt;SSL&lt;/span&gt; 证书/密钥,
感谢本地流量调度,&amp;nbsp;虽然不可能有单机可以查询所有用户的流量.&lt;/p&gt;
&lt;p&gt;进一步的, 在 OpenResty 可以通过 共享内存和工作级缓存中管理 &lt;span class="caps"&gt;SSL&lt;/span&gt;&amp;nbsp;证书/密钥,&lt;/p&gt;
&lt;p&gt;数据 &amp;#8212; 比如: 证书/密钥 &amp;#8212; 当前已支持在 &lt;a href="https://github.com/alticelabs/kyoto"&gt;Kyoto Tycoon&lt;/a&gt; 中分发,
其它后端,比如说 Redis&amp;nbsp;或其它分布式存储也当然可以了.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p15" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide15_Dynamic-Load-Balancers.png"&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 中的 Lua&amp;nbsp;进行动态加载平衡也是能的.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p16" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide16_Dynamic-Load-Balancers-Ex.png"&gt;&lt;/p&gt;
&lt;p&gt;比如这一则配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几行就可以定义一系列复杂的决策&lt;/li&gt;
&lt;li&gt;动态,&amp;nbsp;意味着你可以在该级别上对每个请求灵活应用不同的均衡策略&lt;/li&gt;
&lt;li&gt;并指定重试策略:&lt;ul&gt;
&lt;li&gt;比如,&amp;nbsp;特定请求没有获得响应时&lt;/li&gt;
&lt;li&gt;可以选择忽略&lt;/li&gt;
&lt;li&gt;也可以选择请求和请求的位置&lt;/li&gt;
&lt;li&gt;等等,都在 &lt;code&gt;balancer_by_lua_block&lt;/code&gt; 中可以声明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同时不影响 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 各种标准模块,比如说:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html"&gt;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html"&gt;FastCGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html"&gt;uwsgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;#8230;&amp;nbsp;等等的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以及 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 核心模块,比如: keepalive,连接池等等,&amp;nbsp;也一样开箱即用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p17" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide17_ngx_stream_lua_module-TCP-UDP.png"&gt;&lt;/p&gt;
&lt;p&gt;最近我们创建了 &lt;a href="https://github.com/openresty/stream-lua-nginx-module"&gt;ngx_stream_lua_module&lt;/a&gt; 模块来替代以往的
&lt;a href="https://github.com/openresty/lua-nginx-module"&gt;ngx_ HTTP_lua_&amp;nbsp;module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 核心子系统,来支持实现通用的 &lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;UDP&lt;/span&gt;&amp;nbsp;服务,&lt;/p&gt;
&lt;p&gt;实际上 &lt;a href="http://openresty.org/en/"&gt;OpenResty® - Official Site&lt;/a&gt; 
本身的 &lt;span class="caps"&gt;DNS&lt;/span&gt; 服务器就由此模块支撑,
还有人拿个模块实现了类似 syslog 的 &lt;span class="caps"&gt;TCP&lt;/span&gt; 守护进程,&amp;nbsp;来接收远程的大量日志.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p18" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide18_Advanced-Debugging-Profiling-Tools-Based-on-GDB-SystemTap.png"&gt;&lt;/p&gt;
&lt;p&gt;多年以来,&amp;nbsp;我们积累了大量的专用测试工具.&lt;/p&gt;
&lt;p&gt;在 Cloudflare, 运营有全球范围的复杂大型网络,
很多问题发生的几率仅仅有 1% 或 0.1% 甚至于 0.001%,
几乎难以复现,&amp;nbsp;必须依赖高级调试工具来完成.&lt;/p&gt;
&lt;p&gt;已经开源了很多基于 &lt;span class="caps"&gt;GDB&lt;/span&gt; 以及 SystemTap&amp;nbsp;的工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;GDB&lt;/span&gt; 主要调试死锁进程,借助 &lt;span class="caps"&gt;GDB&lt;/span&gt; 以及 dump 工具, Mike Pall 已经修复了10多个隐藏在 &lt;span class="caps"&gt;JIT&lt;/span&gt;&amp;nbsp;中非常深的积年老问题&lt;/li&gt;
&lt;li&gt;SystemTap 则是非常赞的 RedHat 工程师贡献的动态追踪平台,&lt;ul&gt;
&lt;li&gt;允许分享分析运行时系统, &lt;/li&gt;
&lt;li&gt;从 内核到 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 整个儿软件桟以及用户的 Lua&amp;nbsp;业务脚本, &lt;/li&gt;
&lt;li&gt;都能在对生产系统微小影响下快速分析出来,&lt;/li&gt;
&lt;li&gt;甚至于不用关闭防火墙&lt;/li&gt;
&lt;li&gt;可以直接进行线上活体分析&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;#8212;&amp;nbsp;这才是未来系统开发的应该姿势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;嗯哼? &lt;span class="caps"&gt;LISP&lt;/span&gt; 构造的系统, 从一开始就这样的哪?!&amp;nbsp;)&lt;/p&gt;
&lt;h3 id="or_1"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt; 的应用场景&lt;a class="headerlink" href="#or_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="p19" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide19_C2000K.png"&gt;&lt;/p&gt;
&lt;p&gt;随着近几个月, 我们发布的重要功能,
OpenResty 已在真实客户单主机上支持住了 200万&amp;nbsp;级别的并发请求,&lt;/p&gt;
&lt;p&gt;已经有客户在生产环境中部署了这种级别的推送系统.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p20" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide20_Web-API-and-Microservices.png"&gt;&lt;/p&gt;
&lt;p&gt;另外一个常见领域是接口和微服务,&lt;/p&gt;
&lt;p&gt;很多人使用 OpenResty 构建这类服务,比如:
&lt;a href="https://github.com/Mashape/kong"&gt;Mashape&amp;#8217;s Kong&lt;/a&gt;平台,
以及 &lt;a href="https://github.com/adobe-apiplatform/apigateway"&gt;Adobe&amp;#8217;s &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;Gateway&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此外, 一些美国银行使用 OpenResty&amp;nbsp;来管理路由器流量,&lt;/p&gt;
&lt;p&gt;同时, 一些更大的中国互联网公司, 在用 OpenResty 构建实时股票信息服务,&amp;nbsp;这些接口是其中流量最大的,&lt;/p&gt;
&lt;p&gt;还有用来发布实时天气信息接口的&amp;#8230;&lt;/p&gt;
&lt;p&gt;等等吧, OpenResty&amp;nbsp;的应用可能是无限的.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p21" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide21_Web-Gateways.png"&gt;&lt;/p&gt;
&lt;p&gt;另外一个 OpenResty 的应用场景是 web 网关,
很多 &lt;span class="caps"&gt;CDN&lt;/span&gt;&amp;nbsp;厂商都在这样使用.&lt;/p&gt;
&lt;p&gt;我们还知道有人用 OpenResty 来管理通用 &lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;UDP&lt;/span&gt;&amp;nbsp;流量,&lt;/p&gt;
&lt;p&gt;Lua 可以支持你的网关在运行中得以变化,
基于互联网的动态性, 
&lt;span class="caps"&gt;CDN&lt;/span&gt; 厂商必须灵活的应对客户的不同需求,&amp;nbsp;而客户的需求越来越复杂化.&lt;/p&gt;
&lt;p&gt;甚至于人们在期待可以包含业务逻辑,比如常见的想动态修订配置文件,来支持软件更新,&amp;nbsp;等等出于实际需求的要求.&lt;/p&gt;
&lt;p&gt;选择 Lua 令一切变的可能,
因为 &lt;span class="caps"&gt;JIT&lt;/span&gt; (即时编译)的机制,
可以随时根据变更的配置生成新的规则,&amp;nbsp;并根据不同的请求进行对应的流量优化&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;NGINX&lt;/span&gt; 原先就支持基于 HUP信号 的配置重加载, 
但是, 这对于厂商而言成本太高,&amp;nbsp;因为无法精确的退出相应请求来重启.&lt;/p&gt;
&lt;p&gt;另外,&amp;nbsp;缓存也是个大问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时一个客户的缓存非常冷&lt;/li&gt;
&lt;li&gt;但是,又不能为了释放这部分数据而重启整个儿缓存&lt;/li&gt;
&lt;li&gt;这对其它用户来说太惨了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p22" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide22_Web-Applications.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 原先设计目标是支持完备的web 应用,
第一个案例是网站, 所以,有了 &lt;a href="http://openrety.org"&gt;openrety.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如今有越来越多的传统网站,在用 OpenResty&amp;nbsp;从头开始构建&lt;/p&gt;
&lt;p&gt;&lt;img alt="p23" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide23_Web-Applications-Products-Details-Page.png"&gt;&lt;/p&gt;
&lt;p&gt;例如 京东网, 中国最大的 &lt;span class="caps"&gt;B2C&lt;/span&gt; 电子商务服务平台之一.
在各种营销日, 他们必须面对海量的请求,
类似美国的黑色星期五, 在中国则是&amp;nbsp;11.11&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;
问题在中国的光棍节营销流量, 是黑色日期五的几个数量级哪!!!
毕竟, 美国的打折多数是线下的&amp;#8230;&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;最早他们使用 Starnet 技术, 经常崩溃,
后来迁移到 &lt;span class="caps"&gt;JAVA&lt;/span&gt; 技术桟,&amp;nbsp;全然崩溃.&lt;/p&gt;
&lt;p&gt;最终迁移到 OpenResty ,虽然后端依然是 &lt;span class="caps"&gt;JAVA&lt;/span&gt;,
但是迎接所有流量的全部是 OpenResty 了,&amp;nbsp;从此再也没有崩溃过.&lt;/p&gt;
&lt;p&gt;现在他们使用 OpenResty&amp;nbsp;来生成复杂的网页.&lt;/p&gt;
&lt;p&gt;比如这个截屏,是 iPhone 的详细产品信息页,
类似页面吸引了主要的流量, 基于 OpenResty 的模板库来生成动态页面,&amp;nbsp;这是个非常长的页面,只截取了顶部,&lt;/p&gt;
&lt;p&gt;他们内部维护了一个非常庞大的模板库,
并用 Redis 来缓存数据 ,以免流量直接击中后端的 &lt;span class="caps"&gt;JAVA&lt;/span&gt;&amp;nbsp;服务,&lt;/p&gt;
&lt;p&gt;春哥曾经询问 &lt;span class="caps"&gt;JD&lt;/span&gt;, 是否需要优化, 他们回答,速度已经足够快,&amp;nbsp;不用了,谢谢&amp;#8230;&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这可能是由于性能太好而丢失定制服务的最好案例,
MySQL 只能表示 23333 了&amp;#8230;&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="p24" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide24_OpenResty-Website.png"&gt;&lt;/p&gt;
&lt;p&gt;我们自己则重构了官方网站,
整个网站使用 Lua 在 OpenResty&amp;nbsp;上重写而成,&lt;/p&gt;
&lt;p&gt;使用 PorstgreSQL 作为后端数据存储,
通过 OpenResty&amp;nbsp;直接和数据库交互,&lt;/p&gt;
&lt;p&gt;通过 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 的异步非阻塞进程来处理 &lt;span class="caps"&gt;IO&lt;/span&gt;,&amp;nbsp;非常快速并便宜,&lt;/p&gt;
&lt;p&gt;基于 Pg&amp;nbsp;内置的全文搜索而支持了网站的内部搜索功能.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p25" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide25_Distributed-Storage-Systems.png"&gt;&lt;/p&gt;
&lt;p&gt;这是令春哥自己都惊讶的领域:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为中国最大的网站之一&amp;nbsp;sina.com&lt;/li&gt;
&lt;li&gt;发布有类似 Jawbox&amp;nbsp;的网络存储产品&lt;/li&gt;
&lt;li&gt;他们不仅用 OpenResty&amp;nbsp;来构建前端&lt;/li&gt;
&lt;li&gt;而且还用在后台直接处理文件&amp;nbsp;I/O&lt;/li&gt;
&lt;li&gt;对于这种操作他们非常自得&lt;/li&gt;
&lt;li&gt;也非常自豪的成为 OpenReaty&amp;nbsp;核心组件贡献方之一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p26" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide26_Datanet.png"&gt;&lt;/p&gt;
&lt;p&gt;Datanet 则是另外一个类似的项目,
虽然没开源,&amp;nbsp;但是,作者在努力中,&lt;/p&gt;
&lt;p&gt;创始人是 Russell Sullivan,
在 twitter 是&amp;nbsp;@jaksprats&lt;/p&gt;
&lt;p&gt;正在基于 OpenResty 构建一个分布式数据网络,&amp;nbsp;推荐大家去直接嗯哼&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;img alt="p27" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide27_Conflict-Free-Replicated-Data-Types.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CRDT&lt;/code&gt; ~ 无冲突数据复制类型,
简单的说, 这是全新的复杂理论,
涉及复杂的算法和论文,&amp;nbsp;还在折腾中&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;img alt="p28" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide28_Forming-a-Stateful-Network.png"&gt;&lt;/p&gt;
&lt;p&gt;基本上象个 &lt;code&gt;半p2p&lt;/code&gt; 网络,
每个节点都可以有状态,通过 类似 p2p&amp;nbsp;的机制完成自动同步,&lt;/p&gt;
&lt;p&gt;为什么叫 &lt;code&gt;半p2p&lt;/code&gt; 网络,因为这其中必须有某种中心,
可以是大型数据中心, 
以便支持暂时下线的节点,&amp;nbsp;重新上线时,快速发现差异完成同步&amp;#8230;.&lt;/p&gt;
&lt;p&gt;是的,&amp;nbsp;机制很复杂要说明白得额外2小时&amp;#8230;&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不就是不完备的区块链网络嘛&amp;#8230;&amp;nbsp;)&lt;/p&gt;
&lt;h3 id="sregex"&gt;大事儿: sregex&lt;a class="headerlink" href="#sregex" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="p29" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide29_Sregex.png"&gt;&lt;/p&gt;
&lt;p&gt;sregex &amp;lt;&amp;#8212; 春哥一直在造的轮那 ~&amp;nbsp;正则表达式引擎,&lt;/p&gt;
&lt;p&gt;当然是为了真实的业务需求&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是,这是阻止不了从头造轮子的快感的&amp;#8230;嗯哼!&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="p30" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide30_web-server.png"&gt;&lt;/p&gt;
&lt;p&gt;本质上她必须可以支撑处理流式数据,
毕竟 web&amp;nbsp;服务器要处理的数据理论上是无限大的.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p31" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide31_4KB-buffer.png"&gt;&lt;/p&gt;
&lt;p&gt;关键问题是高速处理缓冲区块:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓冲总是混沌的&lt;/li&gt;
&lt;li&gt;通常很小,比如&amp;nbsp;4k&lt;/li&gt;
&lt;li&gt;数据一进入, 就必须完成处理,得到我们需要的,并作出决定:&lt;ul&gt;
&lt;li&gt;丢弃&lt;/li&gt;
&lt;li&gt;或是通过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而且是单向流水线&lt;ul&gt;
&lt;li&gt;一但数据块被处理&lt;/li&gt;
&lt;li&gt;立即将被下一组填充&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这一构想很得趣,&amp;nbsp;但是,不简单&lt;/li&gt;
&lt;li&gt;算法非常困难,&amp;nbsp;传统的都不行&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p32" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide32_4KB-buffer-2.png"&gt;&lt;/p&gt;
&lt;p&gt;回溯算法在主流正则表达式引擎中很流行,&lt;/p&gt;
&lt;p&gt;基本上,&amp;nbsp;当你找不到匹配时,就将指针逈后移动再重试.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PCRE&lt;/span&gt; 以及其它很多引擎都是基于这一算法的,&amp;nbsp;但是,包含了很多问题,不仅仅是固定缓冲区的要求.&lt;/p&gt;
&lt;p&gt;还可能引发非常昂贵的系统资源浪费, 
这种现象我们定义为: &lt;code&gt;病理行为&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="p33" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide33_Xregex%E2%80%99s-BFA-Engine-Performance-Benchmark.png"&gt;&lt;/p&gt;
&lt;p&gt;春哥构建了 &lt;a href="https://en.wikipedia.org/wiki/Deterministic_finite_automaton"&gt;&lt;span class="caps"&gt;DFA&lt;/span&gt;&lt;/a&gt;
(确定性有限自动机),
当前性能尚可,&amp;nbsp;如图中所示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;橙色-&amp;gt;Google &lt;span class="caps"&gt;RE2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;紫色-&amp;gt;&lt;span class="caps"&gt;PCRE&lt;/span&gt; &lt;span class="caps"&gt;JIT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;黑色-&amp;gt;&lt;span class="caps"&gt;PCRE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;绿色-&amp;gt;PCRE2解释器&lt;/li&gt;
&lt;li&gt;蓝色-&amp;gt;&lt;span class="caps"&gt;PCRE2&lt;/span&gt; &lt;span class="caps"&gt;JIT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;黄色-&amp;gt;sregex &lt;span class="caps"&gt;DFA&lt;/span&gt;&amp;nbsp;原型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;PCRE&lt;/span&gt; 是 C 实现的 Perl&amp;nbsp;兼容正则表达库,性能口碑很好&lt;/p&gt;
&lt;p&gt;&lt;img alt="p34" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide34_benchmark2.png"&gt;&lt;/p&gt;
&lt;p&gt;在这个有点儿复杂的测试案例中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;RE2&lt;/span&gt; 比 &lt;span class="caps"&gt;PCRE&lt;/span&gt;&amp;nbsp;好&lt;/li&gt;
&lt;li&gt;甚至于比解释器版本还好&lt;/li&gt;
&lt;li&gt;但是,  sregex &lt;span class="caps"&gt;DFA&lt;/span&gt; 原型&amp;nbsp;依然更好点儿&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p35" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide35_benchmark3.png"&gt;&lt;/p&gt;
&lt;p&gt;而在 &lt;code&gt;/d.*?d/&lt;/code&gt; 这一简单案例测试中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们的原型获得了极大的优势&lt;/li&gt;
&lt;li&gt;因为 &lt;span class="caps"&gt;DFA&lt;/span&gt;&amp;nbsp;可以进行智能优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p36" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide36_benchmark4.png"&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;span class="caps"&gt;PCRE&lt;/span&gt; 提供的性能测试案例集中,&amp;nbsp;我们(黄色)领先一些&lt;/p&gt;
&lt;p&gt;&lt;img alt="p37" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide37_benchmark5.png"&gt;&lt;/p&gt;
&lt;p&gt;这一正则表达式案例是从 ModSecurity 的核心规则中抽取的,
应用在 &lt;span class="caps"&gt;WAF&lt;/span&gt;(web&amp;nbsp;应用防火墙)过滤核心中.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回溯引擎浪费了大量 &lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;nbsp;资源,因为在反复回溯&lt;/li&gt;
&lt;li&gt;sregex &lt;span class="caps"&gt;DFA&lt;/span&gt; 原型则相反,&amp;nbsp;非常快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sregex 将是 OpenResty&amp;nbsp;接下来的重心!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前还不是产品状态,&amp;nbsp;只是个快速原型&lt;/li&gt;
&lt;li&gt;春哥用大约2000行 perl&amp;nbsp;代码实现了一个正则表达式引擎&lt;/li&gt;
&lt;li&gt;以便生成能被 clang/&lt;span class="caps"&gt;GCC&lt;/span&gt; 编译的 C&amp;nbsp;代码&lt;/li&gt;
&lt;li&gt;完成这些,只是为了印证设想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们认为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;自己的 JIT 引擎比 Clang/GCC 更好,因为优化器更通用&lt;/span&gt;
&lt;span class="err"&gt;自己的 JIT 引擎比 Clang/GCC 更好,因为优化器更通用&lt;/span&gt;
&lt;span class="err"&gt;自己的 JIT 引擎比 Clang/GCC 更好,因为优化器更通用&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(&lt;code&gt;好吧, 重要的事儿得说三次&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id="dsl-lzsql"&gt;DSL实验: &lt;span class="caps"&gt;LZSQL&lt;/span&gt;&lt;a class="headerlink" href="#dsl-lzsql" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="p38" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide38_A-Web-Platform-As-A-Virtual-Machine.png"&gt;&lt;/p&gt;
&lt;p&gt;回到主题: 建立在 OpenResty 上的 &lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先分享了一系列 OpenResty&amp;nbsp;的新功能,&lt;/p&gt;
&lt;p&gt;但是,更重要的是,&amp;nbsp;春哥认为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenResty 可以视作 &lt;span class="caps"&gt;VM&lt;/span&gt;(虚拟机)&lt;/li&gt;
&lt;li&gt;就象 &lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;可以更加强大, 更加面向&amp;nbsp;web&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p39" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide39_lz.taobao.com_.png"&gt;&lt;/p&gt;
&lt;p&gt;这个实验其实是7~8年前完成的,不算新鲜,但是,实验是值得回味的.&lt;/p&gt;
&lt;p&gt;那时春哥供职 taobao, 是 alibaba 集团子公司, 是中国最大的 &lt;span class="caps"&gt;B2C&lt;/span&gt; 平台,
当时在数据分析部门,
客户是 taobao 的商家, 类似 eBay&amp;nbsp;的商家就是卖家一样.&lt;/p&gt;
&lt;p&gt;客户需要一个流量分析工具, 
来统计店面的流量,和广告部署/销售间的影响力关系,&amp;nbsp;这是个非常大的产品.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为什么大? 因为要分析的数据量,相当于好几个 twitter 的数据量&amp;#8230;.&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="p40" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide40_Taobao-homepage.png"&gt;&lt;/p&gt;
&lt;p&gt;这是产品首页&lt;/p&gt;
&lt;p&gt;&lt;img alt="p41" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide41_chart.png"&gt;&lt;/p&gt;
&lt;p&gt;给出了类似 google 分析样漂亮的图表,&amp;nbsp;所不同的是有更多数据报告.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p42" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide42_data-volume.png"&gt;&lt;/p&gt;
&lt;p&gt;由于 yaobao 的体量,数据量很大,&amp;nbsp;非常的大&lt;/p&gt;
&lt;p&gt;&lt;img alt="p43" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide43_experiment-on-the-client-side.png"&gt;&lt;/p&gt;
&lt;p&gt;当时春哥&amp;nbsp;放胆在客户端进行各种尝试,8年前:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个儿应用逻辑已经全部在前端了&lt;/li&gt;
&lt;li&gt;类似 gmail&amp;nbsp;,完全由一组运行在网页中的脚本构建&lt;/li&gt;
&lt;li&gt;还引入了客户端模板:&lt;ul&gt;
&lt;li&gt;构建了一个能从模板生成 &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;代码的引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另外也提供了 web&amp;nbsp;服务来驱动客户端应用&lt;/li&gt;
&lt;li&gt;总之, web 服务是关键,是唯一运行在服务器上的东西&lt;ul&gt;
&lt;li&gt;将 &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;发送给客户端&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;用编译后的模板生成页面区域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p44" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide44_server-side-.png"&gt;&lt;/p&gt;
&lt;p&gt;量子统计整体架构如上:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenResty&amp;nbsp;位于后端和浏览器之间&lt;/li&gt;
&lt;li&gt;后端是 MySQL 集群,因为数据量大,&amp;nbsp;光卷就有超过1亿个&lt;/li&gt;
&lt;li&gt;另外还有实时统计集群作支撑&lt;/li&gt;
&lt;li&gt;同时还作为一个开放平台发布 &lt;span class="caps"&gt;JSON&lt;/span&gt; 的 &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;以及 Memcached 和 Tokyo Tyrant&amp;nbsp;集群来管理其它元数据&lt;/li&gt;
&lt;li&gt;但是, 相比其它系统要简洁的多,只用 &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;来运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p45" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide45_-Inventing-LZSQL.png"&gt;&lt;/p&gt;
&lt;p&gt;春哥很快意识到关键问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有足够的人力来支撑开发&lt;/li&gt;
&lt;li&gt;整个儿团队只有两个实习生&lt;/li&gt;
&lt;li&gt;但是, 不得不将原先 &lt;span class="caps"&gt;PHP&lt;/span&gt; 编写的整个儿数据分析产品迁移到 OpenResty&amp;nbsp;平台&lt;/li&gt;
&lt;li&gt;即使迫使实习生拼命写 Lua&amp;nbsp;代码,但是,面对复杂到狂乱的业务逻辑,这是个不可能的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;春哥用了一个晚上思考,&amp;nbsp;决定:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于对数据分析核心模型/模式的理解&lt;/li&gt;
&lt;li&gt;构建自己的 &lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;以便用更加自然的形式来描述业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;毕竟: &lt;code&gt;什么是编程?&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质上是和机器对话&lt;/li&gt;
&lt;li&gt;令机器理解我们的意图&lt;/li&gt;
&lt;li&gt;从而快速/便宜/可靠的完成业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以,&amp;nbsp;编程的关键是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;提高同机器对话的效率&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么, 如果你能用两个词或是一个句子来表达一个想法,
为毛要使用十多行代码?&amp;nbsp;那也忒自虐了!&lt;/p&gt;
&lt;p&gt;所以, 春哥不喜欢 &lt;span class="caps"&gt;JAVA&lt;/span&gt;, 因为要输入的代码太多了,
Lua 也不是个好形式,&amp;nbsp;以及其它现有的所有命令式通用开发语言&lt;/p&gt;
&lt;p&gt;&lt;img alt="p46" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide46_to-convey-the-idea-to-the-machine.png"&gt;&lt;/p&gt;
&lt;p&gt;所以有了第一个 &lt;span class="caps"&gt;DSL&lt;/span&gt;: &lt;code&gt;LZSQL&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于SQL 的形式,&amp;nbsp;快速传达想法给系统&lt;/li&gt;
&lt;li&gt;为什么选择 &lt;span class="caps"&gt;SQL&lt;/span&gt; ? &lt;ul&gt;
&lt;li&gt;因为数据分析产品本质上是基于关系型数据模型的&lt;/li&gt;
&lt;li&gt;无论是否使用 &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们可以在 &lt;span class="caps"&gt;SQL&lt;/span&gt; 中定义变量和用户变量,&amp;nbsp;作为第一公民&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt; 可以在一些 MySQL&amp;nbsp;后端运行&lt;/li&gt;
&lt;li&gt;也可以在 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 中运行&lt;ul&gt;
&lt;li&gt;因为实现了包含 &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;引擎的内存数据库&lt;/li&gt;
&lt;li&gt;只有100行左右的 Lua&amp;nbsp;代码&lt;/li&gt;
&lt;li&gt;运行良好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复杂性来源是因为数据不得不来自很多不同的 MySQL&amp;nbsp;数据库&lt;/li&gt;
&lt;li&gt;然后在内存中重新关联,&amp;nbsp;并组合成最终结果发送到客户端&lt;/li&gt;
&lt;li&gt;这其中涉及很多棘手的问题:&lt;ul&gt;
&lt;li&gt;必须能分解 &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;到不同节点上运行&lt;/li&gt;
&lt;li&gt;同时还能自动优化 &lt;span class="caps"&gt;SQL&lt;/span&gt; 查询 &lt;ul&gt;
&lt;li&gt;~ MySQL&amp;nbsp;自己的优化器通常无法完成海量优化&lt;/li&gt;
&lt;li&gt;特别是在 &lt;span class="caps"&gt;OLAP&lt;/span&gt;&amp;nbsp;场景中&lt;/li&gt;
&lt;li&gt;(在线分析过程)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p47" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide47_writing-the-business-logic-in-LZSQL-files.png"&gt;&lt;/p&gt;
&lt;p&gt;最终, 实际上我们用 &lt;span class="caps"&gt;LZSQL&lt;/span&gt; 来记述业务逻辑,
用编译器生成 Lua 代码,
在线发布 Lua 代码并运行,&amp;nbsp;而线上不再需要编译器.&lt;/p&gt;
&lt;p&gt;这就是 &lt;code&gt;编译&lt;/code&gt; 的美妙所在.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p48" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide48_to-compile-the-LZSQL-files.png"&gt;&lt;/p&gt;
&lt;p&gt;当前的, 提供 &lt;span class="caps"&gt;CLI&lt;/span&gt; 工具,
完成 &lt;span class="caps"&gt;LZSQL&lt;/span&gt; 脚本的编译, 链接到最终 Lua&amp;nbsp;应用程序.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p49" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide49_The-result.png"&gt;&lt;/p&gt;
&lt;p&gt;其结果非常赞:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为编译器可以进行很多优化&lt;/li&gt;
&lt;li&gt;人通常不能,&amp;nbsp;甚至于不能正确运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;旧业务是 &lt;span class="caps"&gt;PHP&lt;/span&gt; 编写的,新接口由春哥编译器生成 Lua&amp;nbsp;代码,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求延迟下降超过&amp;nbsp;90%,&lt;/li&gt;
&lt;li&gt;甚至于这包含了 MySQL&amp;nbsp;的延迟,&lt;/li&gt;
&lt;li&gt;上图是一次完整的 接口 &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;延迟对比&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得注意的是, 这时使用的还是标准的 Lua&amp;nbsp;解释器&lt;/p&gt;
&lt;p&gt;&lt;img alt="p50" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide50_still-using-the-interpreter-only.png"&gt;&lt;/p&gt;
&lt;p&gt;进一步的, 仅仅切换为 LuaJIT ,&amp;nbsp;速度就获得进一步加强&lt;/p&gt;
&lt;p&gt;&lt;img alt="p51" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide51_4000-lines-of-Perl.png"&gt;&lt;/p&gt;
&lt;p&gt;而实际上, &lt;span class="caps"&gt;LZSQL&lt;/span&gt; 编译器,仅仅是 4000行 Perl 代码,&amp;nbsp;但是,包含了非常复杂的优化和类型检查以及一应上下文相关的分析过程.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p52" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide52_several-code-emitters.png"&gt;&lt;/p&gt;
&lt;p&gt;而且,&amp;nbsp;编译器包含了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个解析自己的解析器&lt;/li&gt;
&lt;li&gt;一个 &lt;span class="caps"&gt;AST&lt;/span&gt;(抽象语法树)&lt;/li&gt;
&lt;li&gt;一堆优化器&lt;/li&gt;
&lt;li&gt;一个代码映射器&lt;ul&gt;
&lt;li&gt;其实是多种映射器&lt;/li&gt;
&lt;li&gt;因为 &lt;span class="caps"&gt;LZSQL&lt;/span&gt;&amp;nbsp;支持多种语言后端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p53" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide53_why-not-C-code.png"&gt;&lt;/p&gt;
&lt;p&gt;是的, 当时可以生成 Lua 代码,
当然, 也可以生成 C&amp;nbsp;代码.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p54" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide54_generate-an-NGINX-model.png"&gt;&lt;/p&gt;
&lt;p&gt;是的, 当时后端是一个实时数据库,&amp;nbsp;提供了非常具体和复杂的线程协议,以至难以人工完成客户端.&lt;/p&gt;
&lt;p&gt;但是, 数据库发布有一个完备的wiki&amp;nbsp;文档:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那么为毛不让电脑可以理解文档&lt;/li&gt;
&lt;li&gt;自动生成一个 &lt;span class="caps"&gt;NGINX&lt;/span&gt; C&amp;nbsp;模块来调用呢?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是,&amp;nbsp;春哥实现了这个想法&lt;/p&gt;
&lt;p&gt;&lt;img alt="p55" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide55_Ticpy.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="p56" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide56_implementation-example.png"&gt;&lt;/p&gt;
&lt;p&gt;是的, 嘦很小的 &lt;span class="caps"&gt;DSL&lt;/span&gt; 抽象就可以解析 wiki&amp;nbsp;文档.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p57" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide57_a-very-quick-Perl-script.png"&gt;&lt;/p&gt;
&lt;p&gt;于是, 再再再次用 Perl 快速完成了一个编译器来从文档生成 &lt;span class="caps"&gt;NGINX&lt;/span&gt; C 模块,
可以自由的通过 &lt;span class="caps"&gt;NGINX&lt;/span&gt;&amp;nbsp;来和数据库交互,&lt;/p&gt;
&lt;p&gt;这算 &lt;span class="caps"&gt;NGINC&lt;/span&gt;&amp;nbsp;的上游模块.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p58" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide58_just-300-lines-of-code.png"&gt;&lt;/p&gt;
&lt;p&gt;是的, 文档只有300行, 但是生成的 C&amp;nbsp;模块有12000行代码.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p59" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide59_Writing-Programs-to-Write-Programs-to-Write-Programs.png"&gt;&lt;/p&gt;
&lt;p&gt;这一案例说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程就是和机器沟通&lt;/li&gt;
&lt;li&gt;如果文档足够完备&lt;/li&gt;
&lt;li&gt;那么完全可以直接转换给机器&lt;/li&gt;
&lt;li&gt;从而避免了人工编程的各种糟心事儿&lt;/li&gt;
&lt;li&gt;这一切指向了一个觉悟:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;宁愿写程序上编程来生成代码&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt; 也嫑直接写业务代码)&lt;/p&gt;
&lt;p&gt;&lt;img alt="p60" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide60_Test-Scaffold.png"&gt;&lt;/p&gt;
&lt;p&gt;同时我们的测试脚手架也是基于 &lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Test::Nginx::Socket&lt;/code&gt; 被所有 OpenResty&amp;nbsp;工程引用&lt;/li&gt;
&lt;li&gt;以规范的形式来描述测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即使你不会 Perl&amp;nbsp;也没有关系:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嘦按照规范提供描述&lt;/li&gt;
&lt;li&gt;服务就能理解并进行对应测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dsl"&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt; 的爆发&lt;a class="headerlink" href="#dsl" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="p61" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide61_How-About-Tests.png"&gt;&lt;/p&gt;
&lt;p&gt;幻灯参考:&amp;nbsp;http://search.cpan.org/perldoc?Cheater&lt;/p&gt;
&lt;p&gt;接下来的一件大事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于新产品&lt;/li&gt;
&lt;li&gt;数据库中还没有真实的业务数据时&lt;/li&gt;
&lt;li&gt;如何进行测试?&lt;/li&gt;
&lt;li&gt;我们需要数据来测试 &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;查询/网页/服务/&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以, 春哥再再再再次用 Perl 实现了一个类似 &lt;span class="caps"&gt;SQL&lt;/span&gt; 语言的建数据表用的 &lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="p62" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide62_Cheater.png"&gt;&lt;/p&gt;
&lt;p&gt;就是 Cheater&amp;nbsp;工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用正则表达式来指定允许渲染的字段&lt;/li&gt;
&lt;li&gt;并能指定依赖的外链&lt;/li&gt;
&lt;li&gt;那么这工具就能生成满足所有约束和要求的随机数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p63" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide63_The-OpenResty-Model-Language.png"&gt;&lt;/p&gt;
&lt;p&gt;回到 OpenResty 场景中,&amp;nbsp;从多年前的实验中可以学到:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过设计/实现模式语言来简化开发&lt;/li&gt;
&lt;li&gt;可以在 OpenResty 中使用 &lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;编译器知道在哪儿运行:&lt;ul&gt;
&lt;li&gt;本地或是远程&lt;/li&gt;
&lt;li&gt;又或是混合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在不同数据库中运行 &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;,甚至于不一定是关系型数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p64" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide64_The-OpenResty-View-Language.png"&gt;&lt;/p&gt;
&lt;p&gt;另外, 也发布有 OpenResty View&amp;nbsp;语言:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;&lt;span class="caps"&gt;MVC&lt;/span&gt;&lt;/a&gt;&amp;nbsp;模型&lt;/li&gt;
&lt;li&gt;在 View 层:&lt;ul&gt;
&lt;li&gt;Perl 有 &lt;span class="caps"&gt;TT2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Python 有&amp;nbsp;Jinja2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在有了自己的 &lt;span class="caps"&gt;DSL&lt;/span&gt; 就可以生成客户端 &lt;span class="caps"&gt;JS&lt;/span&gt; 或是服务端 Lua&amp;nbsp;代码&lt;/li&gt;
&lt;li&gt;这是 &lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;的优势&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p65" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide65_Jemplate-Lemplate.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jemplate 将 Perl 的 &lt;span class="caps"&gt;TT2&lt;/span&gt; 模板转换为 &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;代码&lt;/li&gt;
&lt;li&gt;Lemplate 则编译成 OpenResty Lua&amp;nbsp;代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p66" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide66_The-OpenResty-Controller-Language.png"&gt;&lt;/p&gt;
&lt;p&gt;这又是一件大事儿&lt;/p&gt;
&lt;p&gt;&lt;img alt="p67" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide67_it%E2%80%99s-a-Lua-based-language.png"&gt;&lt;/p&gt;
&lt;p&gt;看起来是这样的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于规则的语言&lt;ul&gt;
&lt;li&gt;你只需要描述一系列规则&lt;/li&gt;
&lt;li&gt;箭头左侧是谓词,&amp;nbsp;类似条件&lt;/li&gt;
&lt;li&gt;箭头右侧是行为,&amp;nbsp;比如重定向/返回错误码&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那些谓词其实是无效的&amp;nbsp;(不会导致执行具体的行动)&lt;/li&gt;
&lt;li&gt;编译器进一步优化的话,&amp;nbsp;就能将机关的谓词合并起来&lt;/li&gt;
&lt;li&gt;多数 &lt;span class="caps"&gt;CDN&lt;/span&gt; 业务编辑都可以如此表述&amp;lt;&amp;#8212;这就是 &lt;span class="caps"&gt;CDN&lt;/span&gt;&amp;nbsp;市场的本质&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的商业模式包含共同的内在特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是可能的也是可以的&lt;/li&gt;
&lt;li&gt;比如数据分析业务共同的模式是关系模式&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;语言洽好是这种模式的表述形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 &lt;span class="caps"&gt;CDN&lt;/span&gt; 或是 &lt;span class="caps"&gt;WAF&lt;/span&gt;&amp;nbsp;型的业务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应该就是规则集的模型&lt;/li&gt;
&lt;li&gt;理论上是个 &lt;code&gt;前向链专家系统模型&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;春哥是 &lt;span class="caps"&gt;AI&lt;/span&gt;&amp;nbsp;的资深粉丝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高中时就研究过各种流派的 &lt;span class="caps"&gt;AI&lt;/span&gt;&amp;nbsp;实现&lt;/li&gt;
&lt;li&gt;当前机器学习是热点&lt;/li&gt;
&lt;li&gt;而专家系统是 &lt;span class="caps"&gt;AI&lt;/span&gt; 的分支,&amp;nbsp;并没有过时&lt;/li&gt;
&lt;li&gt;比如说:&lt;ul&gt;
&lt;li&gt;基于 Prolog 的语法解析,&amp;nbsp;在自然语言研究领域很流行&lt;/li&gt;
&lt;li&gt;而语义解析, 则多用 &lt;span class="caps"&gt;CLISP&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;70年代 &lt;span class="caps"&gt;NASA&lt;/span&gt;&amp;nbsp;就折腾过类似的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p68" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide68_remove-all-the-C-comments.png"&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 也支持组合多个 正则表达式&amp;nbsp;来执行复杂的过滤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这样,所有替换在 &lt;span class="caps"&gt;NGNIX&lt;/span&gt; 输出过滤器中&lt;ul&gt;
&lt;li&gt;是缓冲实时完成的&lt;/li&gt;
&lt;li&gt;所以, 定长缓冲区,&amp;nbsp;无限数据流处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非常 &lt;span class="caps"&gt;COOL&lt;/span&gt; ,&amp;nbsp;不是嘛?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上图是批量从 C++&amp;nbsp;中删除注释的案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以稍微修订就能支持 &lt;span class="caps"&gt;CSS&lt;/span&gt;/&lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;的注释删除&lt;/li&gt;
&lt;li&gt;当然的,这是基于 sregex&amp;nbsp;的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p69" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide69_-WAF-Hot.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;WAF&lt;/span&gt; 是热点, 公司已在为 &lt;span class="caps"&gt;NGINX&lt;/span&gt; 推出 ModSecurity&amp;nbsp;端口,&lt;/p&gt;
&lt;p&gt;春哥看来 &lt;span class="caps"&gt;WAF&lt;/span&gt;&amp;nbsp;本身就可以基于前述控制语言来完成.&lt;/p&gt;
&lt;p&gt;&lt;img alt="p70" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide70_ModSecurity-a-Horrible-DSL.png"&gt;&lt;/p&gt;
&lt;p&gt;ModSecurity 本身作为 &lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;很可怕&lt;/p&gt;
&lt;p&gt;&lt;img alt="p71" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide72_-Example-of-a-Poor-Rule.png"&gt;&lt;/p&gt;
&lt;p&gt;这是 ModSecurity&amp;nbsp;一个线路的描述&lt;/p&gt;
&lt;p&gt;已经复杂到天际了, 而厂商们还发明了各种更加复杂 &lt;span class="caps"&gt;WAF&lt;/span&gt; 语法,
只是为了表述类似 &lt;code&gt;if-else&lt;/code&gt; 的逻辑&lt;/p&gt;
&lt;p&gt;那么为什么不创建我们这样简洁的 &lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;&lt;img alt="p72" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide71_it%E2%80%99s-a-Lua-based-language-2.png"&gt;&lt;/p&gt;
&lt;p&gt;这样的语法就干净很多:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也支持短路:如果第一条匹配了,就跳过后续的&lt;/li&gt;
&lt;li&gt;本质上只是个 &lt;code&gt;if-else&lt;/code&gt; 不必要进行深度嵌套&lt;/li&gt;
&lt;li&gt;如果查阅其它 &lt;span class="caps"&gt;CDN&lt;/span&gt; 厂商的 &lt;span class="caps"&gt;VSL&lt;/span&gt; 代码&lt;ul&gt;
&lt;li&gt;其实就是一堆堆的 &lt;code&gt;if-else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;是的,&amp;nbsp;很疯狂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="or_2"&gt;&lt;span class="caps"&gt;OR&lt;/span&gt; 的目标&lt;a class="headerlink" href="#or_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="p73" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide73_Model-View-Controller.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式 ~ 不同种类的商业系统都有内在相似的模型,从而抽象为一个 &lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;视图 ~ 已经完成很多种模板语言,都是 &lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;控制 ~ 也已经展示了, 通过规则的描述可以简洁的完成 &lt;span class="caps"&gt;WAF&lt;/span&gt;&amp;nbsp;业务的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p74" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide74_SportLang.png"&gt;&lt;/p&gt;
&lt;p&gt;运动类游戏当然也可以拥有自己的语言,&amp;nbsp;来描述业务系统.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;还能更 COOL 嘛?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们作为软件行业的专业人士,
讲真, 强迫其它行业用户(如物理/数学/建筑/哲学&amp;#8230;)来使用计算机语言,&amp;nbsp;这本身算是种耻辱吧.&lt;/p&gt;
&lt;p&gt;理想情景中,&amp;nbsp;我们应该支持用户:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用他们熟悉的领域语言&lt;/li&gt;
&lt;li&gt;自然的描述&lt;/li&gt;
&lt;li&gt;而机器可以理解并运算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且,&amp;nbsp;同时:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;还包含了大量的自动优化过程&lt;/li&gt;
&lt;li&gt;毕竟这不是每个程序猿都知道的技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p75" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide75_The-Y-Language.png"&gt;&lt;/p&gt;
&lt;p&gt;当前我们内部已经在使用 Y&amp;nbsp;语言:&lt;/p&gt;
&lt;p&gt;这是全新的能调试多种语言的工具, 类似 &lt;span class="caps"&gt;GDB&lt;/span&gt;, SystemTap,&amp;nbsp;LuaJIT&lt;/p&gt;
&lt;p&gt;&lt;img alt="p76" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide76_CoffeeScript.png"&gt;&lt;/p&gt;
&lt;p&gt;另外也支持 CoffeeScript&amp;nbsp;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;毕竟 CoffeeScript&amp;nbsp;很受欢迎&lt;/li&gt;
&lt;li&gt;这种 &lt;span class="caps"&gt;DSL&lt;/span&gt; 可以生成 &lt;span class="caps"&gt;JS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;现在我们可以从 CoffeeScript 生成 OpenResty Lua&amp;nbsp;代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p77" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide77_A-Meta-DSL.png"&gt;&lt;/p&gt;
&lt;p&gt;我们也有元DSL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来生成其它所有 &lt;span class="caps"&gt;DSL&lt;/span&gt; 的 &lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;包含 元DSL&amp;nbsp;本身&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们还有创建编译器的 &lt;span class="caps"&gt;DSL&lt;/span&gt;,&amp;nbsp;能生成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;编译器&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;优化器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perl 一直是 春哥 的第一序列武器,
但是,并一定是最好的,
最终可能为构建编译创建专用 &lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="p78" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide78_Clean-Separation.png"&gt;&lt;/p&gt;
&lt;p&gt;我们可以在业务描述和业务实现间进行清晰的隔离.&lt;/p&gt;
&lt;p&gt;这意味着我们可以一夜之间,&amp;nbsp;完成业务系统实现技术桟的切换,而不用触动具体的业务代码.&lt;/p&gt;
&lt;p&gt;比如说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以将当前运行在 OpenResty&amp;nbsp;上的业务系统&lt;/li&gt;
&lt;li&gt;一键迁移到 C&amp;nbsp;甚至于汇编代码上&lt;/li&gt;
&lt;li&gt;而不会变动业务逻辑&lt;/li&gt;
&lt;li&gt;甚至于将来迁移到新技术桟上, 也不用改变业务代码&lt;ul&gt;
&lt;li&gt;只需要编写一个新的后端优化器&lt;/li&gt;
&lt;li&gt;并添加到现有的 &lt;span class="caps"&gt;DSL&lt;/span&gt;&amp;nbsp;编译器中就好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="p79" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide79_Compiling-Style-Web-Frameworks.png"&gt;&lt;/p&gt;
&lt;p&gt;此外, 我们也将获得全新的 web&amp;nbsp;应用框架:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译型的&lt;/li&gt;
&lt;li&gt;不再依赖一层层的嵌套,&amp;nbsp;从而令开发运行都越来越慢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们必须同时实现美丽和效率:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是未来商业产品级工程的必须特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="p80" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide80_The-Best-Language.png"&gt;&lt;/p&gt;
&lt;p&gt;最好的语言就是 &lt;code&gt;商业语言&lt;/code&gt; 正如春哥意识到的&lt;/p&gt;
&lt;p&gt;基于商业语言开发,还有一个好处就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一但完成了一个 &lt;span class="caps"&gt;DSL&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;将一些业务逻辑放入后&lt;/li&gt;
&lt;li&gt;如果有幸拿到客户原始需求文档&lt;/li&gt;
&lt;li&gt;两厢对比,发现接近&lt;/li&gt;
&lt;li&gt;就意味着作对了&amp;nbsp;;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实,&amp;nbsp;还有最好的方式来描述具体的领域问题:&lt;/p&gt;
&lt;p&gt;&lt;img alt="p81" src="https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide81_The-Machine-Truly-Understands-Business-Logic.png"&gt;&lt;/p&gt;
&lt;p&gt;是的, 只有机器真正理解你的业务逻辑,&amp;nbsp;那么:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以获得比以往更多的嗯哼&lt;/li&gt;
&lt;li&gt;比如自动生成测试用例&lt;/li&gt;
&lt;li&gt;完成上下文分析&lt;/li&gt;
&lt;li&gt;或者干脆为你即时生成真正可运行的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这, 才是 OpenResty&amp;nbsp;真正的目标:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逼所有程序猿变成产品经理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;h2 id="tlog"&gt;TLog&lt;a class="headerlink" href="#tlog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;.5h&amp;nbsp;决定嗯哼&lt;/li&gt;
&lt;li&gt;2.h&amp;nbsp;完成上篇&lt;/li&gt;
&lt;li&gt;2.5h&amp;nbsp;完成下篇&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="speech"></category><category term="openresty"></category><category term="agentzh"></category><category term="ngx"></category></entry><entry><title>PyQt4 之消失在 Sierra</title><link href="https://blog.zoomquiet.io/pyqt4macos.html" rel="alternate"></link><published>2017-08-08T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2017-08-08:/pyqt4macos.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;嗯哼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;原来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最近在折腾 Qt , 因为在 mac 中开发运行在 win10 中,
用 PyQt&amp;nbsp;是必然选择哪.&lt;/p&gt;
&lt;p&gt;只是项目是老坑, 所以,没用 Qt5 技术桟, 还是&amp;nbsp;Qt4&lt;/p&gt;
&lt;h2 id="_2"&gt;嗯哼&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这天要折腾 &lt;span class="caps"&gt;QR&lt;/span&gt;&amp;nbsp;码识别了&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;brew install zbar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后,各种问题就爆发了,特别是:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libjpeg.8.dylib&lt;/code&gt; 加载不到&lt;/li&gt;
&lt;li&gt;PyQt4&amp;nbsp;镜像丢失&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新安装 pyqt 时才发现只有 5.1 系列的 Qt/PyQt&amp;nbsp;可以安装了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;原来&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参考 …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;嗯哼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;原来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;更新&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最近在折腾 Qt , 因为在 mac 中开发运行在 win10 中,
用 PyQt&amp;nbsp;是必然选择哪.&lt;/p&gt;
&lt;p&gt;只是项目是老坑, 所以,没用 Qt5 技术桟, 还是&amp;nbsp;Qt4&lt;/p&gt;
&lt;h2 id="_2"&gt;嗯哼&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这天要折腾 &lt;span class="caps"&gt;QR&lt;/span&gt;&amp;nbsp;码识别了&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;brew install zbar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后,各种问题就爆发了,特别是:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libjpeg.8.dylib&lt;/code&gt; 加载不到&lt;/li&gt;
&lt;li&gt;PyQt4&amp;nbsp;镜像丢失&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新安装 pyqt 时才发现只有 5.1 系列的 Qt/PyQt&amp;nbsp;可以安装了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;原来&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参考:&lt;a href="https://github.com/cartr/homebrew-qt4"&gt;cartr/homebrew-qt4: Homebrew tap for Qt4 and dependent formulae on&amp;nbsp;Sierra&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/spesmilo/electrum/issues/2001"&gt;Build on macOS Sierra 10.12 without pyqt4? · Issue #2001 ·&amp;nbsp;spesmilo/electrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/robdvr/271e34785c8a43b1e093d2ee8e612aee"&gt;How to install &lt;span class="caps"&gt;QT4&lt;/span&gt;, Poppler, and Cairo on MacOS Sierra&amp;nbsp;10.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/36615952/how-can-i-install-pyqt4-for-python-2-7"&gt;osx - How can i install PyQT4 for Python 2.7? - Stack&amp;nbsp;Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要想继续嗯哼&amp;nbsp;PyQt4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="n"&gt;cartr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qt4&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="n"&gt;cartr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qt4&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;qt&lt;/span&gt;&lt;span class="mi"&gt;@4&lt;/span&gt;
&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cartr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qt4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyqt&lt;/span&gt;&lt;span class="mi"&gt;@4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后继续的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uC2710&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="err"&gt;༽&lt;/span&gt;
&lt;span class="err"&gt;༄&lt;/span&gt;  &lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="n"&gt;PyQt4&lt;/span&gt;
&lt;span class="n"&gt;lrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;zoomq&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;  &lt;span class="mi"&gt;66&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;PyQt4&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyqt&lt;/span&gt;&lt;span class="mi"&gt;@4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;4.12&lt;/span&gt;&lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PyQt4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是的, 要在 pyenv 中使用 brew 安装的 pyqt&amp;nbsp;得:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在对应版本环境的 site-packages 中使用 &lt;code&gt;ln -s&lt;/code&gt; 关联到系统环境的库&lt;/li&gt;
&lt;li&gt;就 Qt 而言要链接两个东西:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sip.so -&amp;gt; /usr/local/Cellar/sip/4.19.3_1/lib/python2.7/site-packages/sip.so&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyQt4 -&amp;gt; /usr/local/Cellar/pyqt@4/4.12_1/lib/python2.7/site-packages/PyQt4/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;同理: OpenCV&amp;nbsp;也一样:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 brew&amp;nbsp;一致安全稳定的自动化编译安装到系统环境中&lt;/li&gt;
&lt;li&gt;然后, 手工通过链接形式加载到对应 pyenv&amp;nbsp;版本环境中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以, macOS 本质是 &lt;span class="caps"&gt;UNIX&lt;/span&gt; 系统,
用 linux 的环境配置思路是好的,
但是,又为了易用, macOS 也进行了各种妥协,&amp;nbsp;好在程序猿界总是能第一时间给出对应的嗯哼&lt;/p&gt;
&lt;p&gt;只是不通过 google&amp;nbsp;简直了,不知道何时才能从弥散回来的文章中知道嗯哼&amp;#8230;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请上苍保祐能翻墙的人民吧&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;更新&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;170809&amp;nbsp;blogging&lt;/li&gt;
&lt;li&gt;170808&amp;nbsp;inti.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="mac"></category><category term="pyqt"></category><category term="howto"></category><category term="sierra"></category></entry><entry><title>Leo 5.4 theme custom</title><link href="https://blog.zoomquiet.io/leo5theme-key-words.html" rel="alternate"></link><published>2016-11-17T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-11-17:/leo5theme-key-words.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;现象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;记要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;logging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.zoomquiet.io/leo5theme.html"&gt;Leo 5.2 theme&amp;nbsp;custom&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Leo 是灵活的完全 Pythonic 的可定制 &lt;code&gt;文学化编辑环境&lt;/code&gt; &amp;#8230;&lt;/p&gt;
&lt;p&gt;所以,其定制的进展是无限的&amp;#8230;&lt;/p&gt;
&lt;h2 id="_2"&gt;现象&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在完成了基本的 theme&amp;nbsp;定制后发现&lt;/li&gt;
&lt;li&gt;默认语法元素的颜色,不太理想&lt;/li&gt;
&lt;li&gt;特别是: &lt;a href="http://leoeditor.com/cheatsheet.html#id13"&gt;&amp;lt;&lt;Sections&gt;&amp;gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;可以将下层节点放置在任何想放置的地方的引入点声明&lt;/li&gt;
&lt;li&gt;但是,这里 &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; 两端符号的颜色是默认兰色&lt;/li&gt;
&lt;li&gt;在暗色背景中看不清楚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可能一时没能找到配置处&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;解决&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过社区列表咨询&lt;ul&gt;
&lt;li&gt;2天后收到各种建议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;才知道是俺使用 Leo 的配置文件过老&lt;ul&gt;
&lt;li&gt;导致新版本的全局 theme&amp;nbsp;定义节点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lThemes: copy to last top-level setting in myLeoSettings.leo--&amp;gt;Common …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;现象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;记要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;logging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.zoomquiet.io/leo5theme.html"&gt;Leo 5.2 theme&amp;nbsp;custom&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Leo 是灵活的完全 Pythonic 的可定制 &lt;code&gt;文学化编辑环境&lt;/code&gt; &amp;#8230;&lt;/p&gt;
&lt;p&gt;所以,其定制的进展是无限的&amp;#8230;&lt;/p&gt;
&lt;h2 id="_2"&gt;现象&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在完成了基本的 theme&amp;nbsp;定制后发现&lt;/li&gt;
&lt;li&gt;默认语法元素的颜色,不太理想&lt;/li&gt;
&lt;li&gt;特别是: &lt;a href="http://leoeditor.com/cheatsheet.html#id13"&gt;&amp;lt;&lt;Sections&gt;&amp;gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;可以将下层节点放置在任何想放置的地方的引入点声明&lt;/li&gt;
&lt;li&gt;但是,这里 &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; 两端符号的颜色是默认兰色&lt;/li&gt;
&lt;li&gt;在暗色背景中看不清楚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可能一时没能找到配置处&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;解决&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过社区列表咨询&lt;ul&gt;
&lt;li&gt;2天后收到各种建议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;才知道是俺使用 Leo 的配置文件过老&lt;ul&gt;
&lt;li&gt;导致新版本的全局 theme&amp;nbsp;定义节点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lThemes: copy to last top-level setting in myLeoSettings.leo--&amp;gt;Common to all themes--&amp;gt;Colors for Leo constructs (all themes)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;没有部署在 &lt;code&gt;@setting&lt;/code&gt; 下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;立即复制过去&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@color section_name_brackets_color = orange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;就将对应符号颜色定义为 橙色&amp;nbsp;了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;记要&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要有信心,可配置的&lt;/li&gt;
&lt;li&gt;要认真向社区咨询&lt;/li&gt;
&lt;li&gt;要大胆的实验&lt;/li&gt;
&lt;li&gt;毕竟,编辑环境任何一点的改进,都对编程过程带来无法衡量的心理支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="logging"&gt;logging&lt;a class="headerlink" href="#logging" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;160921&amp;nbsp;感觉到问题&lt;/li&gt;
&lt;li&gt;161011&amp;nbsp;有空尝试解决&lt;/li&gt;
&lt;li&gt;161111&amp;nbsp;通过社区解决&lt;/li&gt;
&lt;li&gt;161201&amp;nbsp;才有空补全&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="python"></category><category term="howto"></category><category term="leo"></category><category term="theme"></category></entry><entry><title>天然样循环</title><link href="https://blog.zoomquiet.io/nedbat-loop-iter.html" rel="alternate"></link><published>2016-05-31T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-05-31:/nedbat-loop-iter.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;迭代基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#list-elements"&gt;list ⇒&amp;nbsp;elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings-characters"&gt;Strings ⇒&amp;nbsp;characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dicts-keys"&gt;Dicts ⇒&amp;nbsp;keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#files-lines"&gt;Files ⇒&amp;nbsp;lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;标准库中有趣的迭代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;其它的迭代形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;基本设问&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#q"&gt;Q: 如何获得索引号?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#enumerate"&gt;enumerate()&amp;nbsp;制造好用的值对&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vs"&gt;迭代 vs&amp;nbsp;索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#q_1"&gt;Q: 如何对两个列表循环?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#zip"&gt;zip()&amp;nbsp;生成弱对关系循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dict"&gt;dict()&amp;nbsp;是接收一对流的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;最赞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;自制迭代&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;生成自有迭代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;生成器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#evens-generator"&gt;Evens&amp;nbsp;generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;对迭代提炼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#q_2"&gt;Q: 如何从两层循环中退出?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a"&gt;A:&amp;nbsp;合并循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better"&gt;Better:&amp;nbsp;单元迭代&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;底层迭代&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_11"&gt;迭代基层操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;构造自制对象可迭代&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#iter"&gt;iter&amp;nbsp;生成器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;(￣▽￣)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;是也乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;来自 @nedbat&amp;nbsp;的分享:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nedbatchelder.com/text/iter.html"&gt;Ned Batchelder: Loop …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;迭代基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#list-elements"&gt;list ⇒&amp;nbsp;elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strings-characters"&gt;Strings ⇒&amp;nbsp;characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dicts-keys"&gt;Dicts ⇒&amp;nbsp;keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#files-lines"&gt;Files ⇒&amp;nbsp;lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;标准库中有趣的迭代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;其它的迭代形式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;基本设问&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#q"&gt;Q: 如何获得索引号?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#enumerate"&gt;enumerate()&amp;nbsp;制造好用的值对&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vs"&gt;迭代 vs&amp;nbsp;索引&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#q_1"&gt;Q: 如何对两个列表循环?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#zip"&gt;zip()&amp;nbsp;生成弱对关系循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dict"&gt;dict()&amp;nbsp;是接收一对流的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;最赞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;自制迭代&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_7"&gt;生成自有迭代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;生成器&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#evens-generator"&gt;Evens&amp;nbsp;generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;对迭代提炼&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#q_2"&gt;Q: 如何从两层循环中退出?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a"&gt;A:&amp;nbsp;合并循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better"&gt;Better:&amp;nbsp;单元迭代&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;底层迭代&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_11"&gt;迭代基层操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;构造自制对象可迭代&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#iter"&gt;iter&amp;nbsp;生成器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;(￣▽￣)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;是也乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;来自 @nedbat&amp;nbsp;的分享:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nedbatchelder.com/text/iter.html"&gt;Ned Batchelder: Loop Like A&amp;nbsp;Native&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;迭代基础&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;偏门:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;蠎样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for v in my_list:&lt;/span&gt;
&lt;span class="err"&gt;    print v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;模式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for name in iterable:&lt;/span&gt;
&lt;span class="err"&gt;    statements&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;可 &lt;code&gt;iterable&lt;/code&gt; 的对象可以生成值流&lt;/li&gt;
&lt;li&gt;对迭代对象的每次操作&lt;/li&gt;
&lt;li&gt;由对象决定是什么值&lt;/li&gt;
&lt;li&gt;Python&amp;nbsp;中太多对象可以直接迭代的&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="list-elements"&gt;list ⇒ elements&lt;a class="headerlink" href="#list-elements" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="strings-characters"&gt;Strings ⇒ characters&lt;a class="headerlink" href="#strings-characters" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;

&lt;span class="n"&gt;H&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="dicts-keys"&gt;Dicts ⇒ keys&lt;a class="headerlink" href="#dicts-keys" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;当然顺序是没有的&lt;/li&gt;
&lt;li&gt;以及:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for v in d.itervalues():&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for k,v in d.iteritems():&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;专用形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="files-lines"&gt;Files ⇒ lines&lt;a class="headerlink" href="#files-lines" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;gettysburg.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;Four-score and seven years ago,\n&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;our fathers brought forth on this continent\n&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;a new nation,\n&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;conceived in liberty,\n&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;and dedicated to the proposition\n&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;that all men are created equal.\n&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;标准库中有趣的迭代&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;正则表达式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for match in re.finditer(pattern, string):&lt;/span&gt;
&lt;span class="err"&gt;    # once for each regex match...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文件系统:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for root, dirs, files in os.walk(&amp;#39;/some/dir&amp;#39;):&lt;/span&gt;
&lt;span class="err"&gt;    # once for each sub-directory...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;迭代工具:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# once for each integer... Infinite!&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;
&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# 17, 17, 17, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;其它的迭代形式&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;combined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;基本设问&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="q"&gt;Q: 如何获得索引号?&lt;a class="headerlink" href="#q" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;别:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;赞:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="enumerate"&gt;enumerate() 制造好用的值对&lt;a class="headerlink" href="#enumerate" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Eiffel Tower&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Empire State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sears Tower&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Eiffel Tower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Empire State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sears Tower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;Eiffel&lt;/span&gt; &lt;span class="n"&gt;Tower&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;Empire&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Sears&lt;/span&gt; &lt;span class="n"&gt;Tower&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="vs"&gt;迭代 vs 索引&lt;a class="headerlink" href="#vs" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;受限:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;indexing&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更强:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;linenum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C样坏形:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;i = 0&lt;/span&gt;
&lt;span class="err"&gt;for v in iterable:&lt;/span&gt;
&lt;span class="err"&gt;    print i, v&lt;/span&gt;
&lt;span class="err"&gt;    i += 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="q_1"&gt;Q: 如何对两个列表循环?&lt;a class="headerlink" href="#q_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;quot;Eiffel Tower&amp;quot;, &amp;quot;Empire State&amp;quot;, &amp;quot;Sears Tower&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;heights&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;324, 381, 442&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;heights&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;%s: %s meters&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;Eiffel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Tower&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Empire&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;State&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;381&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Sears&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Tower&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;442&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;meters&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="zip"&gt;zip() 生成弱对关系循环&lt;a class="headerlink" href="#zip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;将一对循环,变成一个流循环:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heights&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;%s: %s meters&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Eiffel&lt;/span&gt; &lt;span class="n"&gt;Tower&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;324&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt;
&lt;span class="n"&gt;Empire&lt;/span&gt; &lt;span class="k"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;381&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt;
&lt;span class="n"&gt;Sears&lt;/span&gt; &lt;span class="n"&gt;Tower&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;442&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="dict"&gt;dict() 是接收一对流的&lt;a class="headerlink" href="#dict" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Eiffel Tower&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Empire State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Sears Tower&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;heights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;381&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;442&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heights&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Empire State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;381&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;Sears Tower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;442&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;Eiffel Tower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_5"&gt;最赞&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;tall_buildings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;&amp;quot;Empire State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;381&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Sears Tower&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;442&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;&amp;quot;Burj Khalifa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;828&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Taipei 101&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;509&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tall_buildings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="mi"&gt;828&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tall_buildings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Burj Khalifa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;828&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tall_buildings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tall_buildings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Burj Khalifa&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_6"&gt;自制迭代&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="_7"&gt;生成自有迭代&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;them&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_8"&gt;生成器&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;函式返回一个值 &amp;#8212;&amp;gt;&amp;nbsp;生成器生成一个流&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="n"&gt;Hello&lt;/span&gt;
&lt;span class="n"&gt;world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="evens-generator"&gt;Evens generator&lt;a class="headerlink" href="#evens-generator" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_9"&gt;对迭代提炼&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;~ Abstracting your&amp;nbsp;iteration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;my_config.ini&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;interesting&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自制生成器:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;interesting_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;my_config.ini&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;interesting_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;my_other.dat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;interesting_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="q_2"&gt;Q: 如何从两层循环中退出?&lt;a class="headerlink" href="#q_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spreadsheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this_is_my_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;break&lt;/span&gt;   &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="o"&gt;???&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="a"&gt;A: 合并循环&lt;a class="headerlink" href="#a" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;range_2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;&amp;quot;&amp;quot;Produce a stream of two-D coordinates.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range_2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spreadsheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this_is_my_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="better"&gt;Better: 单元迭代&lt;a class="headerlink" href="#better" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;spreadsheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this_is_my_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_10"&gt;底层迭代&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可迭代: 能生成迭代 Iterable: produces an&amp;nbsp;iterator&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迭代器: 生成一个值流 Iterator: produces a stream of&amp;nbsp;values&lt;/p&gt;
&lt;p&gt;iterator = iter(iterable)  # iterable.&lt;strong&gt;iter&lt;/strong&gt;()
value = next(iterator)     # iterator.next() or .&lt;strong&gt;next&lt;/strong&gt;()
value = next(iterator)&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;迭代器仅有一个操作: &lt;code&gt;next()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_11"&gt;迭代基层操作&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有时很有用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;blah.dat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Read&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
    &lt;span class="n"&gt;header_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Read&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data_line&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_12"&gt;构造自制对象可迭代&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ToDoList&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;tasks&lt;/span&gt; = []

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__iter__&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;tasks&lt;/span&gt;)

&lt;span class="nb"&gt;todo&lt;/span&gt; = &lt;span class="n"&gt;ToDoList&lt;/span&gt;()
...
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="nb"&gt;in&lt;/span&gt; &lt;span class="n"&gt;todo:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;仅仅需要定义 &lt;code&gt;__iter__()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="iter"&gt;&lt;strong&gt;iter&lt;/strong&gt; 生成器&lt;a class="headerlink" href="#iter" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ToDoList&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;tasks&lt;/span&gt; = []

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__iter__&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="nb"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;tasks:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;.&lt;span class="n"&gt;done:&lt;/span&gt;
                &lt;span class="nb"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;tasks&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;done&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; (&lt;span class="nb"&gt;t&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt; &lt;span class="nb"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;.&lt;span class="nb"&gt;done&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_13"&gt;(￣▽￣)&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;迭代无处不在&lt;/li&gt;
&lt;li&gt;Python&amp;nbsp;内置了干净强大的模型支持迭代&lt;/li&gt;
&lt;li&gt;抽象和定制你的迭代吧!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_14"&gt;是也乎&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;160613&amp;nbsp;空先发&lt;/li&gt;
&lt;li&gt;160531&amp;nbsp;动念&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="pythonic"></category><category term="pythoneer"></category><category term="loop"></category><category term="coder"></category></entry><entry><title>如何在 Leo 中协作?!</title><link href="https://blog.zoomquiet.io/how2collaborate-with-leo.html" rel="alternate"></link><published>2016-04-17T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-04-17:/how2collaborate-with-leo.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#leo"&gt;Leo?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#literate-programming"&gt;Literate&amp;nbsp;Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collaborate-problem"&gt;collaborate&amp;nbsp;problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#terror-story"&gt;terror&amp;nbsp;story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clean-all"&gt;clean&amp;nbsp;all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#historic"&gt;historic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;是也乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="leo"&gt;Leo?&lt;a class="headerlink" href="#leo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;~&amp;nbsp;嗯哼&lt;/p&gt;
&lt;p&gt;研究什么是 Leo ?&amp;nbsp;非要一句话说清查的话,只能是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;纯 Python 构建的文学化编辑环境&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;好吧, 那什么是 &lt;code&gt;文学化编辑&lt;/code&gt; ?&lt;/li&gt;
&lt;li&gt;这事儿,&amp;nbsp;俺就没办法说清楚了&amp;#8230;.&lt;/li&gt;
&lt;li&gt;根据俺一向的宣称: &lt;code&gt;教不会别人的,一定也是自己并不真正理解的&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这点,俺认!&lt;ul&gt;
&lt;li&gt;参考: &lt;a href="http://wiki.woodpecker.org.cn/moin/LeoEnvironment"&gt;LeoEnvironment - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以及 &lt;a href="http://wiki.woodpecker.org.cn/moin/ZqStudy/MyLearningSkill#Leo"&gt;ZqStudy/MyLearningSkill - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就知道, 俺从 05 年上了船&amp;#8230;就一直反复的四处宣传 Leo …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#leo"&gt;Leo?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#literate-programming"&gt;Literate&amp;nbsp;Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collaborate-problem"&gt;collaborate&amp;nbsp;problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#terror-story"&gt;terror&amp;nbsp;story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clean-all"&gt;clean&amp;nbsp;all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#historic"&gt;historic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;是也乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="leo"&gt;Leo?&lt;a class="headerlink" href="#leo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;~&amp;nbsp;嗯哼&lt;/p&gt;
&lt;p&gt;研究什么是 Leo ?&amp;nbsp;非要一句话说清查的话,只能是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;纯 Python 构建的文学化编辑环境&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;好吧, 那什么是 &lt;code&gt;文学化编辑&lt;/code&gt; ?&lt;/li&gt;
&lt;li&gt;这事儿,&amp;nbsp;俺就没办法说清楚了&amp;#8230;.&lt;/li&gt;
&lt;li&gt;根据俺一向的宣称: &lt;code&gt;教不会别人的,一定也是自己并不真正理解的&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这点,俺认!&lt;ul&gt;
&lt;li&gt;参考: &lt;a href="http://wiki.woodpecker.org.cn/moin/LeoEnvironment"&gt;LeoEnvironment - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以及 &lt;a href="http://wiki.woodpecker.org.cn/moin/ZqStudy/MyLearningSkill#Leo"&gt;ZqStudy/MyLearningSkill - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就知道, 俺从 05 年上了船&amp;#8230;就一直反复的四处宣传 Leo 的舒爽&amp;#8230;&lt;ul&gt;
&lt;li&gt;可惜,一直就没有找到一个真正 &lt;code&gt;直指人心&lt;/code&gt; 的 文学化编辑/程&amp;nbsp;的描述姿势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好吧,再次尝试一下:&lt;/p&gt;
&lt;h2 id="literate-programming"&gt;Literate Programming&lt;a class="headerlink" href="#literate-programming" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ &lt;a href="http://wiki.woodpecker.org.cn/moin/LiterateProgramming"&gt;文学编程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先请出 &lt;a href="http://leoeditor.com/leo_toc.html"&gt;Leo&lt;/a&gt; 创始人 令德华(&lt;a href="http://leoeditor.com/ekr.html"&gt;Edward K. Ream&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;~ 老令公 在 PyCon2013China 大会上分享的视频 &lt;a href="http://zoomq.qiniudn.com/pychina/PyCon2013China/PyConChina2013-EKR-final-v2.mp4"&gt;PyConChina2013-&lt;span class="caps"&gt;EKR&lt;/span&gt;-intro-Leo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不那么简单的说就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文学化编程,&amp;nbsp;超脱具体编程语言的语法规定&lt;/li&gt;
&lt;li&gt;以人的思维结构为记述形式,&amp;nbsp;进行好象文学创作一样的编程!&lt;/li&gt;
&lt;li&gt;其具体现实:&lt;ul&gt;
&lt;li&gt;利用类似 &lt;code&gt;&amp;lt;&amp;lt;此处有惊喜&amp;gt;&amp;gt;&lt;/code&gt; 的结构标注符&lt;/li&gt;
&lt;li&gt;在源代码中,替代各种级别的代码块&lt;/li&gt;
&lt;li&gt;将程序的编写和源文件的储存格式分离了&lt;ul&gt;
&lt;li&gt;在代码撰写界面中,面对的是完全个性化的抽象结构描述&lt;/li&gt;
&lt;li&gt;同时,又可以随时进入自定逻辑区间内,&amp;nbsp;填充标准语法的源代码&lt;/li&gt;
&lt;li&gt;最后,自动将所有 结构标注符&amp;nbsp;在输出的源文件中展开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这样,同时兼顾了人的自然思维表述,和严格语法要求的源代码形式 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是的, 这一思想源自 &lt;img alt="Donald E. Knuth" src="http://www-cs-faculty.stanford.edu/~knuth/chop.gif"&gt;, 他原创的 &lt;span class="caps"&gt;WEB&lt;/span&gt; 语言最早实现了&amp;nbsp;文学化编程&lt;/li&gt;
&lt;li&gt;Leo 则是 Python 实现的,可能是最易用的 文学化编辑/程&amp;nbsp;环境!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Leo4" src="http://leoeditor.com/_static/Leo4-80-border.jpg"&gt;&lt;/p&gt;
&lt;h2 id="collaborate-problem"&gt;collaborate problem&lt;a class="headerlink" href="#collaborate-problem" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~&amp;nbsp;如果前述解释看不懂,那就对了!&lt;/p&gt;
&lt;p&gt;但是,不影响,俺的故事分享&amp;#8230;&lt;/p&gt;
&lt;p&gt;Leo 包含的编程思想这么 bigger ,一般人在 &lt;span class="caps"&gt;IDE&lt;/span&gt; 环境中,当然是无法理解,
也没有动力尝试的&amp;#8230;
所以, 早在 2013 年, Leo 列表中, &lt;span class="caps"&gt;EKR&lt;/span&gt;&amp;nbsp;就有相应思考&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;Edward&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Ream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;edreamleo&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;leo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;googlegroups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;leo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;googlegroups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;Thu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="n"&gt;PM&lt;/span&gt;
&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;collaborate&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Leo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了讨论时,更加友好,老令公&amp;nbsp;创造了两个人事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能享受文学化编程的 Leo 用户 称为 Leonine (L Leo users, Leonard&amp;nbsp;&amp;#8230;)&lt;/li&gt;
&lt;li&gt;还没有理解 Leo 的其它程序猿 称为 Nancy (N non-Leo&amp;nbsp;users)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当时,大家一致的共识:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了 Leo 良好工作, 最终源代码中包含的 结构注释(Sentinels)&amp;nbsp;是必须的&lt;/li&gt;
&lt;li&gt;但是, 对于 Nancy 而言 Sentinels&amp;nbsp;是无意义的混乱字符&lt;/li&gt;
&lt;li&gt;所以,若要 Leonine 们能和 Nancy&amp;nbsp;们愉快的一起工作,必须解决这一矛盾!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三年前,俺提议的是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用类似 hg/git 仓库的 hooks&amp;nbsp;机制&lt;/li&gt;
&lt;li&gt;在提交仓库前,通过 hooks 脚本,自动的完成 L-&amp;gt;N&amp;nbsp;两型代码的互转化&lt;/li&gt;
&lt;li&gt;确保, Leonine 们在 Leo&amp;nbsp;中,有正确的团队代码,以及自己的结构记述&lt;/li&gt;
&lt;li&gt;同时, Nancy 们永远不知道 Leo&amp;nbsp;的存在!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题在:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本管理系统很多,每种都有自个儿的 hooks&amp;nbsp;机制&lt;/li&gt;
&lt;li&gt;要想真正实用化这种自动机制, Leo 社区要维护越来越多的 hooks&amp;nbsp;脚本&lt;/li&gt;
&lt;li&gt;同时,还得想办法减少每次进行个团队仓库时的配置工作&lt;/li&gt;
&lt;li&gt;嗯哼,想想都是越来越多的任务&amp;#8230;&lt;/li&gt;
&lt;li&gt;所以,当年 老令公 曰:&lt;ul&gt;
&lt;li&gt;此法妙&lt;/li&gt;
&lt;li&gt;然俺无空&lt;/li&gt;
&lt;li&gt;谁想上,谁上&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;:
所谓 &lt;code&gt;结构注释&lt;/code&gt; 其实就是标准注释,类似:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#@+&amp;lt;&amp;lt;imports&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;#@+node:zoomq.20160416174346.3: ** &amp;lt;&amp;lt;imports&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;#@+others&lt;/span&gt;
&lt;span class="err"&gt;#@+node:zoomq.20160416174346.4: *3* in-build&lt;/span&gt;
&lt;span class="err"&gt;#@+node:zoomq.20160416174346.5: *3* 3party&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然吻合对应语言的注释约定 (嗯哼, Leo 可以进行任何语言的编程,不仅仅是 Py);
其实,就是将 Leo (.leo 文件本身其实就是 xml) 中,树形节点的结构描述,&amp;nbsp;转化为线性注释而已.&lt;/p&gt;
&lt;h2 id="terror-story"&gt;terror story&lt;a class="headerlink" href="#terror-story" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ 于是,&amp;nbsp;发生了这样的恐怖故事&amp;#8230;&lt;/p&gt;
&lt;p&gt;之前,俺知道 Leo 中有种 &lt;code&gt;@shadow&lt;/code&gt; 指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Leo&amp;nbsp;中,标注在文件节点名前&lt;/li&gt;
&lt;li&gt;形如: &lt;code&gt;@shadow path/2/foo.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进行保存时,将自动作以下操作:&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;path/2/&lt;/code&gt; 中建立 &lt;code&gt;path/2/.leo_shadow&lt;/code&gt; 隐藏目录&lt;/li&gt;
&lt;li&gt;在其中输出 &lt;code&gt;path/2/.leo_shadow/xfoo.py&lt;/code&gt; 包含 &lt;code&gt;结构注释&lt;/code&gt; 的源代码文件&lt;/li&gt;
&lt;li&gt;同时输出 &lt;code&gt;path/2/foo.py&lt;/code&gt; 干净的,不包含 &lt;code&gt;结构注释&lt;/code&gt; 的源代码文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这样,通过 git 工具提交到团队仓库时&lt;ul&gt;
&lt;li&gt;Leonine 通过 &lt;code&gt;.leo_shadow&lt;/code&gt; 中的文件确保 Leo&amp;nbsp;中结构树的可用&lt;/li&gt;
&lt;li&gt;Nancy 们继续用 &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;环境维护自然的干净的只有语法结构而没有思维结构的源代码文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以,在团队代码仓库中,俺自信的将 .leo 文件也放了进来,
并对管理的所有代码节点, 前缀了&lt;code&gt;@shadow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;某天, 快乐的部署了 &lt;code&gt;git-flow&lt;/code&gt; 然后,基于 &lt;code&gt;hotfix&lt;/code&gt; 流程,进行每天的开发&amp;#8230;&lt;/p&gt;
&lt;p&gt;杯具就这样种下了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在俺完成了全天的开发,高兴的将上千行代码 &lt;code&gt;git flow hotfix finish&lt;/code&gt; 提交时&lt;/li&gt;
&lt;li&gt;顺利的话应该是:&lt;ul&gt;
&lt;li&gt;自动合并 &lt;code&gt;hotfix/我的修订&lt;/code&gt; 到 &lt;code&gt;develop&lt;/code&gt; 以及 &lt;code&gt;master&lt;/code&gt; 分支&lt;/li&gt;
&lt;li&gt;然后杀掉 &lt;code&gt;hotfix/我的修订&lt;/code&gt; 分支&lt;/li&gt;
&lt;li&gt;最后,人工切换到 &lt;code&gt;master&lt;/code&gt; 分支, &lt;code&gt;git push&lt;/code&gt; 就好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;残念的是:&lt;ul&gt;
&lt;li&gt;git&amp;nbsp;无法自动合并,&lt;/li&gt;
&lt;li&gt;因为 .leo&amp;nbsp;文件在几个分支中差异冲突!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;好吧, 这是必然的,,,虽然没有人修订 .leo 文件,但是,为了尝试各种代码&lt;ul&gt;
&lt;li&gt;过程中,进行了大量的节点调整&lt;/li&gt;
&lt;li&gt;另外, Leo&amp;nbsp;文件是无法共同维护的&lt;/li&gt;
&lt;li&gt;因为,每个人对代码内在逻辑结构的理解是不同的,不能强求&lt;/li&gt;
&lt;li&gt;所以, Leo&amp;nbsp;文件并不必须在仓库中管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以, 俺自然的想到移走 .leo 文件, 再议尝试 &lt;code&gt;hotfix finish&lt;/code&gt; 就好的哪!&lt;ul&gt;
&lt;li&gt;恐怖的是,打开 Leo&amp;nbsp;文件,一片空白!&lt;/li&gt;
&lt;li&gt;一激动按了保存,连外部的 &lt;code&gt;.leo_shadow&lt;/code&gt; 中以及仓库中所有源代码文件也都清空了!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;傻了几分钟后,&amp;nbsp;开始补救:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前被 git-flow 自动跳回了 &lt;code&gt;develop&lt;/code&gt; 分支&lt;/li&gt;
&lt;li&gt;先用 &lt;code&gt;git reset --hard&lt;/code&gt; 恢复工作区状态&lt;/li&gt;
&lt;li&gt;然后, 切换到 &lt;code&gt;hotfix/我的修订&lt;/code&gt; 分支&lt;/li&gt;
&lt;li&gt;将所有 &lt;code&gt;@shadow&lt;/code&gt; 变成 &lt;code&gt;@nosent&lt;/code&gt;, 再保存 .leo 文件&lt;ul&gt;
&lt;li&gt;这才想起来 &lt;code&gt;@shadow&lt;/code&gt; 后, Leo&amp;nbsp;文件中本身就不包含代码文本了&lt;/li&gt;
&lt;li&gt;完全依赖 &lt;code&gt;.leo_shadow&lt;/code&gt; 中包含 &lt;code&gt;结构注释&lt;/code&gt; 的影子文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@nosent&lt;/code&gt; 则相反,输出的文件是干净的,所有信息都在 Leo 文件中&lt;ul&gt;
&lt;li&gt;主要问题在,&amp;nbsp;这是单向的&lt;/li&gt;
&lt;li&gt;如果代码在外部,由其它人员修订了&lt;/li&gt;
&lt;li&gt;Leo&amp;nbsp;是无从得知的,只能人工逐点合并进来&lt;/li&gt;
&lt;li&gt;当然 &lt;code&gt;@shadow&lt;/code&gt; 也有相同问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再移出 .leo 文件,&amp;nbsp;修订其中的目录声明&lt;/li&gt;
&lt;li&gt;再次 &lt;code&gt;git flow hotfix finish&lt;/code&gt; 提交&lt;/li&gt;
&lt;li&gt;呜乎,&amp;nbsp;一切正常了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="clean-all"&gt;clean all&lt;a class="headerlink" href="#clean-all" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~&amp;nbsp;惊魂稍定,想起来当年的讨论&amp;#8230;&lt;/p&gt;
&lt;p&gt;先回顾文档,发现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://leoeditor.com/tutorial-programming.html#summary-clean-vs-file"&gt;Programming with Leo — Leo 5.2 documentation&lt;/a&gt; 也详细阐述了团队中协同的建议:&lt;ul&gt;
&lt;li&gt;如果全体都用 Leo 那么所有文件节点用 &lt;code&gt;@file&lt;/code&gt; 声明&lt;/li&gt;
&lt;li&gt;否则,强烈建议 Leonine 用 &lt;code&gt;@clean&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因为, 去年刚刚完成了 &lt;a href="http://leoeditor.com/appendices.html#the-mulder-ream-update-algorithm"&gt;mulder/ream 更新算法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;原来, Leo 一直使用内置的 &lt;code&gt;difflib&lt;/code&gt; 模块&lt;ul&gt;
&lt;li&gt;基于 &lt;code&gt;Bernhard Mulder&lt;/code&gt; 实现的文本差异算法&lt;/li&gt;
&lt;li&gt;自动将包含 &lt;code&gt;结构注释&lt;/code&gt; 文件的差异,还原入 Leo&amp;nbsp;中的节点树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在, 在以往的基础上, &lt;span class="caps"&gt;EKR&lt;/span&gt;&amp;nbsp;意识到,这种差异不一定非要在实际文件中记述!&lt;/li&gt;
&lt;li&gt;所以,现在的 &lt;code&gt;@clean&lt;/code&gt; 指令进行如下神妙的处理:&lt;ul&gt;
&lt;li&gt;首先,用原先 &lt;code&gt;@file&lt;/code&gt; 指令算法将当前最新节点输出为包含 &lt;code&gt;结构注释&lt;/code&gt; 的文件&lt;/li&gt;
&lt;li&gt;再用相同算法,从外部对应文件读入,解析为 包含 &lt;code&gt;结构注释&lt;/code&gt; 的文件&lt;/li&gt;
&lt;li&gt;最后,用内置的 &lt;code&gt;difflib&lt;/code&gt; 模块对比以上两个文件&lt;/li&gt;
&lt;li&gt;获得好似原先,都用 &lt;code&gt;@file&lt;/code&gt; 指令进行协同时的差异恢复序列&lt;/li&gt;
&lt;li&gt;将外部差异,从 无 &lt;code&gt;结构注释&lt;/code&gt; 的文件合并回来!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ರ_ರ&lt;/code&gt; ! 
这比,俺之前建议的,通过版本系统的 hooks 进行预处理,要更加无感知哪!&amp;nbsp;老令公的脑洞依然给力哪!&lt;/p&gt;
&lt;h2 id="historic"&gt;historic&lt;a class="headerlink" href="#historic" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~ &lt;a href="http://leoeditor.com/history.html#genesis-of-clean"&gt;History of Leo — Leo 5.2&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="EKR" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*yKVZtcJyfh-FHNEtXrqjPw.jpeg"&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1980 接触了 &lt;span class="caps"&gt;CWEB&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;1995&amp;nbsp;决心实现类似软件&lt;/li&gt;
&lt;li&gt;1996~98 在 Apple 的 YellowBox&amp;nbsp;中尝试&lt;/li&gt;
&lt;li&gt;1999~2001 在 Borland C++&amp;nbsp;中折腾&lt;/li&gt;
&lt;li&gt;2001 遇到 Python,快速基于 Tk&amp;nbsp;完成了软件原型!&lt;/li&gt;
&lt;li&gt;2002 使用 &lt;code&gt;@file&lt;/code&gt; 指令来完成代码的汇入/出&lt;/li&gt;
&lt;li&gt;2003 迁移工程进入 SourceForge,正式发行&amp;nbsp;Leo&lt;/li&gt;
&lt;li&gt;2004 4.2发布 解决部分 gnx (Global Node Index) 和 uA (User Attributes)&amp;nbsp;同步问题&lt;/li&gt;
&lt;li&gt;2008&amp;nbsp;增强了几百种功能&lt;/li&gt;
&lt;li&gt;2009 终于和 Tk 友尽,全面迁移到 Qt&amp;nbsp;平台&lt;/li&gt;
&lt;li&gt;2014 5.0 发布! 能和 Vim&amp;nbsp;玩在一起了&lt;/li&gt;
&lt;li&gt;2015 5.1 发布, 这年一月的 &lt;code&gt;Aha&lt;/code&gt; 事件,激发了 &lt;code&gt;@clean&lt;/code&gt; 的诞生&lt;ul&gt;
&lt;li&gt;Leo&amp;nbsp;就此能真正流行开来了!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及: &lt;a href="http://leoeditor.com/leonine-world.html"&gt;The Leonine World — Leo 5.2&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="summary"&gt;summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;i store up this mail in gmail, but never try to fixed code flow &lt;span class="caps"&gt;EKR&lt;/span&gt;&amp;#8217;s point. 
thanks for &lt;span class="caps"&gt;EKR&lt;/span&gt;&amp;#8217;s Aha, 3 years question, fixed in Leo 5.2 !
notice this, just after terror&amp;nbsp;story:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i always use Leo to develop complex scripts&lt;ul&gt;
&lt;li&gt;when start PyQt4 coding, also base&amp;nbsp;Leo&lt;/li&gt;
&lt;li&gt;but, this time under&amp;nbsp;git-flow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;even upgrade into Leo 5.2, but my skill stan as 4.0&lt;ul&gt;
&lt;li&gt;as one Leonine, for Nancy in&amp;nbsp;teams&lt;/li&gt;
&lt;li&gt;i had usage&amp;nbsp;@shadow&lt;/li&gt;
&lt;li&gt;and of course put .leo into git repository&amp;nbsp;too&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;so in the beginning:&lt;ul&gt;
&lt;li&gt;after 4 hours coding, happy finished one feature&amp;nbsp;develop&lt;/li&gt;
&lt;li&gt;base git-flow input:&lt;ul&gt;
&lt;li&gt;$ git flow hotfix finish &lt;span class="caps"&gt;BIG&lt;/span&gt;-&lt;span class="caps"&gt;FEATURE&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;as normal git-flow will:&lt;ul&gt;
&lt;li&gt;Latest objects have been fetched from&amp;nbsp;&amp;#8216;origin&amp;#8217;&lt;/li&gt;
&lt;li&gt;Hotfix branch has been merged into&amp;nbsp;&amp;#8216;master&amp;#8217;&lt;/li&gt;
&lt;li&gt;The hotfix was tagged &amp;#8216;&lt;span class="caps"&gt;BIG&lt;/span&gt;-&lt;span class="caps"&gt;FEATURE&lt;/span&gt;&amp;#8217;&lt;/li&gt;
&lt;li&gt;Hotfix branch has been back-merged into&amp;nbsp;&amp;#8216;develop&amp;#8217;&lt;/li&gt;
&lt;li&gt;Hotfix branch &amp;#8216;hotfix/&lt;span class="caps"&gt;BIG&lt;/span&gt;-&lt;span class="caps"&gt;FEATURE&lt;/span&gt;&amp;#8217; has been&amp;nbsp;deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;!!! because .leo also in git&lt;ul&gt;
&lt;li&gt;and can not Auto-merging with old&amp;nbsp;version&lt;/li&gt;
&lt;li&gt;the git-flow hotfix flow&amp;nbsp;break&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;terror start:&lt;ul&gt;
&lt;li&gt;try move .leo out git repository, and change&amp;nbsp;@path&lt;/li&gt;
&lt;li&gt;wants re-write all scripts, merge&amp;nbsp;again&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;! i forgot @shadown node &lt;span class="caps"&gt;NOT&lt;/span&gt; save data for&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;so, after cmd+s, i got empty .py and&amp;nbsp;.leo_shadow/*.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CAN&lt;/span&gt; &lt;span class="caps"&gt;MOVE&lt;/span&gt; minutes for so terror:&lt;ul&gt;
&lt;li&gt;luck remember git keep all verion in&amp;nbsp;breach&lt;/li&gt;
&lt;li&gt;so revert develop&amp;nbsp;breach&lt;/li&gt;
&lt;li&gt;change back &amp;#8216;hotfix/&lt;span class="caps"&gt;BIG&lt;/span&gt;-&lt;span class="caps"&gt;FEATURE&lt;/span&gt;&amp;#8217;&lt;ul&gt;
&lt;li&gt;into .leo change all @shadow to&amp;nbsp;@nosent&lt;/li&gt;
&lt;li&gt;move .leo out git&amp;nbsp;repository&lt;/li&gt;
&lt;li&gt;chnage&amp;nbsp;@path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;re-try &lt;code&gt;$ git flow hotfix finish BIG-FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kill the terror&amp;nbsp;time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;through this, i&amp;nbsp;learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.leo is too personal , need not put into git&amp;nbsp;repositry&lt;/li&gt;
&lt;li&gt;@shadow is not strong&amp;nbsp;enough&lt;/li&gt;
&lt;li&gt;nust use new&amp;nbsp;directive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so review leo document, largh in Aha time ;-) 
and recheck : &lt;a href="http://leoeditor.com/appendices.html#the-mulder-ream-update-algorithm"&gt;Appendices — Leo 5.2&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;notice @clean, and make confirm in:
Summary: @clean vs @file -&amp;gt; &lt;a href="http://leoeditor.com/tutorial-programming.html#summary-clean-vs-file"&gt;Programming with Leo — Leo 5.2&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;for working with Nancy, i need @clean&amp;nbsp;forever!&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt; the new leo-flow with git-flow is lost one&amp;nbsp;command?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to updating @cloean nodes in Leo? need not to restart&amp;nbsp;Leo?&lt;/li&gt;
&lt;li&gt;in my test:&lt;ul&gt;
&lt;li&gt;edit .py out leo, make&amp;nbsp;conflict&lt;/li&gt;
&lt;li&gt;try cmd+s, leo&amp;nbsp;alert:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#8230; .py
 has changed outside Leo.
Overwrite the outline&amp;nbsp;node?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;but try all kind of command in file&amp;nbsp;menus&lt;/li&gt;
&lt;li&gt;not found withch one make Leo :&lt;ul&gt;
&lt;li&gt;read out&amp;nbsp;.py&lt;/li&gt;
&lt;li&gt;base The Mulder/Ream algorithm updaing&amp;nbsp;nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;so i had to clode all Leo&amp;nbsp;windows&lt;/li&gt;
&lt;li&gt;restart Leo, so the &amp;#8220;Recovered Nodes&amp;#8221; auto&amp;nbsp;generated&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;是也乎&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;~ 参考俺的有关演讲幻灯: &lt;a href="http://s5rst.qiniucdn.com/131101-leo-china/index.html"&gt;Leo&lt;/a&gt; 
令老爷子,长达42年的编程经历,在不少成品问世,但是,除了维持生计的商业软件,
就是 Leo 这一非常冷门的编辑器软件,
从意动,到越来越易用,坚持了 35 年!&amp;nbsp;独自坚持完善,改进!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ekr-github-leo-graphs" src="http://zoomq.qiniudn.com/ZQCollection/snap/leo/ekr-github-leo-graphs.png"&gt;&lt;/p&gt;
&lt;p&gt;08年初,工程迁移到 github (&lt;a href="https://github.com/leo-editor/leo-editor/graphs/contributors"&gt;leo-editor/leo-editor&lt;/a&gt;)至今, 12,815 次提交中,
依然绝大多数是 &lt;span class="caps"&gt;EKR&lt;/span&gt; push&amp;nbsp;的! &lt;/p&gt;
&lt;p&gt;也就是说,还没有另外一位程序猿,能替代已经至少60岁的 令德华(&lt;a href="http://leoeditor.com/ekr.html"&gt;Edward K. Ream&lt;/a&gt;), 老令公&amp;nbsp;!!!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ekr2" src="http://leoeditor.com/ekr2.gif"&gt;&lt;/p&gt;
&lt;p&gt;只能祝 &lt;strong&gt;&lt;span class="caps"&gt;LL&lt;/span&gt;&amp;amp;P&lt;/strong&gt;&amp;nbsp;了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;live long and prosper&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;160417&amp;nbsp;整理分享&lt;/li&gt;
&lt;li&gt;160416&amp;nbsp;惊悚故事&lt;/li&gt;
&lt;li&gt;131024&amp;nbsp;发愿&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="EKR"></category><category term="Leo"></category><category term="pythonic"></category></entry><entry><title>Leo 5.2 theme custom</title><link href="https://blog.zoomquiet.io/leo5theme.html" rel="alternate"></link><published>2016-04-15T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-04-15:/leo5theme.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#en"&gt;&lt;span class="caps"&gt;EN&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;是也乎&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;要点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timing"&gt;timing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="en"&gt;&lt;span class="caps"&gt;EN&lt;/span&gt;&lt;a class="headerlink" href="#en" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;thanks guys in &lt;code&gt;leo-editor@googlegroups.com&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terry&amp;nbsp;Brown&lt;/li&gt;
&lt;li&gt;john&amp;nbsp;lunzer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;make me know how to custom Leo theme step by&amp;nbsp;step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;old versions &lt;code&gt;myLeoSettings.leo&lt;/code&gt; appended buttons :&lt;ul&gt;
&lt;li&gt;at &lt;code&gt;leo/myLeoSettings.leo#Startup--&amp;gt;Local buttons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;need copy from  &lt;code&gt;leoSettings.leo&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;so my …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#en"&gt;&lt;span class="caps"&gt;EN&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;是也乎&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;要点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timing"&gt;timing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="en"&gt;&lt;span class="caps"&gt;EN&lt;/span&gt;&lt;a class="headerlink" href="#en" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;thanks guys in &lt;code&gt;leo-editor@googlegroups.com&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terry&amp;nbsp;Brown&lt;/li&gt;
&lt;li&gt;john&amp;nbsp;lunzer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;make me know how to custom Leo theme step by&amp;nbsp;step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;old versions &lt;code&gt;myLeoSettings.leo&lt;/code&gt; appended buttons :&lt;ul&gt;
&lt;li&gt;at &lt;code&gt;leo/myLeoSettings.leo#Startup--&amp;gt;Local buttons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;need copy from  &lt;code&gt;leoSettings.leo&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;so my custome flow as:&lt;ul&gt;
&lt;li&gt;try edit some&amp;nbsp;node&lt;/li&gt;
&lt;li&gt;click &lt;code&gt;reload-styles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;open other &lt;code&gt;.leo&lt;/code&gt; , check&amp;nbsp;effect&lt;/li&gt;
&lt;li&gt;close&amp;nbsp;it&lt;/li&gt;
&lt;li&gt;loop up&amp;nbsp;steps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;finally all i custom in  &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appended help menus:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Menus--&amp;gt;@menus--&amp;gt;@menu &amp;amp;Help--&amp;gt;@item open-myLeoSettings-leo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bigger cursor:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Qt Gui Misc settings--&amp;gt;@int qt-cursor-width = 6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;font changed:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Fonts--&amp;gt;Basic Fonts (change these first)--&amp;gt;@string font-family = Input, Droid Sans Mono, DejaVu Sans Mono&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;body-bg dark:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Body pane colors--&amp;gt;@color body-bg = #2F3337&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;close Gutter:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Margins &amp;amp; borders--&amp;gt;Gutter--&amp;gt;@bool use-gutter = False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;custom border-focus-color:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;myLeoSettings.leo#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Border colors--&amp;gt;@color focused-border-focus-color = #85C2FF&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python syntax coloring:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Syntax coloring--&amp;gt;Language-specific colors--&amp;gt;Python&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;appended&amp;nbsp;nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;@color blank_color = grey&lt;/span&gt;
&lt;span class="err"&gt;@color tab_color = red&lt;/span&gt;
&lt;span class="err"&gt;@color label_color = red&lt;/span&gt;
&lt;span class="err"&gt;@color keyword1_color = #268bd2&lt;/span&gt;
&lt;span class="err"&gt;@color keyword2_color = #2aa198&lt;/span&gt;
&lt;span class="err"&gt;@color keyword3_color = #859900&lt;/span&gt;
&lt;span class="err"&gt;@color keyword4_color = #268bd2&lt;/span&gt;
&lt;span class="err"&gt;@color literal1_color = #cb4b16&lt;/span&gt;
&lt;span class="err"&gt;@color literal2_color = #b58900&lt;/span&gt;
&lt;span class="err"&gt;@color literal3_color = #dc322f&lt;/span&gt;
&lt;span class="err"&gt;@color literal4_color = #859900&lt;/span&gt;
&lt;span class="err"&gt;@color markup_color = #2aa198&lt;/span&gt;
&lt;span class="err"&gt;@color comment1_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color comment2_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color comment3_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color comment4_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color operator_color = #bbbbbb&lt;/span&gt;
&lt;span class="err"&gt;@color function_color = #cb4b16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt; with coloring&lt;ul&gt;
&lt;li&gt;fixed &lt;code&gt;path/2/installed/leo/modes/python.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;appended &lt;code&gt;"self": "keyword4",&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;是也乎&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;~&amp;nbsp;老问题新解决&lt;/p&gt;
&lt;h2 id="_2"&gt;背景&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://leoeditor.com/leo_toc.html"&gt;Leo&lt;/a&gt; &lt;img alt="Leo4" src="http://leoeditor.com/_static/Leo4-80-border.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href="http://wiki.woodpecker.org.cn/moin/LeoEnvironment"&gt;LeoEnvironment - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;从 05&amp;nbsp;年开始使用&lt;/li&gt;
&lt;li&gt;从笔记到工程管理,都用的非常欢实&lt;/li&gt;
&lt;li&gt;是 令德华(&lt;a href="http://leoeditor.com/ekr.html"&gt;Edward K. Ream&lt;/a&gt;)&amp;nbsp;独立创建并长期维护的,完备的文学化编辑环境&lt;/li&gt;
&lt;li&gt;09年从 Tk 迁移到 Qt 后平滑的跟随俺转战 M$/Ubuntu/&lt;span class="caps"&gt;MAC&lt;/span&gt;&amp;nbsp;所有桌面系统&lt;/li&gt;
&lt;li&gt;嗯哼,完全基于 Python&amp;nbsp;开发的&amp;#8230;&lt;/li&gt;
&lt;li&gt;详细介绍,参考 &lt;a href="http://zoomq.qiniudn.com/pychina/PyCon2013China/PyConChina2013-EKR-final-v2.mp4"&gt;PyConChina2013-&lt;span class="caps"&gt;EKR&lt;/span&gt;-final-v2&lt;/a&gt; ~ 老令公 在 PyCon2013China&amp;nbsp;大会上分享的视频&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;问题&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;但是,使用最性感的编辑器 sublime text 后, 对 Leo&amp;nbsp;默认的界面就万般难以忍受了&amp;#8230;&lt;/p&gt;
&lt;p&gt;终于决心折腾一下样式!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leo 基于几个配置文件:&lt;ul&gt;
&lt;li&gt;默认配置 &lt;code&gt;path/2/installed/Leo/config/leoSettings.leo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户配置 &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;俺从 3.1 版本开始使用 Leo, 现在的稳定版本是&amp;nbsp;5.2&lt;/li&gt;
&lt;li&gt;所以, &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 和官方的默认有较大偏差&lt;/li&gt;
&lt;li&gt;那么如何解决:&lt;ul&gt;
&lt;li&gt;启用&lt;a href="http://leoeditor.com/what-is-new.html#what-s-new-in-leo-4-11"&gt;Leo 4.11&lt;/a&gt; 开始有的 &lt;code&gt;sublime Text 2, a dark colorizing theme&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;如何令 &lt;code&gt;self&lt;/code&gt; 也有语法颜色?&lt;/li&gt;
&lt;li&gt;如何改变默认的 &lt;code&gt;cursor&lt;/code&gt; 尺寸?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;过程&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单的说,手上的配置文件有这几种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 混杂了增补多年配置的可能不兼容配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path/2/installed/Leo/config/leoSettings.leo&lt;/code&gt; 5.2&amp;nbsp;最新版本配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path/2/installed/Leo/config/exampleSettings.leo&lt;/code&gt; 5.2&amp;nbsp;内置配置示例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path/2/installed/Leo/config/themes.leo&lt;/code&gt; 5.2 内置 theme&amp;nbsp;定制示例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先后进行的尝试:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;exampleSettings.leo&lt;/code&gt; 基础上&lt;ul&gt;
&lt;li&gt;先完成积累的习惯配置&lt;/li&gt;
&lt;li&gt;再进行 theme&amp;nbsp;配置&lt;/li&gt;
&lt;li&gt;失败! 原先的配置点太多:&lt;ul&gt;
&lt;li&gt;快捷键&lt;/li&gt;
&lt;li&gt;窗口布局&lt;/li&gt;
&lt;li&gt;字体&lt;/li&gt;
&lt;li&gt;颜色&lt;/li&gt;
&lt;li&gt;菜单&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;leoSettings.leo&lt;/code&gt; 基础上&lt;ul&gt;
&lt;li&gt;先完成积累的习惯配置&lt;/li&gt;
&lt;li&gt;再进行 theme&amp;nbsp;配置&lt;/li&gt;
&lt;li&gt;失败!&amp;nbsp;原因同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最终只好一边询问社区列表,一边基于 &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 进行配置&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;leoSettings.leo&lt;/code&gt; 复制相应最新配置树过来&lt;/li&gt;
&lt;li&gt;参考原先的进行对应配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;要点&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;~成功将 &lt;img alt="leoeditor" src="http://leoeditor.com/screen-shots/render-svg-sources.png"&gt;
变成:
&lt;img alt="leo5.2_darktheme" src="http://zoomq.qiniudn.com/ZQCollection/snap/leo/leo5.2_darktheme.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;myLeoSettings.leo&lt;/code&gt; 的控制按钮:&lt;ul&gt;
&lt;li&gt;来自 &lt;code&gt;leo/myLeoSettings.leo#Startup--&amp;gt;Local buttons&lt;/code&gt;, 要从  &lt;code&gt;leoSettings.leo&lt;/code&gt; 复制&lt;/li&gt;
&lt;li&gt;这样进行之后的配置尝试时的流程才能固化为:&lt;ul&gt;
&lt;li&gt;进行对应 node&amp;nbsp;的修订&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;reload-styles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开另外一个 &lt;code&gt;.leo&lt;/code&gt; 观察效果&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;li&gt;重复以上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关 &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 的配置点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加帮助菜单:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Menus--&amp;gt;@menus--&amp;gt;@menu &amp;amp;Help--&amp;gt;@item open-myLeoSettings-leo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;光标加粗:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Qt Gui Misc settings--&amp;gt;@int qt-cursor-width = 6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字体指定:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Fonts--&amp;gt;Basic Fonts (change these first)--&amp;gt;@string font-family = Input, Droid Sans Mono, DejaVu Sans Mono&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编辑窗口底色:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Body pane colors--&amp;gt;@color body-bg = #2F3337&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭行数:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Margins &amp;amp; borders--&amp;gt;Gutter--&amp;gt;@bool use-gutter = False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修订窗格激活提醒框&lt;ul&gt;
&lt;li&gt;&lt;code&gt;myLeoSettings.leo#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Border colors--&amp;gt;@color focused-border-focus-color = #85C2FF&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python 语法颜色自定:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Syntax coloring--&amp;gt;Language-specific colors--&amp;gt;Python&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逐一追加&amp;nbsp;node:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;@color blank_color = grey&lt;/span&gt;
&lt;span class="err"&gt;@color tab_color = red&lt;/span&gt;
&lt;span class="err"&gt;@color label_color = red&lt;/span&gt;
&lt;span class="err"&gt;@color keyword1_color = #268bd2&lt;/span&gt;
&lt;span class="err"&gt;@color keyword2_color = #2aa198&lt;/span&gt;
&lt;span class="err"&gt;@color keyword3_color = #859900&lt;/span&gt;
&lt;span class="err"&gt;@color keyword4_color = #268bd2&lt;/span&gt;
&lt;span class="err"&gt;@color literal1_color = #cb4b16&lt;/span&gt;
&lt;span class="err"&gt;@color literal2_color = #b58900&lt;/span&gt;
&lt;span class="err"&gt;@color literal3_color = #dc322f&lt;/span&gt;
&lt;span class="err"&gt;@color literal4_color = #859900&lt;/span&gt;
&lt;span class="err"&gt;@color markup_color = #2aa198&lt;/span&gt;
&lt;span class="err"&gt;@color comment1_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color comment2_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color comment3_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color comment4_color = #557755&lt;/span&gt;
&lt;span class="err"&gt;@color operator_color = #bbbbbb&lt;/span&gt;
&lt;span class="err"&gt;@color function_color = #cb4b16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt; 非关键词追加语法颜色&lt;ul&gt;
&lt;li&gt;修订 &lt;code&gt;path/2/installed/leo/modes/python.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;追加 &lt;code&gt;"self": "keyword4",&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感谢 &lt;code&gt;leo-editor@googlegroups.com&lt;/code&gt; 列表中好人的大力帮助:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terry&amp;nbsp;Brown&lt;/li&gt;
&lt;li&gt;john&amp;nbsp;lunzer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="timing"&gt;timing&lt;a class="headerlink" href="#timing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="err"&gt;根据记忆折腾&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="err"&gt;官方列表提问&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="err"&gt;使用官方配置折腾&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="err"&gt;使用列表提示检验&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="err"&gt;完成心目中的配置&lt;/span&gt;

&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="err"&gt;才完成&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;140909&amp;nbsp;才算完成一个可以看的版本&lt;/li&gt;
&lt;li&gt;140711&amp;nbsp;完成所有功能,启动文档回顾&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;a class="headerlink" href="#todo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;subl theme 到 Leo theme&amp;nbsp;的转换脚本&lt;/li&gt;
&lt;li&gt;进一步的样式化:&lt;ul&gt;
&lt;li&gt;髙亮当前行&lt;/li&gt;
&lt;li&gt;提纲界面的 dark&amp;nbsp;theme&lt;/li&gt;
&lt;li&gt;log 界面的 dark&amp;nbsp;theme&lt;/li&gt;
&lt;li&gt;find 界面的 dark&amp;nbsp;theme&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参考颜色: &lt;a href="http://leo-editor.github.io/snippets/colormap.html"&gt;Leo Color&amp;nbsp;Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="python"></category><category term="howto"></category><category term="leo"></category><category term="theme"></category></entry><entry><title>Linux 后的思想</title><link href="https://blog.zoomquiet.io/linux-linus-not-only-be-fun.html" rel="alternate"></link><published>2016-04-10T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-04-10:/linux-linus-not-only-be-fun.html</id><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;来自 &lt;span class="caps"&gt;TED2016&lt;/span&gt;&amp;nbsp;的分享:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ted.com/talks/linus_torvalds_the_mind_behind_linux"&gt;Linus Torvalds: The mind behind Linux | &lt;span class="caps"&gt;TED&lt;/span&gt; Talk | &lt;span class="caps"&gt;TED&lt;/span&gt;.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;戳中泪点的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有项目,只是因为我需要&lt;/li&gt;
&lt;li&gt;最困难的不是完成大项目,而是令人们在一起工作,即使相互不接受&lt;/li&gt;
&lt;li&gt;Linux 并不是选择了开源,只是那时刚好有开源吻合 Linux&amp;nbsp;项目&lt;/li&gt;
&lt;li&gt;&amp;#8230;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的,为什么 Linux 发展的如此快,而更加早的 &lt;span class="caps"&gt;GNU&lt;/span&gt;&amp;nbsp;项目反而越来越没有存在感了!?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;RMS&lt;/span&gt;&amp;nbsp;太聪明,总是戳到关键点&lt;/li&gt;
&lt;li&gt;Linus&amp;nbsp;明智的多,只作自己能控制的,其它的给更加聪明的人折腾吧&lt;/li&gt;
&lt;li&gt;嗯哼,这就是失控控制法&lt;/li&gt;
&lt;li&gt;不控制的控制才是最好的控制&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="geek"></category><category term="linux"></category><category term="floss"></category></entry><entry><title>再见了 Python</title><link href="https://blog.zoomquiet.io/saying-ggodby-python-zh.html" rel="alternate"></link><published>2015-01-10T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2015-01-10:/saying-ggodby-python-zh.html</id><summary type="html">&lt;p&gt;原文: &lt;a href="http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;Saying Goodbye To&amp;nbsp;Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is long overdue; this isn&amp;#8217;t a declaration of intent (any intent was long ago made real), just my reflection about my own path. I left the Python world a long time ago but I never took a chance to say&amp;nbsp;goodbye.&lt;/p&gt;
&lt;p&gt;While …&lt;/p&gt;</summary><content type="html">&lt;p&gt;原文: &lt;a href="http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;Saying Goodbye To&amp;nbsp;Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is long overdue; this isn&amp;#8217;t a declaration of intent (any intent was long ago made real), just my reflection about my own path. I left the Python world a long time ago but I never took a chance to say&amp;nbsp;goodbye.&lt;/p&gt;
&lt;p&gt;While I had moved on from Python years ago, I felt a certain attachment to it well past then, not quite admitting to myself that I wasn&amp;#8217;t coming back. When my proposal for PyCon 2013 was rejected I was frustrated (it was going to be a fun talk!) but for some reason that made me fully realized that I wasn&amp;#8217;t part of the Python community&amp;nbsp;anymore.&lt;/p&gt;
&lt;p&gt;Python was the first — and I sometimes wonder if the only — programming community I was part of. Coming to Python was a conscious choice. In college I was interested in Scheme and Smalltalk. High-minded languages with interesting ideas, but hard to find practical uses. Scheme was always too underserved by its libraries and sparse academic community. In contrast Smalltalk was productive — it was built by and for people who loved to build things. (More credit here should probably go to Dan Ingalls than Alan Kay — I can sense in Dan Ingalls&amp;#8217;s work a real passion for making things, and a pure but unproductive language would not have satisfied him.) But Smalltalk was and is a world of its own. It was culturally and technically pre-internet, pre-open-source, pre-online-community. And despite all the great things about the Smalltalk environment and language it couldn&amp;#8217;t fulfill these then-new potentials, even as it tried to adapt. (I wrote a couple posts about this, intended as a sort of sympathetic explanation of why I couldn&amp;#8217;t stick with Smalltalk: Where Smalltalk Went Wrong and a&amp;nbsp;followup.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr."&gt;Dan&amp;nbsp;Ingalls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Alan_Kay"&gt;Alan&amp;nbsp;Kay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/where-smalltalk-went-wrong.html"&gt;Where Smalltalk Went&amp;nbsp;Wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/where-smalltalk-went-wrong-2.html"&gt;a&amp;nbsp;followup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of my college career (1999ish) I consciously looked for a new home. I flirted with Perl, C, but knew they weren&amp;#8217;t for me. Somewhere along the way I came upon Python, and it was good enough that I didn&amp;#8217;t look for anything better. I can&amp;#8217;t say I fell in love with Python like I had with Scheme and Smalltalk — Scheme was like an opening up of the world after going far beyond what anyone should ask of &lt;span class="caps"&gt;GW&lt;/span&gt;-&lt;span class="caps"&gt;BASIC&lt;/span&gt;, and Squeak/Smalltalk was a deep mysterious world, like coming upon the ruins of an ancient and advanced civilization. Python in comparison was practical — but I wasn&amp;#8217;t in the mood at that time to discover, I wanted to&amp;nbsp;build.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/GW-BASIC"&gt;&lt;span class="caps"&gt;GW&lt;/span&gt; - &lt;span class="caps"&gt;BASIC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I built a lot of things in Python. I was doing workaday web programming and my enthusiasm went more towards building tools to build stuff than in the building itself. I did build some cool products in those days, not just libraries, but for some reason it&amp;#8217;s only the smaller units that I was able to push out. And I found a community in&amp;nbsp;Python.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/projects.html"&gt;built a lot of things in&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I built. Back in the days I contributed to Webware, what felt like a completely different generation of web development in Python than today. I wrote SQLObject, my first foray into a oh-shit-people-are-using-this-I&amp;#8217;m-not-sure-how-I-feel-about-that library. But SQLObject explored a lot of metaprogramming concepts that were quite novel in the Python world at that time. At the same time maintaining it felt like a terrible burden. It took me far too long to resolve that, and only once interest had died down (in no small part due to my lack of attention) did I hand it over to Oleg who has been a far more steady hand. This would be a pattern I would unfortunately repeat. But if SQLObject helped the next generation be better that&amp;#8217;s good enough for&amp;nbsp;me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.webwareforpython.org/"&gt;Webware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sqlobject.org/"&gt;SQLObject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phdru.name/"&gt;Oleg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/"&gt;next&amp;nbsp;generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Later came &lt;span class="caps"&gt;WSGI&lt;/span&gt; which excited me with its subtly functional basis. I built a whole web framework toolkit (or a framework for building web frameworks?) in Paste. Few people really understood what I was trying to do with Paste — at times including me. Some people like Ben Bangert were able to see the principles underneath the code, and get them out into the world in the kind of usable state that I intended to enable. (And along the way I sometimes felt like I was doing the same for &lt;span class="caps"&gt;PJE&lt;/span&gt;.) Python web frameworks were a mess back then; ultimately reaching for the crown using a monolithic approach was a more successful technique than trying to build bridges as I attempted with Paste. I&amp;#8217;m still not sure what lesson to take from that. Not a general lesson, but more understanding the landscape. And understanding what you can bring to a problem, and who you can bring with. I feel like I&amp;#8217;m only now really understanding the importance of vision combined with a diverse group of skills and perspectives, and I have even more to learn about how to actually assemble and coordinate the right group of people in the right environment to&amp;nbsp;succeed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wsgi.readthedocs.org/"&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/"&gt;Paste&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://groovie.org/"&gt;Ben&amp;nbsp;Bangert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;reaching for the&amp;nbsp;crown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Somewhere around here I feel like I reached my 10,000 hours of Python coding. I wrote WebOb, taking the lessons of Paste and a better intuition for library design. I still think it&amp;#8217;s the best mapping of &lt;span class="caps"&gt;HTTP&lt;/span&gt; to Python. Other libraries include more aspects of web development in their scope, or have better documentation, and more users, but when viewed with a particular lens I&amp;#8217;m still very proud of WebOb. And it&amp;#8217;s been an important building block in a lot of people&amp;#8217;s explorations into building a web framework. Other libraries from this period are lxml.html, smaller things like WebTest, ScriptTest, MiniMock, Tempita, perhaps the over-ambition (or just mis-ambition) of Deliverance. That period felt like a clearing out of my system, unloading a bunch of&amp;nbsp;ideas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webob.org/"&gt;WebOb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.webob.org/en/latest/do-it-yourself.html"&gt;building a web&amp;nbsp;framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxml.de/lxmlhtml.html"&gt;lxml.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webtest.pythonpaste.org/"&gt;WebTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/scripttest/"&gt;ScriptTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/MiniMock"&gt;MiniMock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/tempita/"&gt;Tempita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.coactivate.org/projects/deliverance/introduction"&gt;Deliverance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But for whatever reason my most successful tools were virtualenv and pip. These were never my greatest passions, or even close. They were about: (a) fixing personal annoyances in deployment (virtualenv), and (b) getting people to stop fucking whining about Setuptools and easy_install (pip). I&amp;#8217;m not sure whether I blame the uneasy success of these tools on broad appeal, or that they are in a sense user-visible tools and not libraries, or that I didn&amp;#8217;t like doing them because no one liked doing them and so there was a vacuum waiting to be&amp;nbsp;filled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then my last project, Silver Lining. It was early on in the devops revolution, an attempt to think about what a generic container for web applications might look like. It was in a sense going deeper down the hole of virtualenv and pip, but with an aim to build a full product and not just a set of eclectic tools. No one cared. And I only cared a little — I cared because it was completing some ideas I&amp;#8217;d long had about deployment, because for a certain kind of web application development it felt nimble and reliable, because it removed or automated tasks I didn&amp;#8217;t like to do. But I didn&amp;#8217;t care, no more than I cared about virtualenv or pip. I&amp;#8217;d gone down a path that was about code and technical design, but if I stepped back it was&amp;nbsp;unexciting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ianb/silverlining/src"&gt;Silver&amp;nbsp;Lining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And when I did step back there wasn&amp;#8217;t anything in Python that excited me. Python was doing great, my interest had nothing to jumping on or off bandwagons. Python is doing great — better than ever (minor bumps with versions aside). But I think in my mind I&amp;#8217;d always imagined I could build up just the right toolset, and using that toolset create the product I actually wanted to create — what exactly that product was, I don&amp;#8217;t know, but with the right tools I imagined I could move fast enough and confidently enough to find&amp;nbsp;it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plus.google.com/+IanBicking/posts/iEVXdcfXkz7"&gt;minor bumps with versions&amp;nbsp;aside&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes when I&amp;#8217;m feeling particularly excited about an idea, like really excited, I have to take a break. I need to calm down. Try to wrap my head around the ideas, because I know if I push forward directly that I&amp;#8217;ll just muddle things up and feel disappointed. No, I don&amp;#8217;t know that is true: maybe I don&amp;#8217;t want to have to confront, in that moment, that the idea is not as cool as I think it is, or as possible as I think it is. But often I do step back into the problem, with ideas that are more mature for having thought more deeply about them. In a sense I think creating tools and libraries was a similar process: I felt too excited about creating something great, because I worried I&amp;#8217;d muddle everything up, or afraid I just couldn&amp;#8217;t pull it off, and so I stepped away and would work on&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;I always directed my attention to the web, even if I got bogged down in the server. Somehow I skipped native GUIs, even as a user. But pure data processing without consideration for what you do with the data felt unexciting. And ops — that&amp;#8217;s just the worst. I was, and am, a true believer in Free Software; and I was, and am, a true believer in the web. That is, I don&amp;#8217;t see either as simply a means to an ends. But not for the same reasons, and I can believe in a web that isn&amp;#8217;t open source, and open source that isn&amp;#8217;t for the web. And yet writing it down I realize I don&amp;#8217;t care about open source that isn&amp;#8217;t for the&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;When I stepped back Python no longer seemed relevant to the web, at least not the part of the web that interested me. The tools I had built were no longer relevant either, they were not the tools with which I could realize my ambitions. The database-backed website, or the dynamic-&lt;span class="caps"&gt;HTTP&lt;/span&gt;-based web application, templates and deployments, anything you&amp;#8217;d call &amp;#8220;&lt;span class="caps"&gt;REST&lt;/span&gt;&amp;#8221; — none of it seemed like the future, and whatever this vague thing was that I&amp;#8217;d been looking for, I wasn&amp;#8217;t going to find it&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;This wasn&amp;#8217;t an actual revelation, I&amp;#8217;m constructing it in retrospect. If you&amp;#8217;d asked me I would have agreed with this notion even years earlier, and it&amp;#8217;s not like I came up with some unique idea, if anything I would call it self-evident, don&amp;#8217;t we all know this is where the world is going? And so I started to look towards Javascript and the browser and the &lt;span class="caps"&gt;DOM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Somewhat before this I also joined Mozilla. But it would be backwards to say that Mozilla induced this change in perspective, that it tempted me away from Python. In fact I would have had a much easier time of it if I had just stuck with doing Python backend stuff at&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;p&gt;The last few years of transition have been a struggle. With Python and the server I knew what I was doing. I was good at it, I felt competent. I could construct an opinion with confidence about all kinds of design questions. I was respected and my opinion would be listened to. I&amp;#8217;d put in my 10,000 hours, I had achieved&amp;nbsp;mastery.&lt;/p&gt;
&lt;p&gt;Moving to Javascript none of this was true, and most of it still isn&amp;#8217;t true. It might be easier to pull off this change if I was doing web development, surrounded with people making similar transitions, a little fish in the little pond of whatever group I was working with. But Mozilla is not that kind of environment. Which is okay — if I had felt confident it would only be because there was no one to correct&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s oddly common to see people talk about how a programmer can pick up something new in the matter of a few days or months. To find programmers that consider all that knowledge transferable (for instance). I don&amp;#8217;t know what to make of it — my less forgiving self thinks these people have never known what real mastery is. I don&amp;#8217;t think it takes another 10,000 hours to get mastery in a new language and environment&amp;#8230;  but it definitely takes some thousands of hours, some years of hard work. I only now feel like I&amp;#8217;m getting&amp;nbsp;close.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=7204515"&gt;for&amp;nbsp;instance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maybe it&amp;#8217;s my perspective on what mastery is. Deciding to do something and then doing it is good. It is not mastery. You have to pick the right problem to solve. You have to pick the right way to solve it. You need to know when to revise that plan, and understand the constraints that inform that revision. You need both large scale and small scale intuitions. And you need to be good enough at all the details of programming in that environment that you don&amp;#8217;t get overwhelmed with the &amp;#8220;easy&amp;#8221; stuff, so you have mental energy to spare on the big stuff. The jump from Python to Javascript isn&amp;#8217;t that big, the languages have a very similar shape. And the browser was already the environment focused on. And yet redeveloping my intuition for this new environment has taken&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Sadly I&amp;#8217;m not going to get back where I was, because Javascript is not Python. If there&amp;#8217;s a Javascript community I haven&amp;#8217;t found it, or it&amp;#8217;s at least not a single entity. There is no community that created Javascript like the Python community created Python. Python comes from the internet in a way Javascript does not; Javascript was built for the internet, but Python was built on the internet. And I do miss the Python community, you&amp;#8217;re good&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;But also whatever language partisanship I had is gone, and won&amp;#8217;t come back in the guise of a new favorite language. This shouldn&amp;#8217;t be confused with a disinterest in language. I still get as annoyed as ever by &amp;#8220;use the right tool for the job&amp;#8221; — the bland truism meant to shut down critical discussion and engagement with the tasks and choices in software engineering, replacing it with a weak passionless technical&amp;nbsp;fatalism.&lt;/p&gt;
&lt;p&gt;I suppose it is the platform that I am drawn to now before language. And the browser seems like the most interesting platform, not because it&amp;#8217;s novel (though it is, it&amp;#8217;s a runtime like few others), but because of how concrete it is, and of course how relevant it is to&amp;#8230;  anything. And the browser is no longer just the servant of a server, I prefer now to think of the browser as an independent agent, connecting to services instead of servers. Obviously that doesn&amp;#8217;t describe a great number of running web sites, but it&amp;#8217;s the model I see for the future, and a better perspective for understanding future&amp;nbsp;architectures.&lt;/p&gt;
&lt;p&gt;Still this only addresses which direction I&amp;#8217;m looking towards, I still have to walk the path. I don&amp;#8217;t want to get caught up in the weeds again, building tools for something I never manage to make. Right now I think I&amp;#8217;m on to something in the area of collaboration, first with TogetherJS and now I&amp;#8217;m thinking bigger with a new experiment. But while I feel like I&amp;#8217;ve reached some competence in executing on these projects, programming is only one piece of bringing forward a larger vision. I still have a lot of learning to do, skills for which I haven&amp;#8217;t put in the necessary time. How to recruit support, how to manage the project, how to negotiate between feasibility and user value, how to negotiate compromises in strategy and design. And collaboration itself is a whole domain of expertise. I&amp;#8217;ve learned a lot, I can do things, but I am definitely not yet experienced enough to choose to do the right thing in these areas. And at this moment I&amp;#8217;m worried I won&amp;#8217;t have the room to learn these things, it feels like time is running out just when I&amp;#8217;m pulling stuff&amp;nbsp;together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://togetherjs.com/"&gt;TogetherJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/mozilla/hotdish"&gt;new&amp;nbsp;experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, that&amp;#8217;s where I am now. No longer a language partisan, unclear of what community I am even participating in, I am less sure how to identify and self-identify myself. How do I describe myself now? Even as I find my technical footing I am still adrift. And so it&amp;#8217;s hard to say goodbye. So instead I&amp;#8217;ll say, Pythonistas: until we meet again. Maybe I&amp;#8217;ll meet some of you over&amp;nbsp;here.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;161201 是也乎,(￣▽￣)&lt;ul&gt;
&lt;li&gt;发现也没有必要逐字翻译&lt;/li&gt;
&lt;li&gt;作者是位勤劳的 Pythonista, 创造了从 SQLObject 到 Silver Lining&amp;nbsp;等等一系列&lt;/li&gt;
&lt;li&gt;不成功的模块/工具/工程&lt;/li&gt;
&lt;li&gt;现在是 &lt;code&gt;TogetherJS&lt;/code&gt; 发起人&lt;/li&gt;
&lt;li&gt;之所以从 Python 转进 &lt;span class="caps"&gt;JS&lt;/span&gt; 世界,只是因为感觉在 Python&amp;nbsp;中无论折腾什么都会进入混乱的竞争&lt;/li&gt;
&lt;li&gt;细思恐极&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;150112 整理到个人&amp;nbsp;blog&lt;/li&gt;
&lt;li&gt;150110&amp;nbsp;从周刊中发现,决定翻译&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="Weekly"></category><category term="Zh"></category></entry><entry><title>如何将 ipynb 发布到 blog 中?</title><link href="https://blog.zoomquiet.io/141127-ipynb-into-blog.html" rel="alternate"></link><published>2014-11-27T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-11-27:/141127-ipynb-into-blog.html</id><summary type="html">&lt;p&gt;原文: &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/how-to-quickly-turn-ipython-notebook.html"&gt;prooffreader plus: How to quickly turn an IPython notebook into a blog&amp;nbsp;post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IPython notebooks are great for many things, but they&amp;#8217;re a little awkward to embed in blog post platforms like Blogger, Wordpress, etc. When the nbconvert feature was a standalone command-line tool, there was a blog …&lt;/p&gt;</summary><content type="html">&lt;p&gt;原文: &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/how-to-quickly-turn-ipython-notebook.html"&gt;prooffreader plus: How to quickly turn an IPython notebook into a blog&amp;nbsp;post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IPython notebooks are great for many things, but they&amp;#8217;re a little awkward to embed in blog post platforms like Blogger, Wordpress, etc. When the nbconvert feature was a standalone command-line tool, there was a blog export template, but that seems to have disappeared now that nbconvert has been folded within&amp;nbsp;IPython.&lt;/p&gt;
&lt;p&gt;Out of the box, nbconvert just has two html export&amp;nbsp;options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;--html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which includes a lot of &lt;span class="caps"&gt;CSS&lt;/span&gt; that interferes with a blog&amp;#8217;s &lt;span class="caps"&gt;CSS&lt;/span&gt;,&amp;nbsp;and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;--html --template basic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which has no &lt;span class="caps"&gt;CSS&lt;/span&gt; and so pretty much negates the benefit of using an IPython notebook. However, it does have &lt;span class="caps"&gt;CSS&lt;/span&gt; classess in the&amp;nbsp;text.&lt;/p&gt;
&lt;p&gt;My solution was to whip up a quick &lt;span class="caps"&gt;CSS&lt;/span&gt; stylesheet that could be included in the blog post. It seems to work pretty well; you can have a look&amp;nbsp;at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an &lt;a href="http://nbviewer.ipython.org/github/Prooffreader/Misc_ipynb/blob/master/top_10_python_idioms.ipynb"&gt;IPython notebook in nbviewer&lt;/a&gt; of a recent blog post of&amp;nbsp;mine&lt;/li&gt;
&lt;li&gt;the &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/top-10-python-idioms-i-wished-id.html"&gt;blog version&lt;/a&gt; after applying this&amp;nbsp;stylesheet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that, for aesthetic reasons, I removed all&amp;nbsp;the&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;In [1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-style tags because of the narrow columns on this blog. Your mileage may&amp;nbsp;vary.&lt;/p&gt;
&lt;h2 id="1-convert-ipynb-notebook-to-html"&gt;1. Convert .ipynb notebook to &lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;a class="headerlink" href="#1-convert-ipynb-notebook-to-html" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the terminal, navigate to the folder containing the .ipynb file and&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ipython nbconvert --to html --template basic filename.ipynb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="2-paste-html-in-blog"&gt;2. Paste &lt;span class="caps"&gt;HTML&lt;/span&gt; in blog&lt;a class="headerlink" href="#2-paste-html-in-blog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Note: if you&amp;#8217;re using the Blogger platform, never switch back to the Compose interface after you use the &lt;span class="caps"&gt;HTML&lt;/span&gt; interface, it changes all your&amp;nbsp;tags.&lt;/p&gt;
&lt;h2 id="3-add-css-to-blog-html"&gt;3. Add &lt;span class="caps"&gt;CSS&lt;/span&gt; to blog &lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;a class="headerlink" href="#3-add-css-to-blog-html" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This seems to reproduce the native syntax highlighting of&amp;nbsp;IPython.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
.highlight{background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .1em;padding:0em .5em;border-radius: 4px;}
.k{color: #338822; font-weight: bold;}
.kn{color: #338822; font-weight: bold;}
.mi{color: #000000;}
.o{color: #000000;}
.ow{color: #BA22FF;  font-weight: bold;}
.nb{color: #338822;}
.n{color: #000000;}
.s{color: #cc2222;}
.se{color: #cc2222; font-weight: bold;}
.si{color: #C06688; font-weight: bold;}
.nn{color: #4D00FF; font-weight: bold;}
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;是也乎&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;原来&amp;#8230; &lt;code&gt;IPy[:] notebook&lt;/code&gt; 天然就内置了这种能力!&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;160322 @&lt;span class="caps"&gt;TANG&lt;/span&gt; ZhiXiong 提醒:&lt;ul&gt;
&lt;li&gt;其实放在 GitHub,然后分享一个 Jupyter&amp;nbsp;链接是最好的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;是也乎&lt;/code&gt; 这的确是 2015-7 之后更好的解决方案了&amp;nbsp;;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131106 pub. &lt;a href="https://medium.com/i-m-h-o/9520fee0b59f"&gt;&lt;span class="caps"&gt;EKR&lt;/span&gt; to Chinese programmer — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="Pythonic"></category><category term="FW"></category><category term="ipynb"></category><category term="tutorial"></category></entry><entry><title>十大早该知道的Python技巧</title><link href="https://blog.zoomquiet.io/top10-Py-idioms-wish-learned-earlier.html" rel="alternate"></link><published>2014-11-26T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-11-26:/top10-Py-idioms-wish-learned-earlier.html</id><summary type="html">&lt;p&gt;原文: &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/top-10-python-idioms-i-wished-id.html"&gt;prooffreader plus: Top 10 Python idioms I wish I&amp;#8217;d learned&amp;nbsp;earlier&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Top 10 Python idioms I wish I'd learned earlier&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been programming all my life, but never been a programmer. Most of my work was done in Visual Basic because it&amp;#8217;s what I was most …&lt;/p&gt;</summary><content type="html">&lt;p&gt;原文: &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/top-10-python-idioms-i-wished-id.html"&gt;prooffreader plus: Top 10 Python idioms I wish I&amp;#8217;d learned&amp;nbsp;earlier&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Top 10 Python idioms I wish I'd learned earlier&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been programming all my life, but never been a programmer. Most of my work was done in Visual Basic because it&amp;#8217;s what I was most comfortable with, plus a smattering of other languages (R, C, JavaScript, etc&amp;#8230; Pascal, Applescript, Hypertext and &lt;span class="caps"&gt;BASIC&lt;/span&gt;, which I learned in 1979, if you go far back enough). A couple of years ago, I decided to use Python exclusively so that I could improve my coding. I ended up re-inventing many wheels &amp;#8212; which I didn&amp;#8217;t mind too much, because I enjoy solving puzzles. But sometimes it&amp;#8217;s good to have a more efficient, Pythonesque approach, and time after time I found myself having &amp;#8220;aha!&amp;#8221; moments, realizing I&amp;#8217;d been doing things the hard, excessively verbose way for no reason. Here is a list of ten Python idioms that would have made my life much easier if I&amp;#8217;d thought to search for them early&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Missing from this list are some idioms such as list comprehensions and lambda functions, which are very Pythonesque and very efficient and very cool, but also very difficult to miss because they&amp;#8217;re mentioned on StackOverflow every other answer! Also ternary x if y else z constructions, decorators and generators, because I don&amp;#8217;t use them very&amp;nbsp;often.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also an 
&lt;a href="http://nbviewer.ipython.org/github/Prooffreader/Misc_ipynb/blob/master/top_10_python_idioms.ipynb"&gt;IPython notebook nbviewer version&lt;/a&gt; of this document if you&amp;nbsp;prefer.&lt;/p&gt;
&lt;h2 id="1-python-3-style-printing-in-python-2"&gt;1. Python 3-style printing in Python 2&lt;a class="headerlink" href="#1-python-3-style-printing-in-python-2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things that kept me from concentrating on Python was this whole version 2 - version 3 debacle. Finally I went with Python 2 because all the libraries I wanted were not 3-compatible, and I figured if I needed to, I would laboriously adjust my code&amp;nbsp;later. &lt;/p&gt;
&lt;p&gt;But really, the biggest differences in everyday programming are printing and division, and now I just import from future. Now that almost all the libraries I use heavily are v3-compliant, I&amp;#8217;ll make the switch&amp;nbsp;soon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python 2:&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The number is &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Python 3:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The number is {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, and here&amp;#8217;s an easter egg for C&amp;nbsp;programmers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;braces&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ipython-input-3-2aebb3fc8ecf&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;braces&lt;/span&gt;
&lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;chance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="2-enumeratelist"&gt;2. enumerate(list)&lt;a class="headerlink" href="#2-enumeratelist" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might seem obvious that you should be able to iterate over a list and its index at the same time, but I used counter variables or slices for an embarrassingly long&amp;nbsp;time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mylist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;only&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mylist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;0 It&amp;#39;s&lt;/span&gt;
&lt;span class="err"&gt;1 only&lt;/span&gt;
&lt;span class="err"&gt;2 a&lt;/span&gt;
&lt;span class="err"&gt;3 model&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="3-chained-comparison-operators"&gt;3. Chained comparison operators&lt;a class="headerlink" href="#3-chained-comparison-operators" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because I was so used to statically typed languages (where this idiom would be ambiguous), it never occurred to me to put two operators in the same expression. In many languages, 4 &amp;gt; 3 &amp;gt; 2 would return as False, because (4 &amp;gt; 3) would be evaluated as a boolean, and then True &amp;gt; 2 would be evaluated as&amp;nbsp;False.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Chained comparison operators work! \n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Chained comparison operators work! &lt;/span&gt;
&lt;span class="err"&gt;Chained comparison operators work! &lt;/span&gt;
&lt;span class="err"&gt;Chained comparison operators work!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="4-collectionscounter"&gt;4. collections.Counter&lt;a class="headerlink" href="#4-collectionscounter" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The collections library is, like, the best thing ever. Stackoverflow turned me on to ordered dicts early on, but I kept using a snippet to create dicts to count occurrences of results in my code. One of these days, I&amp;#8217;ll figure out a use for&amp;nbsp;collections.deque.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="n"&gt;mycounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;random_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mycounter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mycounter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;0 10&lt;/span&gt;
&lt;span class="err"&gt;1 10&lt;/span&gt;
&lt;span class="err"&gt;2 13&lt;/span&gt;
&lt;span class="err"&gt;3 6&lt;/span&gt;
&lt;span class="err"&gt;4 6&lt;/span&gt;
&lt;span class="err"&gt;5 11&lt;/span&gt;
&lt;span class="err"&gt;6 10&lt;/span&gt;
&lt;span class="err"&gt;7 14&lt;/span&gt;
&lt;span class="err"&gt;8 12&lt;/span&gt;
&lt;span class="err"&gt;9 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="5-dict-comprehensions"&gt;5. Dict comprehensions&lt;a class="headerlink" href="#5-dict-comprehensions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A rite of passage for a Python programmer is understanding list comprehensions, but eventually I realized dict comprehensions are just as useful &amp;#8212; especially for reversing&amp;nbsp;dicts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;expects&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;the&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Spanish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Inquisition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_phrase&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reversed_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reversed_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;{&amp;#39;Inquisition&amp;#39;: 5, &amp;#39;No&amp;#39;: 0, &amp;#39;expects&amp;#39;: 2, &amp;#39;one&amp;#39;: 1, &amp;#39;Spanish&amp;#39;: 4, &amp;#39;the&amp;#39;: 3}&lt;/span&gt;
&lt;span class="err"&gt;{0: &amp;#39;No&amp;#39;, 1: &amp;#39;one&amp;#39;, 2: &amp;#39;expects&amp;#39;, 3: &amp;#39;the&amp;#39;, 4: &amp;#39;Spanish&amp;#39;, 5: &amp;#39;Inquisition&amp;#39;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="6-executing-shell-commands-with-subprocess"&gt;6. Executing shell commands with subprocess&lt;a class="headerlink" href="#6-executing-shell-commands-with-subprocess" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used to use the os library exclusively to manipulate files; now I can even programmatically call complex command-line tools like ffmpeg for video&amp;nbsp;editing&lt;/p&gt;
&lt;p&gt;(And yes, I use Windows, so do all of my clients. But I have the good grace to be embarrassed about&amp;nbsp;it!)&lt;/p&gt;
&lt;p&gt;Note that the particular subprocess I picked would be much better done with the os library; I just wanted a command everyone would be familiar with. And in general, shell=True is a &lt;span class="caps"&gt;VERY&lt;/span&gt; bad idea, I put it here so that the command output would appear in the IPython notebook cell. Don&amp;#8217;t try this at home,&amp;nbsp;kids!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;drive&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;OS&lt;/span&gt;
 &lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;REDACTED&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Users&lt;/span&gt;\&lt;span class="n"&gt;David&lt;/span&gt;\&lt;span class="n"&gt;Documents&lt;/span&gt;\&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;REDACTED&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;2014-11-26  06:04 AM    &amp;lt;DIR&amp;gt;          .&lt;/span&gt;
&lt;span class="err"&gt;2014-11-26  06:04 AM    &amp;lt;DIR&amp;gt;          ..&lt;/span&gt;
&lt;span class="err"&gt;2014-11-23  11:47 AM    &amp;lt;DIR&amp;gt;          .git&lt;/span&gt;
&lt;span class="err"&gt;2014-11-26  06:06 AM    &amp;lt;DIR&amp;gt;          .ipynb_checkpoints&lt;/span&gt;
&lt;span class="err"&gt;2014-11-23  08:59 AM    &amp;lt;DIR&amp;gt;          CCCma&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM            19,450 colorbrewdict.py&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM            92,175 imagecompare.ipynb&lt;/span&gt;
&lt;span class="err"&gt;2014-11-23  08:41 AM    &amp;lt;DIR&amp;gt;          Japan_Earthquakes&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM             1,100 LICENSE&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM             5,263 monty_monte.ipynb&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM            31,082 pocket_tumblr_reddit_api.ipynb&lt;/span&gt;
&lt;span class="err"&gt;2014-11-26  06:04 AM             3,211 README.md&lt;/span&gt;
&lt;span class="err"&gt;2014-11-26  06:14 AM            19,898 top_10_python_idioms.ipynb&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM             5,813 tree_convert_mega_to_gexf.ipynb&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM             5,453 tree_convert_mega_to_json.ipynb&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM             1,211 tree_convert_newick_to_json.py&lt;/span&gt;
&lt;span class="err"&gt;2014-09-03  06:58 AM            55,970 weather_ML.ipynb&lt;/span&gt;
&lt;span class="err"&gt;              11 File(s)        240,626 bytes&lt;/span&gt;
&lt;span class="err"&gt;               6 Dir(s)  180,880,490,496 bytes free&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="7-dict-get-and-iteritems-methods"&gt;7. dict .get() and .iteritems() methods&lt;a class="headerlink" href="#7-dict-get-and-iteritems-methods" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having a default value when a key does not exist has all kinds of uses, and just like enumerate() for lists, you can iterate over key, value tuples in&amp;nbsp;dicts&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lancelot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;quest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Holy Grail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favourite_color&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;airspeed velocity of an unladen swallow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;African or European?\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;African&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;European&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;

&lt;span class="n"&gt;quest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Holy&lt;/span&gt; &lt;span class="n"&gt;Grail&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Lancelot&lt;/span&gt;
&lt;span class="n"&gt;favourite_color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="8-tuple-unpacking-for-switching-variables"&gt;8. Tuple unpacking for switching variables&lt;a class="headerlink" href="#8-tuple-unpacking-for-switching-variables" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do you know how many times I had to use a third, temporary dummy variable in &lt;span class="caps"&gt;VB&lt;/span&gt;? c = a; a = b; b =&amp;nbsp;c?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Spam&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Eggs&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Spam Eggs&lt;/span&gt;
&lt;span class="err"&gt;Eggs Spam&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="9-introspection-tools"&gt;9. Introspection tools&lt;a class="headerlink" href="#9-introspection-tools" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was aware of dir(), but I had assumed help() would do the same thing as IPython&amp;#8217;s ? magic command. It does way more. (This post has been updated after some great advice from reddit&amp;#8217;s /r/python which, indeed, I wish I&amp;#8217;d known about&amp;nbsp;before!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;That&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;an ex-parrot!&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Help on dict&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;dictionary&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;dictionary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s&lt;/span&gt;
&lt;span class="s1"&gt; |      (key, value) pairs&lt;/span&gt;
&lt;span class="s1"&gt; |  dict(iterable) -&amp;gt; new dictionary initialized as if via:&lt;/span&gt;
&lt;span class="s1"&gt; |      d = {}&lt;/span&gt;
&lt;span class="s1"&gt; |      for k, v in iterable:&lt;/span&gt;
&lt;span class="s1"&gt; |          d[k] = v&lt;/span&gt;
&lt;span class="s1"&gt; |  dict(**kwargs) -&amp;gt; new dictionary initialized with the name=value pairs&lt;/span&gt;
&lt;span class="s1"&gt; |      in the keyword argument list.  For example:  dict(one=1, two=2)&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  Methods defined here:&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  __cmp__(...)&lt;/span&gt;
&lt;span class="s1"&gt; |      x.__cmp__(y) &amp;lt;==&amp;gt; cmp(x,y)&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  __contains__(...)&lt;/span&gt;
&lt;span class="s1"&gt; |      D.__contains__(k) -&amp;gt; True if D has a key k, else False&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  __delitem__(...)&lt;/span&gt;
&lt;span class="s1"&gt; |      x.__delitem__(y) &amp;lt;==&amp;gt; del x[y]&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  __eq__(...)&lt;/span&gt;
&lt;span class="s1"&gt; |      x.__eq__(y) &amp;lt;==&amp;gt; x==y&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;

&lt;span class="s1"&gt;[TRUNCATED FOR SPACE]&lt;/span&gt;

&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  update(...)&lt;/span&gt;
&lt;span class="s1"&gt; |      D.update([E, ]**F) -&amp;gt; None.  Update D from dict/iterable E and F.&lt;/span&gt;
&lt;span class="s1"&gt; |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]&lt;/span&gt;
&lt;span class="s1"&gt; |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v&lt;/span&gt;
&lt;span class="s1"&gt; |      In either case, this is followed by: for k in F: D[k] = F[k]&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  values(...)&lt;/span&gt;
&lt;span class="s1"&gt; |      D.values() -&amp;gt; list of D&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;viewitems&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewitems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;providing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s items&lt;/span&gt;
&lt;span class="s1"&gt; |  &lt;/span&gt;
&lt;span class="s1"&gt; |  viewkeys(...)&lt;/span&gt;
&lt;span class="s1"&gt; |      D.viewkeys() -&amp;gt; a set-like object providing a view on D&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;viewvalues&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viewvalues&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;providing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;----------------------------------------------------------------------&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;Data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;here&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;__hash__&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;subtype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="10-pep-8-compliant-string-chaining"&gt;10. &lt;span class="caps"&gt;PEP&lt;/span&gt;-8 compliant string chaining&lt;a class="headerlink" href="#10-pep-8-compliant-string-chaining" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008"&gt;&lt;span class="caps"&gt;PEP8&lt;/span&gt;&lt;/a&gt;
is the style guide for Python code. Among other things, it directs that lines not be over 80 characters long and that indenting by consistent over line&amp;nbsp;breaks.&lt;/p&gt;
&lt;p&gt;This can be accomplished with a combination of backslashes \; parentheses () with commas , ; and addition operators +; but every one of these solutions is awkward for multiline strings. There is a multiline string signifier, the triple quote, but it does not allow consistent indenting over line&amp;nbsp;breaks. &lt;/p&gt;
&lt;p&gt;There is a solution: parentheses without commas. I don&amp;#8217;t know why this works, but I&amp;#8217;m glad it&amp;nbsp;does.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;my_long_text = (&amp;quot;We are no longer the knights who say Ni! &amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;                &amp;quot;We are now the knights who say ekki-ekki-&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;                &amp;quot;ekki-p&amp;#39;tang-zoom-boing-z&amp;#39;nourrwringmm!&amp;quot;)&lt;/span&gt;
&lt;span class="err"&gt;print(my_long_text)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are no longer the knights who say Ni! We are now the knights who say&amp;nbsp;ekki-ekki-ekki-p&amp;#8217;tang-zoom-boing-z&amp;#8217;nourrwringmm!&lt;/p&gt;
&lt;h2 id="_1"&gt;是也乎&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;141130 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="Pythonic"></category><category term="FW"></category><category term="idioms"></category><category term="tutorial"></category></entry><entry><title>寻路ing Guido van Rossum</title><link href="https://blog.zoomquiet.io/guido-finding-his-way.html" rel="alternate"></link><published>2014-09-21T13:13:13+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-09-21:/guido-finding-his-way.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;程序猿前,你是如何成为电子爱好者的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;那会儿子是怎么聚集小伙伴们的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;最后乍从电子转变为程序猿的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;对计算机科学的兴趣所在?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mog"&gt;&lt;span class="caps"&gt;MOG&lt;/span&gt;,乍回事儿?!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;推上曰过:&amp;#8221;在米国我是荷兰人,但在荷兰我又表现的很美国#纠结&amp;#8221;,那么哪儿是你感觉最象自家的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox"&gt;在Dropbox最近折腾了什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;带团队,还是更加独立?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox_1"&gt;进入 Dropbox&amp;nbsp;时,你要求当程序猿而不是经理,这对你很重要嘛?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox-python-bdfl"&gt;你乍平衡 Dropbox 工程师和 Python &lt;span class="caps"&gt;BDFL&lt;/span&gt;&amp;nbsp;两种角色的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox_2"&gt;在 Dropbox&amp;nbsp;的工作什么令你最得劲?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hack-week"&gt;你在 Hack Week&amp;nbsp;的项目是什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;为毛你选择静态类型这一项目?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;如何平衡程序猿最新需求和 Python&amp;nbsp;长线版本间的冲突?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python_1"&gt;有想过从 Python 社区退休?&amp;nbsp;有规划这事儿卟?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python_2"&gt;有没担心过更多新语言出现并替代 Python&amp;nbsp;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;在 给年轻程序猿的信&amp;nbsp;中,你号召要有大梦想,可现实挑战是大梦想忒多了,面对这么多的机会,你有什么建议给早鸟们 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;程序猿前,你是如何成为电子爱好者的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;那会儿子是怎么聚集小伙伴们的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;最后乍从电子转变为程序猿的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;对计算机科学的兴趣所在?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mog"&gt;&lt;span class="caps"&gt;MOG&lt;/span&gt;,乍回事儿?!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;推上曰过:&amp;#8221;在米国我是荷兰人,但在荷兰我又表现的很美国#纠结&amp;#8221;,那么哪儿是你感觉最象自家的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox"&gt;在Dropbox最近折腾了什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;带团队,还是更加独立?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox_1"&gt;进入 Dropbox&amp;nbsp;时,你要求当程序猿而不是经理,这对你很重要嘛?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox-python-bdfl"&gt;你乍平衡 Dropbox 工程师和 Python &lt;span class="caps"&gt;BDFL&lt;/span&gt;&amp;nbsp;两种角色的?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dropbox_2"&gt;在 Dropbox&amp;nbsp;的工作什么令你最得劲?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hack-week"&gt;你在 Hack Week&amp;nbsp;的项目是什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;为毛你选择静态类型这一项目?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;如何平衡程序猿最新需求和 Python&amp;nbsp;长线版本间的冲突?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python_1"&gt;有想过从 Python 社区退休?&amp;nbsp;有规划这事儿卟?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python_2"&gt;有没担心过更多新语言出现并替代 Python&amp;nbsp;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;在 给年轻程序猿的信&amp;nbsp;中,你号召要有大梦想,可现实挑战是大梦想忒多了,面对这么多的机会,你有什么建议给早鸟们?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changlog"&gt;Changlog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://medium.com/dropbox-makers/guido-van-rossum-on-finding-his-way-e018e8b5f6b1"&gt;Guido van Rossum on finding his way — Dropbox Makers —&amp;nbsp;Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;~ Python 缔造者,当前 Dropbox 工程师,&amp;nbsp;近期编程思考&lt;/p&gt;
&lt;p&gt;Guido van Rossum 作为Python 的创造者,
以及 &lt;code&gt;仁慈的独裁者&lt;/code&gt; (又名 &lt;span class="caps"&gt;BDFL&lt;/span&gt;).
在此篇采访中,反思了近来的思考,
以及在 Dropbox 的经历.&amp;nbsp;本文也召示了接下来老爹准备折腾什么.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt; 大妈无责任式快译, 只是作为私人阅读笔记性质的存在,
强烈建议大家去原文自行理解一番,并能拨冗回来指点大妈的理解之谬&amp;nbsp;;-)&lt;/p&gt;
&lt;h2 id="_1"&gt;程序猿前,你是如何成为电子爱好者的?&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;嚓了,这事儿忒久了,久到基本记忆不能了,&amp;nbsp;只是记得以前对电子很迷就是了.&lt;/p&gt;
&lt;h2 id="_2"&gt;那会儿子是怎么聚集小伙伴们的?&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;高中时在课堂上相遇的,&amp;nbsp;一起折腾物理老师指导下的各种电子设备.&lt;/p&gt;
&lt;p&gt;整个高中只是对未来职业有个模糊的概念,
认定自个儿在语言/社科上是没什么天份的,&amp;nbsp;所以,决定进入数学专业.&lt;/p&gt;
&lt;h2 id="_3"&gt;最后乍从电子转变为程序猿的?&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在Amsterdam大学,折腾数学时,
涉及有编程,接触到大型计算机后,&amp;nbsp;立即发现了俺真正的激情所在.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AOw_zZbFbtEJAzwRQ" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*5Z4e-AOw_zZbFbtEJAzwRQ.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;~ 旧金山 Dropbox 内的 Hack week 上,Guido 谈及了Py 3 / Dan Stroud&amp;nbsp;拍摄&lt;/p&gt;
&lt;h2 id="_4"&gt;对计算机科学的兴趣所在?&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过业余电子爱好,接触到了一系列计算设备,
得以真正理解计算机,
并确信,编程比电子好玩的多.&amp;nbsp;而数学,无论多高端的课目,好象都和自己没什么关系.&lt;/p&gt;
&lt;p&gt;但是,专业上那时,没有办法灵活的转变方向,
于是俺申请了大学数据中心兼职位置,
开始长达5年的自学,&amp;nbsp;即,本质上几近辍学.&lt;/p&gt;
&lt;h2 id="mog"&gt;&lt;span class="caps"&gt;MOG&lt;/span&gt;,乍回事儿?!&lt;a class="headerlink" href="#mog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这份工作很赞,
而且,遇到了好人,
数据中心的一位教授鼓励俺说: &amp;#8220;小子,不错嘦你毕业,这儿可以是你的全职岗位!&amp;#8221;&amp;nbsp;(笑ing)&lt;/p&gt;
&lt;p&gt;结果就这么在岗位上毕业,并进入了研究所,&amp;nbsp;真的全职程序猿了.&lt;/p&gt;
&lt;h2 id="_5"&gt;推上曰过:&amp;#8221;在米国我是荷兰人,但在荷兰我又表现的很美国#纠结&amp;#8221;,那么哪儿是你感觉最象自家的?&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当然,在自个儿屋子里时..&amp;nbsp;(笑ing)&lt;/p&gt;
&lt;p&gt;俺老婆是老美,两儿子也都说E文,
在米国也呆了超过18年,&amp;nbsp;已经很难想象会回欧洲了!&lt;/p&gt;
&lt;p&gt;目测余生多数时间肯定在米国了,&amp;nbsp;而且就在湾区,这绝对是一个伟大的地方.&lt;/p&gt;
&lt;h2 id="dropbox"&gt;在Dropbox最近折腾了什么?&lt;a class="headerlink" href="#dropbox" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;俺已经完成
&lt;a href="https://www.dropbox.com/developers/datastore"&gt;Datastore &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;
有日子了,
今天上线,将发布给用户为
&lt;a href="https://www.dropbox.com/developers/blog/107/new-datastore-features-shared-datastores-local-datastores-and-datastore-webhooks"&gt;share&amp;nbsp;datastores&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="NMJBScQgtLZE0zmeOA1nJw" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*NMJBScQgtLZE0zmeOA1nJw.png"&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;带团队,还是更加独立?&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于这一特殊的数据功能,
俺独立完成主要工作,
另外两位,主要进行测试,
在发布后,将会融入更大的团队,
并接纳实习生&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;h2 id="dropbox_1"&gt;进入 Dropbox 时,你要求当程序猿而不是经理,这对你很重要嘛?&lt;a class="headerlink" href="#dropbox_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为俺更加喜欢实际的编程,
以往俺被关进了一个团队,
无论编程还是作管理,
从来没有令俺舒服过.
当然,随着时间的推移,俺的领导能力有所增长,&amp;nbsp;可是,终究,俺是喜欢编程多过告诉其它人应该怎么作.&lt;/p&gt;
&lt;h2 id="dropbox-python-bdfl"&gt;你乍平衡 Dropbox 工程师和 Python &lt;span class="caps"&gt;BDFL&lt;/span&gt; 两种角色的?&lt;a class="headerlink" href="#dropbox-python-bdfl" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在时间管理方面,
这两个角色的确是冲突的.&amp;nbsp;我并没有进行强制性的预订,为这两种角色.&lt;/p&gt;
&lt;p&gt;实践中,哪个角色必须投入更多精力时,&amp;nbsp;就相应的减少另一个角色的.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AriSTNW_leEP85c7r" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*AriSTNW_leEP85c7r-wcew.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;~ 在DBX 2013 上 Guido 介绍 Dropbox 的数据存储. / Doug Cody&amp;nbsp;拍摄&lt;/p&gt;
&lt;h2 id="dropbox_2"&gt;在 Dropbox 的工作什么令你最得劲?&lt;a class="headerlink" href="#dropbox_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在这儿,最令人满意的无外乎,
能见到这么堆热情/专注/有生产力/强大的人,&amp;nbsp;如此热衷的在推动产品和功能.&lt;/p&gt;
&lt;p&gt;身处其中,本身就非常赞!&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;
细思恐极哪,这意味着 Google 的团队的确如 &lt;code&gt;王珢&lt;/code&gt; 所言,
不是那么的&amp;#8230;&amp;nbsp;)&lt;/p&gt;
&lt;h2 id="hack-week"&gt;你在 Hack Week 的项目是什么?&lt;a class="headerlink" href="#hack-week" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python 的静态类型.
来源自我们的一位实习工程师, Jukka Lehtosalo 的博士论文,
他实际上完成了一个原型,
在一周时间里,
我们一组7&amp;nbsp;人,对原型进行了改进,并完成了大量的工具.&lt;/p&gt;
&lt;p&gt;至今并没有形成完备的产品,&amp;nbsp;但是,大家都很期待这一够力的创意能产生出什么来.&lt;/p&gt;
&lt;h2 id="_7"&gt;为毛你选择静态类型这一项目?&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;俺认为增加静态类型,
对未来是有益的,
至少能先帮助 Dropbox 转换自身的 Python 2 和 3&amp;nbsp;的代码&lt;/p&gt;
&lt;p&gt;&lt;img alt="yemdZovwCmvm7b2Dkm6SRQ" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*yemdZovwCmvm7b2Dkm6SRQ.png"&gt;&lt;/p&gt;
&lt;p&gt;Dropbox 的第一行代码就是Python.
而 Python Bees 将成为 &lt;span class="caps"&gt;DBX&lt;/span&gt; 以及 更早 Dropbox hack weeks&amp;nbsp;的新特性.&lt;/p&gt;
&lt;h2 id="python"&gt;如何平衡程序猿最新需求和 Python 长线版本间的冲突?&lt;a class="headerlink" href="#python" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python 有一个很大的团队,
长期审核进入 Python 的特性.&amp;nbsp;在经过20多年的运营,我们已经很熟悉这一编程语言应该坚守的东西.&lt;/p&gt;
&lt;p&gt;语言变化太快,用户将抱怨项目总是无法稳定;
变化太慢,程序猿就抱怨错误总是不修订或是要求的功能从来不响应;&amp;nbsp;这里有种非常微妙的平衡在其中!&lt;/p&gt;
&lt;p&gt;所以,一般情况下,将变化快的东西,放在库中支持,
优先确保核心语言特性的稳定,&amp;nbsp;这样大家都根据需要安装对应的开源库就好.&lt;/p&gt;
&lt;p&gt;学习到这点,对俺来说非常不可思异.
目前俺处于非常舒适的状态,&amp;nbsp;即使现在俺退出,后续开发者也能理解怎么取舍的.&lt;/p&gt;
&lt;h2 id="python_1"&gt;有想过从 Python 社区退休? 有规划这事儿卟?&lt;a class="headerlink" href="#python_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(笑ing)
这是一个很好的组合问题.
因为,俺的确有这么想过,&amp;nbsp;不过,当前还仅仅是想着.&lt;/p&gt;
&lt;h2 id="python_2"&gt;有没担心过更多新语言出现并替代 Python ?&lt;a class="headerlink" href="#python_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为发现的一种现象,令俺从未不担心这事儿.&lt;/p&gt;
&lt;p&gt;那就是总是有人在切换开发语言,
他们花了 三周/6周/两年, 就成为某种语言专家.
基于这种经验,他们就担心,
对 Python&amp;nbsp;的学习,可能也很快过时,必须重新开始.&lt;/p&gt;
&lt;p&gt;我见过各种语言/系统的普及以及更替,
但是,我不知道 Python 的这种兴衰周期,
5年?15年?
我当然希望 Python 持续吸收新的语言特性,发展下去,适应新的时代.
同时也期待,有更好的语言,借用 Python 的思想,&amp;nbsp;在不同的形式上结合其它语言,发展出不同的道路来.&lt;/p&gt;
&lt;p&gt;&lt;img alt="omEEAJapdc0XY9IfR" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*omEEAJapdc0XY9IfR-mFlA.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;~ 在 &lt;span class="caps"&gt;DBX&lt;/span&gt; 2013 Python Bee 集会上,Guido 和 Dropbox &lt;span class="caps"&gt;CEO&lt;/span&gt; Drew Houston 
联手庆贺. /  Doug Cody&amp;nbsp;拍摄&lt;/p&gt;
&lt;p&gt;&lt;img alt="4saVabl5aGfdTVuPLBNBCQ" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*4saVabl5aGfdTVuPLBNBCQ.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ziwbjd1WMkmuuoFK9q0Q" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*w-ziwbjd1WMkmuuoFK9q0Q.jpeg"&gt;&lt;/p&gt;
&lt;h2 id="_8"&gt;在 &lt;a href="http://neopythonic.blogspot.com/2013/10/letter-to-young-programmer.html"&gt;给年轻程序猿的信&lt;/a&gt; 中,你号召要有大梦想,可现实挑战是大梦想忒多了,面对这么多的机会,你有什么建议给早鸟们?&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;中译: &lt;a href="http://blog.zoomquiet.io/guido-letter-2-young.html"&gt;Letter to a young programmer&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;早期职业生涯?
俺可能没有什么很好的经验,
因为,俺可是用了很长时间,才明白自个儿应该作什么的.&amp;nbsp;回想,基本上只是开开心心的编程,一切就自然来到面前.&lt;/p&gt;
&lt;p&gt;实际上,俺从来没有争取过什么工作,&amp;nbsp;只是等待,直到有人询问合作意愿,才进行考虑.&lt;/p&gt;
&lt;p&gt;我从不强调一切在掌握之中,
的确有那么一种病叫:&lt;code&gt;怕错过&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上,&amp;nbsp;那些尝试控制一切的人并没有比我多快乐些什么.&lt;/p&gt;
&lt;p&gt;所以,对于长期职业,你并不能真正控制一切.
有时,对一件事儿决定太快,&amp;nbsp;你可能就真正错过了一次意想不到机会.&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;a class="headerlink" href="#changlog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140921 蠎周刊:133&amp;nbsp;期,推荐文章,不自觉的认真读完,形成了这一快译.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="DAMA"></category><category term="Pythoneer"></category><category term="Guido"></category></entry><entry><title>Python 101: 传播Python时几点建议</title><link href="https://blog.zoomquiet.io/py101-taching-suggestions.html" rel="alternate"></link><published>2014-08-08T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-08-08:/py101-taching-suggestions.html</id><summary type="html">&lt;p&gt;&lt;img alt="/chinese-python-poster" src="https://datalabcc.files.wordpress.com/2014/05/chinese-python-poster.jpg?w=590"&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-floating-point-results-from-integer-division"&gt;Getting floating point results from integer&amp;nbsp;division&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-python-23-syntax-for-printing-values"&gt;Common Python 2/3 syntax for printing&amp;nbsp;values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distinguishing-between-returning-and-printing-values"&gt;Distinguishing between returning and printing&amp;nbsp;values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#addendum-ipython-including-ipython-notebook"&gt;Addendum: IPython (including IPython&amp;nbsp;Notebook)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;来自: &lt;a href="http://www.curiousefficiency.org/posts/2014/08/python-teaching-suggestions.html"&gt;Some Suggestions for Teaching Python | Curious Efficiency&lt;/a&gt; 
Nick Coghlan
2014-08-08&amp;nbsp;12:55&lt;/p&gt;
&lt;p&gt;I recently had the chance to attend a Software Carpentry …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="/chinese-python-poster" src="https://datalabcc.files.wordpress.com/2014/05/chinese-python-poster.jpg?w=590"&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-floating-point-results-from-integer-division"&gt;Getting floating point results from integer&amp;nbsp;division&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-python-23-syntax-for-printing-values"&gt;Common Python 2/3 syntax for printing&amp;nbsp;values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distinguishing-between-returning-and-printing-values"&gt;Distinguishing between returning and printing&amp;nbsp;values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#addendum-ipython-including-ipython-notebook"&gt;Addendum: IPython (including IPython&amp;nbsp;Notebook)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;来自: &lt;a href="http://www.curiousefficiency.org/posts/2014/08/python-teaching-suggestions.html"&gt;Some Suggestions for Teaching Python | Curious Efficiency&lt;/a&gt; 
Nick Coghlan
2014-08-08&amp;nbsp;12:55&lt;/p&gt;
&lt;p&gt;I recently had the chance to attend a Software Carpentry bootcamp at the University of Queensland (as a teaching assistant), as well as seeing a presentation from one of &lt;span class="caps"&gt;UQ&lt;/span&gt;&amp;#8217;s tutors at PyCon Australia&amp;nbsp;2014.&lt;/p&gt;
&lt;p&gt;While many of the issues they encountered were inherent in the complexity of teaching programming, a few seemed like things that could be&amp;nbsp;avoided.&lt;/p&gt;
&lt;h2 id="getting-floating-point-results-from-integer-division"&gt;Getting floating point results from integer division&lt;a class="headerlink" href="#getting-floating-point-results-from-integer-division" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Python 2, integer division copies C in truncating the answer by&amp;nbsp;default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python -c &lt;span class="s2"&gt;&amp;quot;print(3/4)&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Promoting to floating point requires type coercion, a command line flag or a future&amp;nbsp;import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;print(float(3)/4)&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;0.75&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Qnew&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;print(3/4)&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;0.75&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from __future__ import division; print(3/4)&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;0.75&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3 just does the right thing by default, so one way to avoid the problem entirely is to teach Python 3 instead of Python&amp;nbsp;2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 -c &lt;span class="s2"&gt;&amp;quot;print(3/4)&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;.75
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In both Python 2 and 3, the &lt;code&gt;//&lt;/code&gt; floor division operator explicitly requests truncating division when it is&amp;nbsp;desired)&lt;/p&gt;
&lt;h2 id="common-python-23-syntax-for-printing-values"&gt;Common Python 2/3 syntax for printing values&lt;a class="headerlink" href="#common-python-23-syntax-for-printing-values" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been using Python 2 and 3 in parallel for more than 8 years now (while Python 3.0 was released in 2008, the project started in earnest a couple of years earlier than that, while Python 2.5 was still in&amp;nbsp;development).&lt;/p&gt;
&lt;p&gt;One essential trick I have learned in order to make regularly switching back and forth feasible is to limit myself to the common print syntax that works the same in both versions: passing a single argument surrounded by&amp;nbsp;parentheses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python -c &lt;span class="s1"&gt;&amp;#39;print(&amp;quot;Hello world!&amp;quot;)&amp;#39;&lt;/span&gt;
Hello world!
$ python3 -c &lt;span class="s1"&gt;&amp;#39;print(&amp;quot;Hello world!&amp;quot;)&amp;#39;&lt;/span&gt;
Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If I need to pass multiple arguments, I&amp;#8217;ll use string formatting, rather than the implicit concatenation&amp;nbsp;feature.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python -c &lt;span class="s1"&gt;&amp;#39;print(&amp;quot;{} {}{}&amp;quot;.format(&amp;quot;Hello&amp;quot;, &amp;quot;world&amp;quot;, &amp;quot;!&amp;quot;))&amp;#39;&lt;/span&gt;
Hello world!
$ python3 -c &lt;span class="s1"&gt;&amp;#39;print(&amp;quot;{} {}{}&amp;quot;.format(&amp;quot;Hello&amp;quot;, &amp;quot;world&amp;quot;, &amp;quot;!&amp;quot;))&amp;#39;&lt;/span&gt;
Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rather than doing this, the Software Carpentry material that was used at the bootcamp I attended used the legacy Python 2 only &lt;code&gt;print&lt;/code&gt; syntax extensively, causing examples that otherwise would have worked fine in either version to fail for students that happened to be running Python 3. Adopting the shared syntax for printing values could be enough to make the course largely version&amp;nbsp;independent.&lt;/p&gt;
&lt;h2 id="distinguishing-between-returning-and-printing-values"&gt;Distinguishing between returning and printing values&lt;a class="headerlink" href="#distinguishing-between-returning-and-printing-values" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One problem noted both at the bootcamp and by presenters at PyCon Australia was the challenge of teaching students the difference between printing and returning values. The problem is the &amp;#8220;Print&amp;#8221; part of the Read-Eval-Print-Loop provided by Python&amp;#8217;s interactive&amp;nbsp;interpreter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; def print_arg(x):&lt;/span&gt;
&lt;span class="err"&gt;...     print(x)&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; def return_arg(x):&lt;/span&gt;
&lt;span class="err"&gt;...     return x&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; print_arg(10)&lt;/span&gt;
&lt;span class="err"&gt;10&lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; return_arg(10)&lt;/span&gt;
&lt;span class="err"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;#8217;s no obvious difference in output at the interactive prompt, especially for types like numbers where the results of &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;repr&lt;/code&gt; are the same. Even when they&amp;#8217;re different, those differences may not be obvious to a&amp;nbsp;student:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; print_arg(&amp;quot;Hello world&amp;quot;)&lt;/span&gt;
&lt;span class="err"&gt;Hello world&lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; return_arg(&amp;quot;Hello world&amp;quot;)&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While I don&amp;#8217;t have a definitive answer for this one, an experiment that seems worth trying to me is to teach students how to replace &lt;code&gt;sys.displayhook&lt;/code&gt;. 
In particular, I suggest demonstrating the following change, and seeing if it helps explain the difference between printing output for display to the user and returning values for further&amp;nbsp;processing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_displayhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;gt; {!r}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayhook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_displayhook&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;return_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Understanding the difference between printing and returning is essential to learning to use functions effectively, and tweaking the display of results this way may help make the difference more&amp;nbsp;obvious.&lt;/p&gt;
&lt;h2 id="addendum-ipython-including-ipython-notebook"&gt;Addendum: IPython (including IPython Notebook)&lt;a class="headerlink" href="#addendum-ipython-including-ipython-notebook" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial examples above focused on the standard CPython runtime, include the default interactive interpreter. The IPython interactive interpreter, including the IPython Notebook, has a couple of interesting differences in behaviour that are relevant to the above&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;Firstly, it does display return values and printed values differently, prefacing results with an output reference&amp;nbsp;number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="k"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Secondly, it has an optional &amp;#8220;autocall&amp;#8221; feature that allows a user to tell IPython to automatically add the missing parentheses to a function call if the user leaves them&amp;nbsp;out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ipython3 --autocall&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;print 10&amp;quot;&lt;/span&gt;
-&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a general purpose feature that allows users to make their IPython sessions behave more like languages that don&amp;#8217;t have first class functions (most notably, IPython&amp;#8217;s autocall feature closely resembles &lt;span class="caps"&gt;MATLAB&lt;/span&gt;&amp;#8217;s &amp;#8220;command syntax&amp;#8221; notation for calling&amp;nbsp;functions).&lt;/p&gt;
&lt;p&gt;It also has the side effect that users that use IPython, have autocall enabled, and don&amp;#8217;t use any of the more esoteric quirks of the Python 2 &lt;code&gt;print&lt;/code&gt; statement (like stream redirection or suppressing the trailing newline) may not even notice that &lt;code&gt;print&lt;/code&gt; became an ordinary builtin in Python&amp;nbsp;3.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140811 翻译 Weekly issue:127&amp;nbsp;时发现,转译学习&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="press"></category><category term="101"></category><category term="Zh"></category></entry><entry><title>为毛俺不担心所谓Python用户流失</title><link href="https://blog.zoomquiet.io/why-i-dont-worry-about-pythons-popularity.html" rel="alternate"></link><published>2014-07-11T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-07-11:/why-i-dont-worry-about-pythons-popularity.html</id><summary type="html">&lt;h2 id="why-i-dont-worry-about-python-losing-users"&gt;Why I don&amp;#8217;t worry about Python losing users&lt;a class="headerlink" href="#why-i-dont-worry-about-python-losing-users" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I just had a need to read two files that were line-delimited lists of domains, consolidate the data, and then output the domains sorted and all lowercased to a new file. It took me 10 lines of Python code and worked …&lt;/p&gt;</summary><content type="html">&lt;h2 id="why-i-dont-worry-about-python-losing-users"&gt;Why I don&amp;#8217;t worry about Python losing users&lt;a class="headerlink" href="#why-i-dont-worry-about-python-losing-users" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I just had a need to read two files that were line-delimited lists of domains, consolidate the data, and then output the domains sorted and all lowercased to a new file. It took me 10 lines of Python code and worked perfectly on the first&amp;nbsp;try.&lt;/p&gt;
&lt;p&gt;Out of curiosity and to make sure I keep learning Go (my team at work uses it whenever possible), I decided to re-implement the same functionality. That took 
&lt;a href="https://gist.github.com/brettcannon/a2a37cc5aadbc91c02ad"&gt;56 lines in Go&lt;/a&gt;
. When I went back and refactored the Python code to match the abstractions I used in the Go code it grew to 
&lt;a href="https://gist.github.com/brettcannon/82c4fe68bac30f4ed653"&gt;17 lines&lt;/a&gt;&amp;nbsp;.&lt;/p&gt;
&lt;p&gt;And this sort of thing is exactly why I do not worry about Python&amp;#8217;s popularity (at least in terms of users). While languages like Go compete with Python on a performance:productivity comparison, when you compare Python to almost any other language based purely on productivity it trounces the competition. And this shouldn&amp;#8217;t shock anyone when you think about the history of Python. The language was initially created to script 
&lt;a href="http://en.wikipedia.org/wiki/Amoeba_(operating_system)"&gt;a distributed operating system&lt;/a&gt;
. This is why in the &amp;#8216;90s and early 2000s the comparison was always Python vs. Perl and then Python vs. Ruby. Only in the 2000s and later did Python get compared to Java or very recently to Go or&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;And this productivity view of Python also ties into education. With 
&lt;a href="http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext"&gt;Python now the most popular intro teaching language at the top &lt;span class="caps"&gt;U.S.&lt;/span&gt; universities&lt;/a&gt;
, many people are learning how to program using Python. But exposure early on to a language does not guarantee future usage by someone; I for one did not use Scheme after my intro course. But because Python is such a productive language, the language becomes a staple in one&amp;#8217;s toolkit of programming. If people learn Python first, then when they need to write a quick script like I did today they will most likely reach for Python than Java or Go or some other language they may be using for their&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;All of this is why I don&amp;#8217;t worry about Python&amp;#8217;s demise due to lack of users. People might switch to Go at work because the performance:productivity ratio is very good for their project or team. Or maybe people got frustrated with the Python 2/3 transition and didn&amp;#8217;t want to base their project at work on Python anymore. It really doesn&amp;#8217;t matter in terms of the number of users of Python because I&amp;#8217;m willing to bet those people still reach for Python when they need a one-off script to solve a problem. And I bet these people still recommend Python when they are asked what people&amp;#8217;s first programming language should be. In other words I don&amp;#8217;t worry about our great-for-teaching, highly productive scripting language ever lacking users; Python will always be&amp;nbsp;useful.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;161203 是也乎,(￣▽￣)&lt;ul&gt;
&lt;li&gt;发现没有必要全文翻译,观点很清晰&lt;/li&gt;
&lt;li&gt;就生产力方面,当前世界无出其右&lt;/li&gt;
&lt;li&gt;嘦是人类创建的软件工程,必然有一个很长时期的混乱期&lt;/li&gt;
&lt;li&gt;这个期间,临时的/一次性的 检验/验证/实验性&amp;nbsp;脚本是必须的&lt;/li&gt;
&lt;li&gt;那么通用的 Python&amp;nbsp;语言简直是无法放弃的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;140728&amp;nbsp;从周刊中发现,决定翻译&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="BRETT"></category><category term="Leo"></category><category term="PyConChina"></category><category term="Zh"></category></entry><entry><title>ScrapBook彻查成果</title><link href="https://blog.zoomquiet.io/zq-chk4scrapbook.html" rel="alternate"></link><published>2014-07-11T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-07-11:/zq-chk4scrapbook.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;可是!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;期待&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;数据结构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;折腾&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;清查&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pax"&gt;pax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;手工删除目录树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;严正的不科学!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;重构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;删除&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;回顾&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_13"&gt;数据新结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;功能开关&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;时间帐单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#140708-scrapbook"&gt;140708 ScrapBook 分库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2h-click"&gt;+2H&amp;nbsp;click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2h"&gt;+2H 实际清减&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#lxml"&gt;lxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#untangle"&gt;untangle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#xmltodict"&gt;xmltodict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4h"&gt;4H&amp;nbsp;折腾明白了:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;2小时&amp;nbsp;目录对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#140710-1804"&gt;140710&amp;nbsp;18:04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参考:&lt;a href="http://wiki.woodpecker.org.cn/moin/ZqStudy/MyLearningSkill"&gt;我的学习&amp;amp;工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从06年,就将个人网络资料收集/整理/发布,
切换为主力使用 &lt;a href="http://www.xuldev.org/scrapbook/"&gt;ScrapBook&lt;/a&gt;&amp;nbsp;.&lt;/p&gt;
&lt;p&gt;这一下子就8年过去了,常用系统也从 Ubuntu 切换为 &lt;span class="caps"&gt;MAC&lt;/span&gt;,&amp;nbsp;收集的本地网页也超过了8万个 …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;可是!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;期待&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;数据结构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;折腾&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;清查&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pax"&gt;pax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;手工删除目录树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;严正的不科学!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;重构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;删除&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;回顾&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_13"&gt;数据新结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_14"&gt;功能开关&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;时间帐单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#140708-scrapbook"&gt;140708 ScrapBook 分库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2h-click"&gt;+2H&amp;nbsp;click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2h"&gt;+2H 实际清减&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#lxml"&gt;lxml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#untangle"&gt;untangle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#xmltodict"&gt;xmltodict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4h"&gt;4H&amp;nbsp;折腾明白了:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;2小时&amp;nbsp;目录对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#140710-1804"&gt;140710&amp;nbsp;18:04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参考:&lt;a href="http://wiki.woodpecker.org.cn/moin/ZqStudy/MyLearningSkill"&gt;我的学习&amp;amp;工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从06年,就将个人网络资料收集/整理/发布,
切换为主力使用 &lt;a href="http://www.xuldev.org/scrapbook/"&gt;ScrapBook&lt;/a&gt;&amp;nbsp;.&lt;/p&gt;
&lt;p&gt;这一下子就8年过去了,常用系统也从 Ubuntu 切换为 &lt;span class="caps"&gt;MAC&lt;/span&gt;,&amp;nbsp;收集的本地网页也超过了8万个,早已被迫进行了分库.&lt;/p&gt;
&lt;p&gt;自动发布的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://floss.zoomquiet.io&lt;/li&gt;
&lt;li&gt;http://skm.zoomquiet.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也成为一些朋友常常挖掘的资料库.&lt;/p&gt;
&lt;p&gt;可以说, ScrapBook 在 everynote 流行之前,就成功的解决了俺主要的在线网页资料为主的,
外部知识仓库的收集/整理/组合/复用/发布&amp;nbsp;等等基本功能/服务.&lt;/p&gt;
&lt;p&gt;而且, 也通过Python ,完成了辅助的小脚本工具,配合 个人主机/7牛CDN,&amp;nbsp;完成了自动化的差异发布.&lt;/p&gt;
&lt;h3 id="_2"&gt;可是!&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;参考: &lt;a href="http://blog.zoomquiet.io/livin-scrapbook.html"&gt;ScrapBook&amp;nbsp;生存指南&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从去年开始, 本地 &lt;code&gt;FLOSS&lt;/code&gt; 仓库,就已经无法正常进行标准搜索了,一搜索,整个 FireFox&amp;nbsp;就僵死.&lt;/li&gt;
&lt;li&gt;而且,从其它仓库切换进入 &lt;span class="caps"&gt;FLOSS&lt;/span&gt;&amp;nbsp;时,要等待半分钟以上&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;期待&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;实在太常用,所以,无法忍,而且也不打算切换到 everynote 什么的其它平台上,&amp;nbsp;作为一头合格的程序猿,就是要自个儿折腾通透哪!&lt;/p&gt;
&lt;p&gt;所以,先决定目标:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过进一步拿合理分仓库,有效减少每个仓库包含的网页数量&lt;/li&gt;
&lt;li&gt;通过脚本分析 &lt;code&gt;scrapbook.rdf&lt;/code&gt; 数据库来清除多余节点(隐藏的无效的)&lt;/li&gt;
&lt;li&gt;通过脚本分析 对应 &lt;code&gt;data/&lt;/code&gt; 目录中的网页子目录,清除多余的&lt;/li&gt;
&lt;li&gt;针对全新的分仓库,建立对应的 7牛 空间,以及对应的 &lt;code&gt;*.zoomquiet.io&lt;/code&gt; 子站发布&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之就是要加速,无论本地/远程&lt;/p&gt;
&lt;h3 id="_4"&gt;数据结构&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了大家平滑的理解折腾之处,先简要说明一下 ScrapBook&amp;nbsp;的数据结构:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;XX仓库/     对应 Multi-ScrapBook 开启后,不同的Book&lt;/span&gt;
&lt;span class="err"&gt;  +- data   实际本地网页存放入口, 类似 20050205102119 的子目录&lt;/span&gt;
&lt;span class="err"&gt;  +- tree   导出目录树后的 html 入口&lt;/span&gt;
&lt;span class="err"&gt;  +- ...&lt;/span&gt;
&lt;span class="err"&gt;  `- scrapbook.rdf 插件界面使用的 xml 数据仓库&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;scrapbook.rdf 的关键数据约定&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;RDF:RDF&lt;/span&gt; &lt;span class="na"&gt;xmlns:NS2=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://amb.vis.ne.jp/mozilla/scrapbook-rdf#&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;xmlns:NC=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://home.netscape.com/NC-rdf#&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;xmlns:RDF=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
  主体内容
&lt;span class="nt"&gt;&amp;lt;/RDF:RDF&amp;gt;&lt;/span&gt;

根列表:
&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:root&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    %(rdf_li)s
  &lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;

目录容器:
&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:%(rdf_item)s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    %(rdf_li)s
  &lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;

目录节点条目:
&lt;span class="nt"&gt;&amp;lt;RDF:li&lt;/span&gt; &lt;span class="na"&gt;RDF:resource=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:%(rdf_item)s&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

目录节点:
&lt;span class="nt"&gt;&amp;lt;RDF:Description&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:%(rdf_item)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;folder&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_id)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_title)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

页面节点:
&lt;span class="nt"&gt;&amp;lt;RDF:Description&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:%(rdf_item)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_type)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_id)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_title)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_comment)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_icon)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_source)s&amp;quot;&lt;/span&gt; 
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

笔记节点:
&lt;span class="nt"&gt;&amp;lt;RDF:Description&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:%(rdf_item)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;note&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_id)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_title)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

分割线节点:
&lt;span class="nt"&gt;&amp;lt;NC:BookmarkSeparator&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:%(rdf_item)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;separator&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%(rdf_id)s&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上 &lt;code&gt;%(rdf_id)s&lt;/code&gt; 之类是 Py 内置模板的语法,
在 &lt;code&gt;scrapbook.rdf&lt;/code&gt; 实例中,都是形如: &lt;code&gt;20050205102119&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;折腾&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;纪要一下折腾的过程中,要命的关键过程/代码&lt;/p&gt;
&lt;h3 id="_6"&gt;清查&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一切开始之前,的体积:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ du -h * 
...
&lt;span class="m"&gt;5&lt;/span&gt;.6G    ZqDevRel
&lt;span class="m"&gt;6&lt;/span&gt;.5G    ZqFLOSS
&lt;span class="m"&gt;3&lt;/span&gt;.7G    ZqSKM
...

$ ls ZqDevRel/data/ &lt;span class="p"&gt;|&lt;/span&gt; wc
   &lt;span class="m"&gt;26214&lt;/span&gt;   &lt;span class="m"&gt;26214&lt;/span&gt;  &lt;span class="m"&gt;393210&lt;/span&gt;

&lt;span class="c1"&gt;# 计划切分为&lt;/span&gt;
  -&amp;gt; zqCoder 
  -&amp;gt; zqSMM

$ ls ZqFLOSS/data/ &lt;span class="p"&gt;|&lt;/span&gt; wc
   &lt;span class="m"&gt;30767&lt;/span&gt;   &lt;span class="m"&gt;30767&lt;/span&gt;  &lt;span class="m"&gt;461505&lt;/span&gt;

&lt;span class="c1"&gt;# 计划切分为&lt;/span&gt;
  -&amp;gt; zqDevRes
  -&amp;gt; zqSCM   
  -&amp;gt; zqPythonic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先在仓库中,根据拆分目标,将内容树收纳到对应的目录中,&amp;nbsp;以便复制,加载后,快速删除.&lt;/p&gt;
&lt;h4 id="pax"&gt;pax&lt;a class="headerlink" href="#pax" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pax&lt;/code&gt; 是个好工具,原先习惯性的用 &lt;code&gt;cp&lt;/code&gt; 那叫个慢!
搜索才知道,大量小文件的迁移就应该用 &lt;code&gt;pax&lt;/code&gt;
于是简单的起个背景周末跑吧&amp;#8230;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ du -hs *
...
&lt;span class="m"&gt;5&lt;/span&gt;.7G    ZqDevRel
  &lt;span class="m"&gt;5&lt;/span&gt;.7G    zqCoder
  &lt;span class="m"&gt;5&lt;/span&gt;.7G    zqSMM

&lt;span class="m"&gt;6&lt;/span&gt;.5G    ZqFLOSS
  &lt;span class="m"&gt;6&lt;/span&gt;.5G    zqDevRes
  &lt;span class="m"&gt;6&lt;/span&gt;.5G    zqPythonic
  &lt;span class="m"&gt;6&lt;/span&gt;.5G    zqSCM

...
&lt;span class="m"&gt;4&lt;/span&gt;.0K    scraptools
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;体积占用激增3倍!&lt;/p&gt;
&lt;p&gt;然后,逐一用 ScrapBook&amp;nbsp;加载新的目录&lt;/p&gt;
&lt;h4 id="_7"&gt;手工删除目录树&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;再对比几个仓库的体积:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;KuaiPan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zScrapBook&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;ZqFLOSS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
   &lt;span class="mi"&gt;30767&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;zqSCM&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
   &lt;span class="mi"&gt;25320&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;du&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;hs&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="k"&gt;G&lt;/span&gt;    &lt;span class="k"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;KuaiPan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zScrapBook&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;zqDevRes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
   &lt;span class="mi"&gt;24045&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;zqPythonic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
   &lt;span class="mi"&gt;24294&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;zqSCM&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
   &lt;span class="mi"&gt;25319&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_8"&gt;严正的不科学!&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;手工折腾了半天,却发现几乎没有释放多少空间出来,
好象总是有 20000&amp;nbsp;左右的目录,是不存在的页面节点&amp;#8230;&lt;/p&gt;
&lt;h3 id="_9"&gt;解析&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先,&lt;/p&gt;
&lt;h3 id="_10"&gt;重构&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/martinblech/xmltodict/issues/14"&gt;xml containing 1 child · Issue #14 ·&amp;nbsp;martinblech/xmltodict&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dict_constructor&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_11"&gt;删除&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="_12"&gt;回顾&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;JS&lt;/span&gt; 在 FireFox&amp;nbsp;的确不给力哪&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ du -hs *
...
957M  ZqDevRel
866M  ZqFLOSS
349M  ZqKss
&lt;span class="m"&gt;3&lt;/span&gt;.4G  ZqSKM
...
&lt;span class="m"&gt;1&lt;/span&gt;.0G  _chaos
&lt;span class="m"&gt;5&lt;/span&gt;.2G  _stuff
...
424K  scrapbooktools
766M  zqCoder
&lt;span class="m"&gt;1&lt;/span&gt;.0G  zqDevRes
&lt;span class="m"&gt;1&lt;/span&gt;.4G  zqPythonic
&lt;span class="m"&gt;1&lt;/span&gt;.4G  zqSCM
564M  zqSMM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为什么,在 700M 的 zqCoder 仓库中无法搜索,但是, 3.4G 的ZqSKM&amp;nbsp;中就可以?!&lt;/p&gt;
&lt;p&gt;认真对比,从重建的空仓库的 .rdf&amp;nbsp;中,发现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:search&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
....
&lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个节点中包含有意外的几万条记录!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for seq in doc[&amp;#39;RDF:RDF&amp;#39;][&amp;#39;RDF:Seq&amp;#39;]:&lt;/span&gt;
&lt;span class="err"&gt;    if &amp;#39;urn:scrapbook:search&amp;#39; == seq[&amp;#39;@RDF:about&amp;#39;]:&lt;/span&gt;
&lt;span class="err"&gt;        seq.pop(&amp;#39;RDF:li&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;        break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;几行代码解决!&lt;/p&gt;
&lt;h3 id="_13"&gt;数据新结构&lt;a class="headerlink" href="#_13" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id="_14"&gt;功能开关&lt;a class="headerlink" href="#_14" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="_15"&gt;时间帐单&lt;a class="headerlink" href="#_15" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;pax&lt;/span&gt; &lt;span class="err"&gt;复制&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;手工清除多余树&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;重新理解自个儿的脚本&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;加载自制数据结构到湿件&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;追加走查功能&lt;/span&gt; 
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;调试走查&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;优化输出&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;明确可清除无效节点的数量级&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;尝试用&lt;/span&gt; &lt;span class="n"&gt;click&lt;/span&gt; &lt;span class="err"&gt;改进功能开关&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;未果&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;对比测试不同的解析库&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;xmltodict&lt;/span&gt; &lt;span class="err"&gt;重构原先的&lt;/span&gt; &lt;span class="err"&gt;走查功能&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;根据比对的需求&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;改进&lt;/span&gt; &lt;span class="n"&gt;xmltodict&lt;/span&gt; &lt;span class="err"&gt;的数据结构&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;追加&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="err"&gt;复用&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;再复制测试仓库&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;用&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="err"&gt;小心的测试实际删除行为&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;通测&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;批量处置&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="err"&gt;个新旧仓库&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;清删除&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="err"&gt;万&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;个无用目标&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;近&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="k"&gt;G&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;空间释放&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="err"&gt;整理代码&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;组织文档&lt;/span&gt;

&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;自然时间&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;天业余时间&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;140909&amp;nbsp;才算完成一个可以看的版本&lt;/li&gt;
&lt;li&gt;140711&amp;nbsp;完成所有功能,启动文档回顾&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="140708-scrapbook"&gt;140708 ScrapBook 分库&lt;a class="headerlink" href="#140708-scrapbook" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="2h-click"&gt;+2H click&lt;a class="headerlink" href="#2h-click" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;果然,清查出有大量, &lt;span class="caps"&gt;FLOSS&lt;/span&gt; 中当初没有合理清除的节点
从 &lt;span class="caps"&gt;ROOT&lt;/span&gt;&amp;nbsp;引发的树中挂不上的&lt;/p&gt;
&lt;h2 id="2h"&gt;+2H 实际清减&lt;a class="headerlink" href="#2h" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://amoffat.github.io/sh/"&gt;sh 1.08 — sh v1.08&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sh&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-Rfv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del_dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;用 sh&amp;nbsp;删除目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    tree_nodes:  3574&lt;/span&gt;
&lt;span class="err"&gt;    exp_items:  4164&lt;/span&gt;
&lt;span class="err"&gt;    dirs:  590&lt;/span&gt;
&lt;span class="err"&gt;    DESC : 24190&lt;/span&gt;
&lt;span class="err"&gt;    chaos: 20616&lt;/span&gt;
&lt;span class="err"&gt;    有效: 3574&lt;/span&gt;
&lt;span class="err"&gt;$ ls reDevRel/data/ | wc -l&lt;/span&gt;
&lt;span class="err"&gt;    2996&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;用 lxml/模板 重构&amp;nbsp;rdf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人肉来总是感觉不对,&lt;/p&gt;
&lt;p&gt;尝试:&lt;/p&gt;
&lt;h3 id="lxml"&gt;lxml&lt;a class="headerlink" href="#lxml" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;忒复杂!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="untangle"&gt;untangle&lt;a class="headerlink" href="#untangle" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/stchris/untangle"&gt;stchris/untangle&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;579&lt;/span&gt;
&lt;span class="n"&gt;RDF_Description&lt;/span&gt;     &lt;span class="mi"&gt;24190&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x100666ed0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;exp_level_idx&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;2263.57079&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;快,但是,无法Dump,而且书写不直觉, 要将 &amp;#8220;:&amp;#8221; 变成 &amp;#8220;_&amp;#8221;&amp;nbsp;obj.RDF_RDF.RDF_Description&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x100769ed0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scraptools/zq_chk4scrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;457&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;RDFD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;exp_level_idx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MYBOOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scraptools/zq_chk4scrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;161&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cal_time&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scraptools/zq_chk4scrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;205&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;exp_level_idx&lt;/span&gt;
    &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RDF_RDF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1370&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;
    &lt;span class="n"&gt;Pickler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;224&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Call unbound method with explicit self&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;719&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;save_inst&lt;/span&gt;
    &lt;span class="n"&gt;getstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__getstate__&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/zoomq/.pyenv/versions/276chaos/lib/python2.7/site-packages/untangle.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__getattr__&lt;/span&gt;
    &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Unknown key &amp;lt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__getstate__&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="xmltodict"&gt;xmltodict&lt;a class="headerlink" href="#xmltodict" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/martinblech/xmltodict"&gt;martinblech/xmltodict&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[u&amp;#39;RDF:RDF&amp;#39;]&lt;/span&gt;
&lt;span class="na"&gt;RDF:Seq         579&lt;/span&gt;
&lt;span class="na"&gt;RDF:Description     24190&lt;/span&gt;
&lt;span class="na"&gt;NC:BookmarkSeparator    57&lt;/span&gt;
        &lt;span class="na"&gt;exp_level_idx() RUNed~ 4997.31612 ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;慢,但是,能 dump 而且书写直觉
    doc[&amp;#8216;&lt;span class="caps"&gt;RDF&lt;/span&gt;:&lt;span class="caps"&gt;RDF&lt;/span&gt;&amp;#8217;][&amp;#8216;&lt;span class="caps"&gt;RDF&lt;/span&gt;:Seq&amp;#8217;]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[u&amp;#39;RDF:RDF&amp;#39;]&lt;/span&gt;
&lt;span class="na"&gt;RDF:Seq         579&lt;/span&gt;
&lt;span class="na"&gt;RDF:Description     24190&lt;/span&gt;
&lt;span class="na"&gt;NC:BookmarkSeparator    57&lt;/span&gt;
&lt;span class="na"&gt;&amp;lt;open file &amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;, mode &amp;#39;wb&amp;#39; at 0x10f26d420&amp;gt;&lt;/span&gt;
        &lt;span class="na"&gt;exp_level_idx() RUNed~ 16878.75390 ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时,能反写出XML&amp;nbsp;来!&lt;/p&gt;
&lt;p&gt;主要问题是行为不统一!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:item20070113201921&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;RDF:li&lt;/span&gt; &lt;span class="na"&gt;RDF:resource=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:item20070113201940&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;RDF:li&lt;/span&gt; &lt;span class="na"&gt;RDF:resource=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;urn:scrapbook:item20070113201941&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;时 唯一的 &lt;span class="caps"&gt;RDF&lt;/span&gt;:Li 不是&amp;nbsp;List!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;K2SEQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;crt_id&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="nl"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Li&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;(u&amp;#39;@RDF:resource&amp;#39;, u&amp;#39;urn:scrapbook:item20070113201921&amp;#39;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;K2SEQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;crt_id&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;RDF:li&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;collections.OrderedDict&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;K2SEQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;crt_id&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="nl"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Li&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@RDF&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;crt_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;@RDF&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;K2SEQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;crt_id&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="nl"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Li&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;(u&amp;#39;@RDF:resource&amp;#39;, u&amp;#39;urn:scrapbook:item20070527160000&amp;#39;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;K2SEQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;crt_id&lt;/span&gt;&lt;span class="o"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="nl"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Li&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;(u&amp;#39;@RDF:resource&amp;#39;, u&amp;#39;urn:scrapbook:item20061006133550&amp;#39;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;K2SEQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;crt_id&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;RDF:li&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/martinblech/xmltodict/issues/67"&gt;odd parse for same xml structure · Issue #67 ·&amp;nbsp;martinblech/xmltodict&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="4h"&gt;4H 折腾明白了:&lt;a class="headerlink" href="#4h" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;scraptools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zq_chk4scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zoomq&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;快盘&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zScrapBook&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scrapbook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RDF:RDF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;579&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;24190&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10f17a660&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;exp_level_idx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;17073.48084&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraotools_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pkl&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;            &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;578&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;24190&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
        &lt;span class="n"&gt;_load_pkl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;7872.95103&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

     &lt;span class="n"&gt;_RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6926&lt;/span&gt;
     &lt;span class="n"&gt;RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3631&lt;/span&gt;
        &lt;span class="n"&gt;re_xmltodict_rdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;191.21003&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有这么多垃圾!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;24190 vs 3631 !!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是,居然无法一次性清理干净?!&lt;/p&gt;
&lt;p&gt;一扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
/Users/zoomq/mnt/快盘/zScrapBook/reDevRel/scrapbook.rdf
&lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;RDF:RDF&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
RDF:Seq         &lt;span class="m"&gt;579&lt;/span&gt;
RDF:Description     &lt;span class="m"&gt;24190&lt;/span&gt;
NC:BookmarkSeparator    &lt;span class="m"&gt;57&lt;/span&gt;
&amp;lt;open file &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;, mode &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; at 0x10f2376f0&amp;gt;
        exp_level_idx&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ &lt;span class="m"&gt;17013&lt;/span&gt;.92913 ms

     _RIGHT_NODES: &lt;span class="m"&gt;6926&lt;/span&gt;
     RIGHT_NODES: &lt;span class="m"&gt;3631&lt;/span&gt;
clean notes:    &lt;span class="m"&gt;11153&lt;/span&gt;
cleanned DESC:  &lt;span class="m"&gt;13037&lt;/span&gt;
&amp;lt;open file &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;, mode &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; at 0x10eecff60&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ &lt;span class="m"&gt;131239&lt;/span&gt;.34913 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2扫:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;scraptools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zq_chk4scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraotools_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pkl&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;    &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;578&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;13037&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
        &lt;span class="n"&gt;_load_pkl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;4292.33599&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

     &lt;span class="n"&gt;_RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6926&lt;/span&gt;
     &lt;span class="n"&gt;RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3631&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;5506&lt;/span&gt;
&lt;span class="n"&gt;cleanned&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;7531&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x108874f60&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scrapbook_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;
        &lt;span class="n"&gt;re_xmltodict_rdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;44531.90279&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;scraptools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zq_chk4scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraotools_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pkl&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;    &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;578&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;7531&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
        &lt;span class="n"&gt;_load_pkl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;3115.18502&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

     &lt;span class="n"&gt;_RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6926&lt;/span&gt;
     &lt;span class="n"&gt;RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3631&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;2616&lt;/span&gt;
&lt;span class="n"&gt;cleanned&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;4915&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x105d1edb0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scrapbook_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;
        &lt;span class="n"&gt;re_xmltodict_rdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;19026.94511&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;scraptools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zq_chk4scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraotools_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pkl&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;    &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;578&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;4915&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
        &lt;span class="n"&gt;_load_pkl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;2528.49293&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

     &lt;span class="n"&gt;_RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6926&lt;/span&gt;
     &lt;span class="n"&gt;RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3631&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;1045&lt;/span&gt;
&lt;span class="n"&gt;cleanned&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;3870&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10429ced0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scrapbook_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;
        &lt;span class="n"&gt;re_xmltodict_rdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;11538.43212&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5扫:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;scraptools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zq_chk4scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraotools_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pkl&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;    &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;578&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;3870&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
        &lt;span class="n"&gt;_load_pkl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;2422.85681&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

     &lt;span class="n"&gt;_RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6926&lt;/span&gt;
     &lt;span class="n"&gt;RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3631&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;286&lt;/span&gt;
&lt;span class="n"&gt;cleanned&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;3584&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x102c5d300&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scrapbook_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;
        &lt;span class="n"&gt;re_xmltodict_rdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;9368.47901&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;scraptools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zq_chk4scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraotools_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pkl&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;    &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;578&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;3584&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
        &lt;span class="n"&gt;_load_pkl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;2225.17014&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

     &lt;span class="n"&gt;_RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6926&lt;/span&gt;
     &lt;span class="n"&gt;RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3631&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;cleanned&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;3574&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x102c2af60&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scrapbook_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;
        &lt;span class="n"&gt;re_xmltodict_rdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;8464.92100&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7扫:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;scraptools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zq_chk4scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;reDevRel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraotools_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pkl&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;    &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;578&lt;/span&gt;
&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;     &lt;span class="mi"&gt;3574&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
        &lt;span class="n"&gt;_load_pkl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;2317.77310&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;

     &lt;span class="n"&gt;_RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6926&lt;/span&gt;
     &lt;span class="n"&gt;RIGHT_NODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3631&lt;/span&gt;
&lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;cleanned&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;3574&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_chaos/scraotools_reDevRel.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1021b3030&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;_chaos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scrapbook_reDevRel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rdf&lt;/span&gt;
        &lt;span class="n"&gt;re_xmltodict_rdf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;8694.52500&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="2"&gt;2小时 目录对比&lt;a class="headerlink" href="#2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;sh-&amp;gt;ls&amp;nbsp;出来时,&lt;/p&gt;
&lt;p&gt;是 &lt;span class="caps"&gt;STDOUT&lt;/span&gt; 有隐藏字符!&amp;nbsp;兰色&amp;#8230;居然没有意识到!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mi"&gt;20041214101930&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scraptools/zq_chk4scrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;724&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;mv_chaos_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REPO_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XRDF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scraptools/zq_chk4scrap.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;524&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mv_chaos_data&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb nb-Type"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#.strip()&lt;/span&gt;
&lt;span class="n"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb nb-Type"&gt;int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x1b&lt;/span&gt;&lt;span class="s1"&gt;[1m&lt;/span&gt;&lt;span class="se"&gt;\x1b&lt;/span&gt;&lt;span class="s1"&gt;[34m20041214101930&lt;/span&gt;&lt;span class="se"&gt;\x1b&lt;/span&gt;&lt;span class="s1"&gt;[39;49m&lt;/span&gt;&lt;span class="se"&gt;\x1b&lt;/span&gt;&lt;span class="s1"&gt;[0m&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="140710-1804"&gt;140710 18:04&lt;a class="headerlink" href="#140710-1804" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;完成初步完备流程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从原始 scrapbook.rdf 读入为 Py&amp;nbsp;对象&lt;/li&gt;
&lt;li&gt;模拟肉眼巡查, walk&amp;nbsp;出显示的合法内容数据集&lt;/li&gt;
&lt;li&gt;加入其它辅助KV 节点,写为中间工作&amp;nbsp;.pkl&lt;/li&gt;
&lt;li&gt;加载 工作 .pkl&amp;nbsp;到内存&lt;/li&gt;
&lt;li&gt;对比原始 .rdf 数据中的节点和 walk 出来有效的,逐一清除无效的&lt;ul&gt;
&lt;li&gt;必须,尝试多次,直到清除干净&lt;/li&gt;
&lt;li&gt;为毛&amp;#8230;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对比实际目录和有效节点ID 的关系,将无效的,mv&amp;nbsp;到其它目录完成净化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;a class="headerlink" href="#todo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解决反复清查的问题&lt;/li&gt;
&lt;li&gt;提高效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ du -hs *
&lt;span class="m"&gt;5&lt;/span&gt;.1G    ZqDevRel
950M    reDevRel
    &lt;span class="m"&gt;5&lt;/span&gt;.2G    zqCoder
    &lt;span class="m"&gt;4&lt;/span&gt;.9G    zqSMM
&lt;span class="m"&gt;8&lt;/span&gt;.0M    _chaos
&lt;span class="m"&gt;4&lt;/span&gt;.2G    _stuff

&lt;span class="m"&gt;6&lt;/span&gt;.5G    ZqFLOSS
    &lt;span class="m"&gt;5&lt;/span&gt;.2G    zqDevRes
    &lt;span class="m"&gt;5&lt;/span&gt;.2G    zqPythonic
    &lt;span class="m"&gt;5&lt;/span&gt;.3G    zqSCM
&lt;span class="m"&gt;3&lt;/span&gt;.7G    ZqSKM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Pythonic"></category><category term="scrapbook"></category><category term="python"></category><category term="howto"></category><category term="mavericks"></category></entry><entry><title>pydata笔记:环境配置</title><link href="https://blog.zoomquiet.io/pydata-0-mavericks.html" rel="alternate"></link><published>2014-06-03T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-06-03:/pydata-0-mavericks.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;探索&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pyenv"&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#epd-free"&gt;&lt;span class="caps"&gt;EPD&lt;/span&gt;&amp;nbsp;free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#canopy"&gt;Canopy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;结论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="s27157694.jpg(JPEG 图像,300x300 像素)" src="http://img3.douban.com/lpic/s27157694.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是本好书&amp;#8230;&lt;/p&gt;
&lt;p&gt;为什么知道这书呢? 因为翻译 &lt;a href="http://weekly.pychina.org/"&gt;|蠎周刊 |汇集全球蠎事儿&amp;nbsp;!-)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经常见到各种 Pandas 配合其它纯Python 模块折腾出来的大数据可视化分析作品/文章,
而且从 &lt;a href="http://book.douban.com/subject/7175280/"&gt;Python科学计算 (豆瓣)&lt;/a&gt; 中很早
也知道了各种 Python 在数据分析方面的方便,&amp;nbsp;所以,一直想有机会能实战性的系统折腾一下&amp;#8230;&lt;/p&gt;
&lt;p&gt;这书当然注意到了,虽然不是 &lt;span class="caps"&gt;OBP&lt;/span&gt; 项目组织翻译的,&amp;nbsp;但是,好书就是好书,有点小贵,&lt;/p&gt;
&lt;p&gt;最近有了台 &lt;span class="caps"&gt;GALAXY&lt;/span&gt; &lt;span class="caps"&gt;TAB3&lt;/span&gt;, 所以,能上 Kindle 了,于是,发现 z.cn 上电子书有了,
响应&amp;nbsp;@老赵的号召 …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;探索&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pyenv"&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#epd-free"&gt;&lt;span class="caps"&gt;EPD&lt;/span&gt;&amp;nbsp;free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#canopy"&gt;Canopy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;结论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="s27157694.jpg(JPEG 图像,300x300 像素)" src="http://img3.douban.com/lpic/s27157694.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是本好书&amp;#8230;&lt;/p&gt;
&lt;p&gt;为什么知道这书呢? 因为翻译 &lt;a href="http://weekly.pychina.org/"&gt;|蠎周刊 |汇集全球蠎事儿&amp;nbsp;!-)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经常见到各种 Pandas 配合其它纯Python 模块折腾出来的大数据可视化分析作品/文章,
而且从 &lt;a href="http://book.douban.com/subject/7175280/"&gt;Python科学计算 (豆瓣)&lt;/a&gt; 中很早
也知道了各种 Python 在数据分析方面的方便,&amp;nbsp;所以,一直想有机会能实战性的系统折腾一下&amp;#8230;&lt;/p&gt;
&lt;p&gt;这书当然注意到了,虽然不是 &lt;span class="caps"&gt;OBP&lt;/span&gt; 项目组织翻译的,&amp;nbsp;但是,好书就是好书,有点小贵,&lt;/p&gt;
&lt;p&gt;最近有了台 &lt;span class="caps"&gt;GALAXY&lt;/span&gt; &lt;span class="caps"&gt;TAB3&lt;/span&gt;, 所以,能上 Kindle 了,于是,发现 z.cn 上电子书有了,
响应&amp;nbsp;@老赵的号召,立即收入!&lt;/p&gt;
&lt;h2 id="_2"&gt;探索&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;正如,Python&amp;nbsp;所有领域的自学,有一个稳定,随时有反馈的环境是最重要的&amp;#8230;&lt;/p&gt;
&lt;p&gt;但是,作者的话,真心不能都相信哪!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;...如果你恰好使用 Python 3.2 大部分示例是可以完整运行的&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;MAC OS X 环境推荐安装 epd_free-7.3-2-macosx-i386.dmg&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;于是&amp;#8230;&lt;/p&gt;
&lt;h3 id="pyenv"&gt;pyenv&lt;a class="headerlink" href="#pyenv" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先尝试 Python 3.2&amp;nbsp;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ pyenv install 3.2&lt;/code&gt; 成功&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pyenv virtualenv --distribute 3.2 32IPy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pyenc local 32IPy2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pip install ipython&lt;/code&gt;,成功&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pip install pandas&lt;/code&gt;,&amp;nbsp;失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后回到书中作者的 2.7.3&amp;nbsp;环境,重新尝试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一样败在 &lt;code&gt;$ pip install pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;宏大的 &lt;code&gt;Matplotlib&lt;/code&gt; 手工安装成功了的哪&amp;#8230;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="epd-free"&gt;&lt;span class="caps"&gt;EPD&lt;/span&gt; free&lt;a class="headerlink" href="#epd-free" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;好吧,看来数据分析的系列模块也不是那么简单可以安装的,&amp;nbsp;所以,&lt;/p&gt;
&lt;p&gt;&lt;a href="https://enthought.com/products/epd/free/"&gt;Enthought Python Distribution&amp;nbsp;Free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;嗯嗯嗯? &lt;/p&gt;
&lt;p&gt;&lt;img alt="canopy-logo" src="https://enthought.com/static/img/canopy-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;什么东西,不是说 &lt;code&gt;EPD free&lt;/code&gt; 嘛?&lt;/p&gt;
&lt;p&gt;直接搜索:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epd_free-7.3-2-macosx-i386.dmg&lt;/li&gt;
&lt;li&gt;果断还有: &lt;a href="https://enthought.com/repo/free/"&gt;Index of&amp;nbsp;/repo/free&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;果断下载,安装&amp;#8230;&lt;/p&gt;
&lt;p&gt;各种不对味儿,原来自动在 &lt;code&gt;~/.bash_profile&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Setting PATH for EPD_free-7.3-2&lt;/span&gt;
&lt;span class="c1"&gt;# The orginal version is saved in .bash_profile.pysave&lt;/span&gt;
&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Library/Frameworks/Python.framework/Versions/Current/bin:${PATH}&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而且是按照系统框架来安装到 &lt;code&gt;/Library/Frameworks/Python.framework&lt;/code&gt; 的
可是, Mavericks 以后,没有默认Python 了哪,俺已经同时用 &lt;code&gt;brew&lt;/code&gt; 管理系统 Python,
&lt;code&gt;pyenv&lt;/code&gt; 管理开发 Python&amp;nbsp;,先不说体积:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ du -hs /Library/Frameworks/Python.framework/Versions
425M    /Library/Frameworks/Python.framework/Versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;居然第一个案例就跑不起来!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import pandas&lt;/code&gt; 有报错&amp;#8230;&lt;/p&gt;
&lt;h3 id="canopy"&gt;Canopy&lt;a class="headerlink" href="#canopy" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;回到官方下载: &lt;a href="https://enthought.com/store/"&gt;Enthought&amp;nbsp;Store&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老老实实的下载推荐的 &lt;code&gt;canopy-1.4.0-osx-64.dmg&lt;/code&gt;
体积也从 74M 爆涨为 &lt;code&gt;235Mb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过,是一派标准的 &lt;span class="caps"&gt;MAC&lt;/span&gt; 软件包了,非常流畅,也有GUI&amp;nbsp;的引导界面,&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;~/.bash_profile&lt;/code&gt; 追加的是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# Added by Canopy installer on 2014-06-03&lt;/span&gt;
&lt;span class="err"&gt;# VIRTUAL_ENV_DISABLE_PROMPT can be set to &amp;#39;&amp;#39; to make bashprompt show that Canopy is active, otherwise 1&lt;/span&gt;
&lt;span class="err"&gt;VIRTUAL_ENV_DISABLE_PROMPT=1 source \ &lt;/span&gt;
&lt;span class="err"&gt;/Users/zoomq/Library/Enthought/Canopy_64bit/User/bin/activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那就简单了,使用标准的 &lt;code&gt;VirtualEnv&lt;/code&gt; 来包装的话,就不用将系统Python 环境永久性的迁移为
&lt;code&gt;Canopy&lt;/code&gt; 的了,&lt;/p&gt;
&lt;p&gt;简单的 在 &lt;code&gt;~/.bashrc&lt;/code&gt; 定义一个别称:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# Added by Canopy installer on 2014-06-03&lt;/span&gt;
&lt;span class="err"&gt;alias canopy=&amp;quot;source \&lt;/span&gt;
&lt;span class="err"&gt;/Users/zoomq/Library/Enthought/Canopy_64bit/User/bin/activate&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;随时调用 &lt;code&gt;canopy&lt;/code&gt; 就可以进入了..&lt;/p&gt;
&lt;h2 id="_3"&gt;结论&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最终拥有了和书中有一致反应的环境:&lt;/p&gt;
&lt;p&gt;&lt;img alt="140604-pydata-canopy.png" src="http://zoomq.qiniudn.com/ZQCollection/snap/140604-pydata-canopy.png"&gt;&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4"&gt;osx - How to uninstall Python 2.7 on a Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X 10.6.4? - Stack&amp;nbsp;Overflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo rm -rf&amp;nbsp;/Library/Frameworks/Python.framework/Versions/2.7&lt;/li&gt;
&lt;li&gt;sudo rm -rf &amp;#8220;/Applications/Python&amp;nbsp;2.7&amp;#8221;&lt;/li&gt;
&lt;li&gt;remove the symbolic links in /usr/local/bin that point to this python version see ls -l&amp;nbsp;/usr/local/bin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/starting/install/osx/"&gt;Installing Python on Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X — The Hitchhiker&amp;#8217;s Guide to&amp;nbsp;Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wolfpaulus.com/jounal/mac/installing_python_osx/"&gt;Installing / Updating Python on &lt;span class="caps"&gt;OS&lt;/span&gt; X | Wolf&amp;nbsp;Paulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/goldsmith/7163055"&gt;When I upgraded my Mac to &lt;span class="caps"&gt;OS&lt;/span&gt; X Mavericks, a lot of utilities (like Python, virtualenv, Xcode) broke, and it was pretty stressful trying to get it all set back up. Hopefully this guide can spare you some of that pain.Note: I&amp;#8217;m by no means a Linux or Mac&amp;nbsp;ex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mavericks 对 Python&amp;nbsp;框架的调整,也的确有其原由的&amp;#8230;&lt;/p&gt;
&lt;p&gt;当然,好书要配合好代码,&lt;/p&gt;
&lt;p&gt;及时 fork 一个自个儿可以折腾的: &lt;a href="https://github.com/OpenBookProjects/pydata-book"&gt;OpenBookProjects/pydata-book&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140603&amp;nbsp;完成环境探索,总结&lt;/li&gt;
&lt;li&gt;140527 &lt;a href="http://www.amazon.cn/gp/product/B00KD7Q7U2/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;amp;psc=1"&gt;&amp;#8220;利用Python进行数据分析&amp;#8221; Wes McKinney, 唐学韬&amp;nbsp;(Kindle电子书)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="pandas"></category><category term="ipython"></category><category term="pydata"></category><category term="mavericks"></category></entry><entry><title>如何自在的折腾QPy</title><link href="https://blog.zoomquiet.io/init-my-qpy-env.html" rel="alternate"></link><published>2014-01-26T12:42:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-01-26:/init-my-qpy-env.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;环境准入&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;硬件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;探索&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;上传&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ssh"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#busybox"&gt;BusyBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;运行&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#beta"&gt;BETA乱入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpython"&gt;QPython头声明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpywebapp"&gt;qpy:webapp:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpyfullscreen"&gt;qpy:fullscreen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpylocalhost8080"&gt;qpy://localhost:8080&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;自动&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fabric"&gt;Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;结论&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pip"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#restful-onering"&gt;RESTful&amp;nbsp;&amp;#8220;OneRing&amp;#8221;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;专题体例:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;时间帐单:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;QPython 知道有两年了,是看 &lt;a href="http://book.douban.com/subject/10561367/"&gt;Head First Python(中文版) (豆瓣)&lt;/a&gt; 时,发现竟然有 
&lt;a href="http://code.google.com/p/android-scripting/"&gt;&lt;span class="caps"&gt;SL4A&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种神器! Google 果断是业界良心哪,
可惜: 从&lt;a href="http://code.google.com/p/android-scripting/downloads/list"&gt;Downloads&lt;/a&gt;
可以看出 ,已经停止有一年多了,目测是 …&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;环境准入&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;硬件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;探索&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_6"&gt;上传&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ssh"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#busybox"&gt;BusyBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;运行&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#beta"&gt;BETA乱入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpython"&gt;QPython头声明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpywebapp"&gt;qpy:webapp:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpyfullscreen"&gt;qpy:fullscreen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qpylocalhost8080"&gt;qpy://localhost:8080&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;自动&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fabric"&gt;Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;结论&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pip"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#restful-onering"&gt;RESTful&amp;nbsp;&amp;#8220;OneRing&amp;#8221;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;专题体例:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;时间帐单:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;背景&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;QPython 知道有两年了,是看 &lt;a href="http://book.douban.com/subject/10561367/"&gt;Head First Python(中文版) (豆瓣)&lt;/a&gt; 时,发现竟然有 
&lt;a href="http://code.google.com/p/android-scripting/"&gt;&lt;span class="caps"&gt;SL4A&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种神器! Google 果断是业界良心哪,
可惜: 从&lt;a href="http://code.google.com/p/android-scripting/downloads/list"&gt;Downloads&lt;/a&gt;
可以看出 ,已经停止有一年多了,目测是 Guido 叔离开后, Python 的地位在 Google&amp;nbsp;一落千丈就没有人折腾了.&lt;/p&gt;
&lt;p&gt;好在旧浪两位同事, River和CF 掿起了 &lt;span class="caps"&gt;SL4A&lt;/span&gt; 的旗帜,&amp;nbsp;变成了一系列准衶器:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.hipipal.qpyplus"&gt;QPython - Python for Android - Google Play 上的 Andr​​oid&amp;nbsp;应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.hipipal.qpy3"&gt;QPython 3 - Python3 on Android - Google Play 上的 Andr​​oid&amp;nbsp;应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.hipipal.qpy"&gt;QPython Player for Android - Google Play 上的 Andr​​oid&amp;nbsp;应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.hipipal.texteditor"&gt;QEdit - Code Editor in Pocket - Google Play 上的 Andr​​oid&amp;nbsp;应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目标直指所谓的内什么,,,&lt;/p&gt;
&lt;p&gt;而且,目测已经有国家高等教育项目中,
直接使用了 &lt;code&gt;QPython&lt;/code&gt; 来作教学环境!&lt;/p&gt;
&lt;p&gt;所以,果断要跟上用起来,,,&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.appannie.com/apps/amazon-appstore/top/china/education/"&gt;App Annie 的应用商店数据|Amazon排行榜中国 - Education -&amp;nbsp;2014年1月27日&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.douban.com/group/topic/17095466/"&gt;让Python在Android系统上飞一会儿:第一节&amp;nbsp;在手机上&amp;#8230;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;目标&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;哪,俺是 Pythoneer ,不是 &lt;span class="caps"&gt;JAVA&lt;/span&gt; 党,
更加是 &lt;code&gt;IDE 去死去死团&lt;/code&gt; 的骨灰成员.&lt;/p&gt;
&lt;p&gt;很辛苦的攒銭搞到了 
&lt;a href="http://news.mynavi.jp/news/2013/02/07/051/index.html"&gt;&lt;span class="caps"&gt;FILCO&lt;/span&gt; Majestouch &lt;span class="caps"&gt;MINILA&lt;/span&gt;&lt;/a&gt;
青轴!
绝对不要回到 &lt;code&gt;一指禅&lt;/code&gt; 的时代哪!!!&lt;/p&gt;
&lt;p&gt;所以,俺要用 QPython 就是用来快速进行实用mini 应用的,
而且, 期待的开发流程, 应该完全类似现在的 web server&amp;nbsp;开发流程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地用喜爱的编辑环境进行代码撰写 (&lt;a href="http://www.sublimetext.com"&gt;Sublime Text 2&lt;/a&gt;, &lt;a href="http://leoeditor.com/"&gt;Leo&lt;/a&gt;,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;一键上传手机,并自动运行&lt;/li&gt;
&lt;li&gt;在手机上真实操作,同时有远程日志可以实时观察,确认问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上循环&lt;/p&gt;
&lt;h2 id="_3"&gt;环境准入&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对了,以下记述充斥了各种非科普性描述,&amp;nbsp;为了误入的小伙伴不被意外恶心到,得交待一下适合继续阅读的条件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;42 个月, Linux/Unix&amp;nbsp;系统使用~注意!是使用不是管理体验;不然各种标准的命令行操作要死人的,,&lt;/li&gt;
&lt;li&gt;42 周的, 编程体验,不许什么語言,就是 &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;也成,起码要有一丝码感,,,&lt;/li&gt;
&lt;li&gt;42 次的, 蕃茄工作时间 的经历,至少知道什么是&amp;#8221; &lt;a href="http://book.douban.com/reading/12671922/"&gt;心流&lt;/a&gt;&amp;#8220;般的专注!&lt;/li&gt;
&lt;li&gt;42 天的, 相关资料通读,相关社区的加入/旁听,,,一定要摸清楚相关主要开发人员的沟通习惯&amp;nbsp;;-)&lt;/li&gt;
&lt;li&gt;42 小时, 的周边环境整备,熟悉工作系统以及配置好顺手的工具(git/apt/yum/brew&amp;nbsp;&amp;#8230;)&lt;/li&gt;
&lt;li&gt;42 分钟, 当前的空闲时间,能够专注以下描述,不会片面的抽取文字就来吼俺 &lt;code&gt;图样图森破&lt;/code&gt; 什么的..&lt;/li&gt;
&lt;li&gt;42 秒, 明确以上条件 &lt;code&gt;42%&lt;/code&gt; 吻合,即可继续&amp;nbsp;;-)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_4"&gt;硬件&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;手机: 电信协议 三星 Note2 &lt;span class="caps"&gt;N7108ZMDMF1&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 4.1.1 &lt;span class="caps"&gt;JRO03C&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;刷的是 &lt;span class="caps"&gt;MIUI&lt;/span&gt;-3.3.15&amp;nbsp;野生版&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CPU&lt;/span&gt; 四核&amp;nbsp;1.6GHz&lt;/li&gt;
&lt;li&gt;内存&amp;nbsp;2G&lt;/li&gt;
&lt;li&gt;存储&amp;nbsp;16G&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主机: &lt;span class="caps"&gt;MBP&lt;/span&gt;&amp;nbsp;12下半年版 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;OS&lt;/span&gt; X&amp;nbsp;10.9.1&lt;/li&gt;
&lt;li&gt;Core i7&amp;nbsp;2.2GHz&lt;/li&gt;
&lt;li&gt;8G&amp;nbsp;内存&lt;/li&gt;
&lt;li&gt;500G&amp;nbsp;机械硬盘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;湿件:&amp;nbsp;30++++++++++岁老程序猿&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;180,180,180,,,&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ASP&lt;/span&gt;,Basic,C,C++,Clojure,Erlang,Forth,Factor,Go,Haskell,&lt;span class="caps"&gt;JS&lt;/span&gt;,&lt;span class="caps"&gt;JAVA&lt;/span&gt;,Lisp,Node,&lt;span class="caps"&gt;PHP&lt;/span&gt;,Python,Pascal,&lt;span class="caps"&gt;XSLT&lt;/span&gt;,&lt;span class="caps"&gt;REBOL&lt;/span&gt;,Rust,,,少量经验&lt;/li&gt;
&lt;li&gt;精通26字母, Cnglish&amp;nbsp;熟练&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;探索&lt;a class="headerlink" href="#_5" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;根据策划的流程,在原作者的帮助下,进行了高强度的折腾,
经过连续 27&amp;nbsp;小时探索,基本爽了起来:&lt;/p&gt;
&lt;h3 id="_6"&gt;上传&lt;a class="headerlink" href="#_6" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Android 呢,就是 Linux 哪,当然应该用 &lt;code&gt;scp&lt;/code&gt; 安全上传了!&lt;/p&gt;
&lt;p&gt;目测,要依次解决:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手机上的 &lt;code&gt;SSH&lt;/code&gt; 守护在哪儿,怎么启动&lt;/li&gt;
&lt;li&gt;脚本应该上传到哪儿 QPython&amp;nbsp;才能识别?&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="ssh"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;a class="headerlink" href="#ssh" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;搜索就有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gailly.net/android/android-tips.html"&gt;Android&amp;nbsp;tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxplanet.com/linuxplanet/reviews/7301/1"&gt;10 Android Apps for Linux Server Admins - ConnectBot, QuickSSHd, SwiFTP, AndFTP, Wyse PocketCloud - Reviews -&amp;nbsp;LinuxPlanet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://my.oschina.net/winHerson/blog/84716"&gt;SSHDroid(&lt;span class="caps"&gt;SSH&lt;/span&gt; Server for Android)通过PC或命令连接android - bugeasy -&amp;nbsp;开源中国社区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过快速的尝试,
明确 &lt;code&gt;SSHDroid&lt;/code&gt; 最简洁可用,&amp;nbsp;那就上:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140127-qpy-sshdroid.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装,配置都没有什么可说的&lt;/li&gt;
&lt;li&gt;只是,非专业版,只能用口令登录,先忍着&lt;/li&gt;
&lt;li&gt;扩展一点点儿从 &lt;a href="http://onetimeblog.logdown.com/posts/2014/01/23/first-program-in-qpython"&gt;Hello, QPython! « one-time blog&lt;/a&gt; 来的代码,成 &lt;code&gt;hollo.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidhelper&lt;/span&gt;
&lt;span class="n"&gt;droid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;androidhelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;droid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeToast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, Username!是也乎 ;-)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上传到哪儿呢?!&lt;/p&gt;
&lt;p&gt;快速翻找一下,明确几个关键路径:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SSHDroid&lt;/code&gt;起始可写根:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/data/data/berserker.android.apps.sshdroid/home/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即: &lt;code&gt;cd ~&lt;/code&gt; 回到的目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QPython&amp;nbsp;环境分:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只读执行文件起点 &lt;code&gt;/data/data/com.hipipal.qpyplus/files/bin/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可写资源起点以及目录意义:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;/storage/sdcard0/com.hipipal.qpyplus/&lt;/span&gt;
&lt;span class="err"&gt;    +- cache         &lt;/span&gt;
&lt;span class="err"&gt;    +- lib        各Python版本的库安装入口 &lt;/span&gt;
&lt;span class="err"&gt;    +- projects   俺的QPy 项目入口&lt;/span&gt;
&lt;span class="err"&gt;    +- scripts    俺的QPy 脚本入口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="busybox"&gt;BusyBox&lt;a class="headerlink" href="#busybox" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;等等! &lt;span class="caps"&gt;SSH&lt;/span&gt; 上来后,各种不适应,这什么 shell 环境哪,连 &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, &lt;code&gt;vi&lt;/code&gt; 都没有
好意思说自个儿是 &lt;code&gt;Linux&lt;/code&gt; 嘛?!&lt;/p&gt;
&lt;p&gt;搜索才知道,这货叫 &lt;code&gt;ash&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;躲在 &lt;code&gt;/system/bin/sh&lt;/code&gt; 基本上什么也不会作&lt;/li&gt;
&lt;li&gt;所以,程序猿有 &lt;a href="http://www.busybox.net/"&gt;BusyBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一安装,批量将大堆习惯的工具,灌到 &lt;code&gt;system/xbin/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-busybox-tail.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这样,才能远程观察, QPython 项目目录中,
若隐若现的 &lt;code&gt;.run.log&lt;/code&gt; 明显发生什么问题,&amp;nbsp;快速增补一行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidhelper&lt;/span&gt;
&lt;span class="n"&gt;droid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;androidhelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;droid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeToast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, Username!是也乎 ;-)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就能运行成功,跳出最简单的发布公告框了!&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-hollo.jpg"&gt;&lt;/p&gt;
&lt;h3 id="_7"&gt;运行&lt;a class="headerlink" href="#_7" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;好了,进入下一个阶段: &lt;code&gt;怎么让 QPyhon 如系统命令一样在 ash 环境中调用我们的脚本?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;目测,要依次解决:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ash 环境变量是否兼容&amp;nbsp;QPython?&lt;/li&gt;
&lt;li&gt;ash 环境变量如果不兼容 QPython&amp;nbsp;怎么配置?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将刚刚测试明确可用的脚本从 shell&amp;nbsp;环境中调用一下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cd /storage/sdcard0/com.hipipal.qpyplus/projects/chaos/ &lt;/span&gt;
&lt;span class="c1"&gt;# /data/data/com.hipipal.qpyplus/files/bin/python hollo.py&lt;/span&gt;

Could not find platform independent libraries &amp;lt;prefix&amp;gt;
Consider setting &lt;span class="nv"&gt;$PYTHONHOME&lt;/span&gt; to &amp;lt;prefix&amp;gt;&lt;span class="o"&gt;[&lt;/span&gt;:&amp;lt;exec_prefix&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
ImportError: No module named site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;果断没有那么简单,&amp;nbsp;检查一下系统环境:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/system/xbin/env
&lt;span class="nv"&gt;RANDOM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;25396&lt;/span&gt;
&lt;span class="nv"&gt;ANDROID_DATA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/data
&lt;span class="nv"&gt;BOOTCLASSPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/system/framework/core.jar:/system/framework/core-junit.jar:/system/framework/bouncycastle.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/framework2.jar:/system/framework/android.policy.jar:/system/framework/services.jar:/system/framework/apache-xml.jar:/system/framework/sec_edm.jar:/system/framework/seccamera.jar
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/data/data/berserker.android.apps.sshdroid/dropbear:/usr/bin:/usr/sbin:/bin:/sbin:/system/sbin:/system/bin:/system/xbin:/system/xbin/bb:/data/local/bin
&lt;span class="nv"&gt;ANDROID_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/system
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nv"&gt;LOGNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nv"&gt;ANDROID_PROPERTY_WORKSPACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;,66560
&lt;span class="nv"&gt;EXTERNAL_STORAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/storage/sdcard0
&lt;span class="nv"&gt;ANDROID_ASSETS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/system/app
&lt;span class="nv"&gt;SHELL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/system/bin/sh
&lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;vt100
&lt;span class="nv"&gt;SSH_TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/pts/1
&lt;span class="nv"&gt;SSH_CONNECTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;::ffff:192.168.0.103 &lt;span class="m"&gt;64228&lt;/span&gt; ::ffff:192.168.0.100 &lt;span class="m"&gt;22&lt;/span&gt;
&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/data/data/berserker.android.apps.sshdroid/home
&lt;span class="nv"&gt;ANDROID_BOOTLOGO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跟 Python 没一毛钱关系,怪不得跑不了;
吼了俩位爷,才知道: &lt;a href="http://wiki.qpython.org/hacker/"&gt;QPython Hackers&lt;/a&gt;
果断是依赖大堆系统环境变量的,
以往能在桌面运行起来,
也是通过 &lt;code&gt;大JAVA&lt;/code&gt; 的相关接口,临时声明的!&lt;/p&gt;
&lt;p&gt;那就好办了,照此办理:
&lt;a href="https://gist.github.com/ZoomQuiet/8642464"&gt;gen_qpy_env.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意:&lt;/code&gt; 这货一定要加载到 QPython 中,用脚本形式来跑,
如果也是从后台 shell&amp;nbsp;环境中跑,是获得不了主要关键参数的!&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-gen-profile.jpg"&gt;&lt;/p&gt;
&lt;p&gt;然后!? 肿么,让 shell&amp;nbsp;环境每次都能自动加载上这堆配置?&lt;/p&gt;
&lt;p&gt;综合,搜索来的相关说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/shyang--TechBlogs/archive/2011/10/27/2226664.html"&gt;[转]linux虚拟内核文件系统介绍 - shy.ang -&amp;nbsp;博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xdracco.net/mount-android-system-partition-with-readwrite-access/"&gt;Mount Android System Partition With Read/Rrite&amp;nbsp;Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gailly.net/android/android-tips.html"&gt;Android&amp;nbsp;tips&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过尝试,明确这么来:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# mount -o remount,rw /dev/block/mtdblock3 /system&lt;/span&gt;
&lt;span class="c1"&gt;# ln -s /storage/sdcard0/com.hipipal.qpyplus/projects/qpy_profile /etc/profile&lt;/span&gt;
&lt;span class="c1"&gt;# mount -o remount,ro /dev/block/mtdblock3 /system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再关闭,重启 &lt;code&gt;SSHDroid&lt;/code&gt; 后,远程登入,测试:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-this-zen.png"&gt;&lt;/p&gt;
&lt;p&gt;然后,远程人工从 shell&amp;nbsp;调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cd /storage/sdcard0/com.hipipal.qpyplus/projects/chaos/ &lt;/span&gt;
&lt;span class="c1"&gt;# /data/data/com.hipipal.qpyplus/files/bin/python hollo.py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;手机无论在什么桌面,都能跳出来俺的 &lt;code&gt;hollo.py&lt;/code&gt; 运行结果:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-console-hollo.jpg"&gt;&lt;/p&gt;
&lt;p&gt;然后,本地,习惯性的,就可以用 &lt;a href="http://tmux.sourceforge.net/"&gt;tmux&lt;/a&gt; 同时&amp;nbsp;观察/管理本地以及远程的开发/测试/运行情况了:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140127-qpy-tumx.png"&gt;&lt;/p&gt;
&lt;h4 id="beta"&gt;BETA乱入&lt;a class="headerlink" href="#beta" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;作者看俺这么努力的折腾从内部机密放送俺最新开发版本,兴奋的安装上:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140127-qpy-new-version.jpg"&gt;&lt;/p&gt;
&lt;p&gt;然后,再运行&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/storage/sdcard0/com.hipipal.qpyplus/projects/chaos/hollo.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;3&lt;/span&gt;, in &amp;lt;module&amp;gt;
    &lt;span class="nv"&gt;droid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; androidhelper.Android&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;tubelib/sl4a.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;34&lt;/span&gt;, in __init__
    self.conn &lt;span class="o"&gt;=&lt;/span&gt; socket.create_connection&lt;span class="o"&gt;(&lt;/span&gt;addr&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/home/river/android-sdk/workplace/python-for-android/build/python-install/lib/python2.7/socket.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;571&lt;/span&gt;, in create_connection
socket.error: &lt;span class="o"&gt;[&lt;/span&gt;Errno &lt;span class="m"&gt;111&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Connection refused
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;/home/river/android-sdk/workplace&lt;/code&gt; 囧rz&amp;#8230;&lt;/p&gt;
&lt;p&gt;什么东西?!&amp;nbsp;怎么超出来原作的本地目录了?!&lt;/p&gt;
&lt;p&gt;再问,才知道:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AP_HANDSHAKE=5873cf77-e70b-4887-a8b2-28b7db3c408e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类似 &lt;code&gt;AP_&lt;/code&gt; 前缀的系列环境变量是随发行版,每次不同的,&lt;/li&gt;
&lt;li&gt;必须匹配上,否则,系统找不到,就只能使用缓存的不知哪儿的路径了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以,必须:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从项目中打开脚本:
&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140127-qpy-env-proj.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从 QEditor 中运行
&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140127-qpy-env-run.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 console 中生成:
&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140127-qpy-env-gen-again.jpg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="qpython"&gt;QPython头声明&lt;a class="headerlink" href="#qpython" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;参考: &lt;a href="http://wiki.qpython.org/doc/program_guide/#qpython-header"&gt;Programming&amp;nbsp;Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;脚本第一行的不同声明,将由 QPython&amp;nbsp;智能识别给予不同的运行环境,一定要理解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#qpy:console&lt;/code&gt; , 是指运行环境为 QPython&amp;nbsp;的命令行环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#qpy:2&lt;/code&gt; 是指运行环境为 QPython 2&amp;nbsp;的命令行环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#qpy:3&lt;/code&gt; 是指运行环境为 QPython 3&amp;nbsp;的命令行环境&lt;/li&gt;
&lt;li&gt;没有 &lt;code&gt;#qpy:*&lt;/code&gt; 的是指基于 &lt;a href="http://kylelk.github.io/html-examples/androidhelper.html"&gt;&lt;span class="caps"&gt;SL4A&lt;/span&gt;&lt;/a&gt; 的GUI&amp;nbsp;依赖环境&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2014&amp;nbsp;追加支持的&lt;/p&gt;
&lt;h1 id="qpywebapp"&gt;qpy:webapp:&lt;app title&gt;&lt;a class="headerlink" href="#qpywebapp" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="qpyfullscreen"&gt;qpy:fullscreen&lt;a class="headerlink" href="#qpyfullscreen" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id="qpylocalhost8080"&gt;qpy://localhost:8080&lt;a class="headerlink" href="#qpylocalhost8080" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&amp;#8221;&amp;#8221;
Launching the web service on localhost:8080 
without android titlebar (fullscreen)&amp;nbsp;&amp;#8220;&amp;#8221;&amp;#8220;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;自动&lt;a class="headerlink" href="#_8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;好了,进入最后一个阶段: &lt;code&gt;怎么让所有的上传-&amp;gt;配置-&amp;gt;运行-&amp;gt;日志收集 全部自动化一键完成?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;目测,要依次解决:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动上传?!(怎么通过公匙的部署,来达到无口令远程登录手机?)&lt;/li&gt;
&lt;li&gt;自动运行手机端的脚本?!&lt;/li&gt;
&lt;li&gt;自动收集日志?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;问题一,参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8291380/how-to-get-fabric-to-automatically-instead-of-user-interactively-interact-with/10007635#10007635"&gt;python - How to get Fabric to automatically (instead of user-interactively) interact with shell commands? Combine with pexpect? - Stack&amp;nbsp;Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ilogue.com/jasper/blog/fexpect--dealing-with-prompts-in-fabric-with-pexpect/"&gt;Fexpect adds answering to prompts to fabric with use of&amp;nbsp;pexpect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.noah.org/wiki/pexpect"&gt;pexpect -&amp;nbsp;Noah.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之,对口令,没有什么好办法,大家都是通过获取反馈,匹配期待,自动输入&amp;#8230;&lt;/p&gt;
&lt;p&gt;只是,这样折腾,很扯蛋!&amp;nbsp;用口令登录的安全隐患怎么强调都不过份!&lt;/p&gt;
&lt;p&gt;何况,通过 &lt;span class="caps"&gt;RSA&lt;/span&gt;/&lt;span class="caps"&gt;DSA&lt;/span&gt; 密匙对加密,公匙部署,自动双向加密,&amp;nbsp;安定,稳定,方便的用了多少年?!&lt;/p&gt;
&lt;p&gt;没理由在 Android 这儿栽了哪!&amp;nbsp;果断的: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先将本地公匙用口令登录的方式推上手机&lt;/li&gt;
&lt;li&gt;然后,&lt;a href="http://zoomq.qiniudn.com/CPyUG/QPython/apk/berserker.android.apps.sshdroid-cracked-signed.apk"&gt;sshdroid-cracked.apk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,就没有然后了&amp;nbsp;;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只是,唯一的问题:
- 因为 &lt;span class="caps"&gt;SSH&lt;/span&gt; 服务端切换了, 导致 &lt;span class="caps"&gt;SSH&lt;/span&gt; 认证冲突,要清除对应的配置行
- 每次都要全部清除,或是人工清除?
- 不用这么 Naive ,参考:&lt;a href="http://floss.qiniudn.com/data/20130327153058/index.html"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; Warning: the &lt;span class="caps"&gt;RSA&lt;/span&gt; host key for differs from the key for the &lt;span class="caps"&gt;IP&lt;/span&gt; address -&amp;nbsp;zhangp专栏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一行解决:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sed -i -e &lt;span class="s1"&gt;&amp;#39;36d&amp;#39;&lt;/span&gt; ~/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="fabric"&gt;&lt;a href="http://docs.fabfile.org/en/1.5/index.html#usage-documentation"&gt;Fabric&lt;/a&gt;&lt;a class="headerlink" href="#fabric" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;非 &lt;code&gt;C/S&lt;/code&gt; 结构的脚本化自动部署工具!&lt;/p&gt;
&lt;p&gt;嘦在本地安装好&lt;a href="http://docs.fabfile.org/en/1.5/index.html#usage-documentation"&gt;Fabric&lt;/a&gt;
再在本地工程目录中放一个 &lt;code&gt;fabfile.py&lt;/code&gt;,&amp;nbsp;就可以:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ fab ?

Warning: Command&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; not found:
    ?

Available commands:

    env         print Android sys. env
    genenv      gen qpy need env into: /storage/sdcard0/com.hipipal.qpyplus/projects/qpy_profile
    pushproj    scp all .py into Android QPython projects dir
    qpy         main develop tools, auto upload and running in Android
    qpy_run_it  fab qpy_run_it:script&lt;span class="o"&gt;=&lt;/span&gt;MY.py
    uname       print Android sys. info.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;日常,无论折腾多少个项目,都可以统一部署此脚本到目录中,
&lt;a href="https://gist.github.com/ZoomQuiet/8645207"&gt;Fabric for QPython auto upload/running script/collect log etc&amp;#8230; from local through &lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只要定制一两只参数,&amp;nbsp;平时的开发流程就变成了:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地用喜爱的编辑环境进行代码撰写 (&lt;a href="http://www.sublimetext.com"&gt;Sublime Text 2&lt;/a&gt;, &lt;a href="http://leoeditor.com/"&gt;Leo&lt;/a&gt;,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fab qpy:script=当前调试的主脚本.py&lt;/code&gt; 一键上传手机,并自动运行&lt;/li&gt;
&lt;li&gt;在手机上真实操作,明确效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="_9"&gt;日志&lt;a class="headerlink" href="#_9" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;目测同最初设想的理想开发流程相比:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;1. 本地用喜爱的编辑环境进行代码撰写
2. 一键上传手机,并自动运行
3. 在手机上真实操作,同时有远程日志可以实时观察,确认问题
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只差一个运行日志的实时观察了哪,,,&lt;/p&gt;
&lt;p&gt;本来想着很简洁的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tmux.sourceforge.net/"&gt;tmux&lt;/a&gt;&amp;nbsp;再多开个窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail -f /PATH/2/MY/QPY/PROJECT/.run.log&lt;/code&gt; 就完事儿的哪!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结果,不得不提交个&amp;nbsp;Issue:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/qpython-android/QPython.org/issues/2"&gt;.run.log is odd · Issue #2 ·&amp;nbsp;qpython-android/QPython.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_10"&gt;结论&lt;a class="headerlink" href="#_10" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;虽然, 最后集中成了一份儿 
&lt;a href="https://gist.github.com/ZoomQuiet/8645207"&gt;fabfile.py&lt;/a&gt;
脚本,但是涉及的工具还是很多的,
所以,&amp;nbsp;整体上,最终可用的组合关系是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[[Android in mobile]]&lt;/span&gt;
    &lt;span class="na"&gt;+- /etc/profile -&amp;gt; ln -s&lt;/span&gt;
    &lt;span class="na"&gt;|                  V&lt;/span&gt;
    &lt;span class="na"&gt;|                  V&lt;/span&gt;
    &lt;span class="na"&gt;|    /storage/sdcard0/com.hipipal.qpyplus/projects/qpy_profil&lt;/span&gt;
    &lt;span class="na"&gt;|                  ^&lt;/span&gt;
    &lt;span class="na"&gt;|                  ^&lt;/span&gt;
    &lt;span class="na"&gt;+- QPython -&amp;gt; gen_qpy_env.py&lt;/span&gt;
    &lt;span class="na"&gt;|    .../projects/MyProject&lt;/span&gt;
    &lt;span class="na"&gt;|             ^&lt;/span&gt;
    &lt;span class="na"&gt;|             ^&lt;/span&gt;
    &lt;span class="na"&gt;|             ^&lt;/span&gt;
    &lt;span class="na"&gt;`- SSHDriod + id_rsa.pub&lt;/span&gt;
              &lt;span class="na"&gt;^&lt;/span&gt;
              &lt;span class="na"&gt;^   scp,and run()&lt;/span&gt;
              &lt;span class="na"&gt;^&lt;/span&gt;
        &lt;span class="na"&gt;/-&amp;gt; base fabfile.py&lt;/span&gt;
        &lt;span class="na"&gt;|&lt;/span&gt;
    &lt;span class="na"&gt;+- Fabric&lt;/span&gt;
    &lt;span class="na"&gt;+- pip&lt;/span&gt;
    &lt;span class="na"&gt;+- Python&lt;/span&gt;
    &lt;span class="na"&gt;|&lt;/span&gt;
&lt;span class="k"&gt;[[MBP in local]]&lt;/span&gt;
&lt;span class="na"&gt;all in same wifi net domain&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;a class="headerlink" href="#todo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;然后, 有个比较顺心的 QPython 折腾环境了,&amp;nbsp;就可以进一步的折腾各种想玩/能玩能玩的了!&lt;/p&gt;
&lt;h3 id="pip"&gt;pip&lt;a class="headerlink" href="#pip" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;没有 pip&amp;nbsp;的世界是艰难的世界,所以,,,&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pip-installer.org/en/latest/installing.html"&gt;Installation — pip 1.5.2&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# python get-pip.py&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;get-pip.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;21343&lt;/span&gt;, in &amp;lt;module&amp;gt;
    import bz2
ImportError: No module named bz2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么回到老方式, &lt;code&gt;setuptools-&amp;gt;easy_install pip-&amp;gt;pip&lt;/code&gt;
&lt;a href="https://pypi.python.org/pypi/setuptools#installation-instructions"&gt;setuptools 2.1 : Python Package&amp;nbsp;Index&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# python ez_setup.py&lt;/span&gt;
Downloading https://pypi.python.org/packages/source/s/setuptools/setuptools-2.1.tar.gz
Extracting in /storage/sdcard0/com.hipipal.qpyplus/cache/tmpCpG6N8
Now working in /storage/sdcard0/com.hipipal.qpyplus/cache/tmpCpG6N8/setuptools-2.1
Installing Setuptools
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;setup.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;28&lt;/span&gt;, in &amp;lt;module&amp;gt;
    from setuptools.command.test import &lt;span class="nb"&gt;test&lt;/span&gt; as _test
  File &lt;span class="s2"&gt;&amp;quot;/storage/sdcard0/com.hipipal.qpyplus/cache/tmpCpG6N8/setuptools-2.1/setuptools/command/test.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;6&lt;/span&gt;, in &amp;lt;module&amp;gt;
    from unittest import TestLoader, main
ImportError: No module named unittest
Something went wrong during the installation.
See the error message above.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好吧,只能先放下了, 
但是,没有 pip 怎么安装上 &lt;a href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt;&amp;nbsp;呢?&lt;/p&gt;
&lt;p&gt;有了 &lt;a href="http://mercurial.selenic.com/"&gt;Hg&lt;/a&gt;&amp;nbsp;才真正海阔天空了呢&amp;#8230;&lt;/p&gt;
&lt;h3 id="restful-onering"&gt;RESTful &amp;#8220;OneRing&amp;#8221;&lt;a class="headerlink" href="#restful-onering" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不知道大家记得 &lt;a href="http://code.google.com/p/onering-desktop/wiki/OneRing"&gt;OneRing&lt;/a&gt;&amp;nbsp;卟?!&lt;/p&gt;
&lt;p&gt;豆瓣首席架构师/布道官/&lt;span class="caps"&gt;CTO&lt;/span&gt; 洪教授&amp;nbsp;亲手玩的项目:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;跨平台的桌面应用开发库,
使用HTML5+CSS3制作用户界面,
用Javascript编写交互逻辑,
同时提供用写web后端的技术编写后台逻辑!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但素,现在有了 QPython 完全可以0成本山寨一个移动版的 MyRing&amp;nbsp;了哪:&lt;/p&gt;
&lt;p&gt;呼应各种本地的 &lt;a href="http://floss.qiniudn.com/data/20110818160723/index.html"&gt;RESTful&lt;/a&gt;
请求,总是要有一个内置的web&amp;nbsp;服务的,&lt;/p&gt;
&lt;p&gt;当然上 
&lt;a href="http://bottlepy.org/"&gt;Bottle&lt;/a&gt;&amp;nbsp;了,只有一个文件的越级微框架,不用安装,随项目目录发布就好.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#qpy:console&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;b&amp;gt;Hello {{name}}&amp;lt;/b&amp;gt;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为是要守护在后台长期运行的,所以用 &lt;code&gt;#qpy:console&lt;/code&gt; 标定&lt;/p&gt;
&lt;p&gt;可惜:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-bottle-error.jpg"&gt;&lt;/p&gt;
&lt;p&gt;原来:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-install-wsgi.jpg"&gt;&lt;/p&gt;
&lt;p&gt;然后:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-bottle-running.jpg"&gt;&lt;/p&gt;
&lt;p&gt;没有然后:&lt;/p&gt;
&lt;p&gt;&lt;img alt="snap4qpy" src="http://zoomq.qiniudn.com/CPyUG/QPython/snap/140126-qpy-bottle-hello.jpg"&gt;&lt;/p&gt;
&lt;p&gt;哈哈!&amp;nbsp;一切如愿!&lt;/p&gt;
&lt;h2 id="_11"&gt;专题体例:&lt;a class="headerlink" href="#_11" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;QPy 的大妈们曰了:&amp;nbsp;每个专题应该包括 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Introduction, &lt;/span&gt;
&lt;span class="err"&gt;getting start(include sample better), &lt;/span&gt;
&lt;span class="err"&gt;packages, &lt;/span&gt;
&lt;span class="err"&gt;videos (searched result from youtube or directly video link )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好吧,慢慢来,,,下次专注 Bottle 结合 QPython&amp;nbsp;实现可用随身小工具.&lt;/p&gt;
&lt;h2 id="_12"&gt;时间帐单:&lt;a class="headerlink" href="#_12" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单回顾一下整个从完全小白到折腾出当前扫盲文章的时间投入:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1H:&amp;nbsp;动心,所有相关资料收集,概览&lt;/li&gt;
&lt;li&gt;2H: &lt;span class="caps"&gt;SSH&lt;/span&gt; 登录成功,&amp;nbsp;不用口令,未果&lt;/li&gt;
&lt;li&gt;2H: env&amp;nbsp;确认问题,解决问题&lt;/li&gt;
&lt;li&gt;1H: BusyBox 熟悉手机上的shell&amp;nbsp;环境&lt;/li&gt;
&lt;li&gt;8H: Fabric 打通, 还是env 问题,以及版本变化后要重新生成 env&amp;nbsp;配置&lt;/li&gt;
&lt;li&gt;4H:&amp;nbsp;整理为文章&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;18H&lt;/code&gt; 总计可统计的大块时间, 其它基本有几乎相同的沟通时间,用在
通过 微信/邮件/github&amp;nbsp;等等方式沟通&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;171011 &lt;span class="caps"&gt;ZQ&lt;/span&gt; 迁移到 .io 私人域名中&lt;ul&gt;
&lt;li&gt;官方文档-&amp;gt; &lt;a href="http://www.qpython.org/document.html"&gt;Welcome to read the QPython guide! — QPython 0.9&amp;nbsp;documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;140127 &lt;span class="caps"&gt;ZQ&lt;/span&gt;&amp;nbsp;增补所有细节&lt;/li&gt;
&lt;li&gt;140126 &lt;span class="caps"&gt;ZQ&lt;/span&gt;&amp;nbsp;创建&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="howto"></category><category term="qpy"></category><category term="pythonic"></category><category term="ssh"></category></entry><entry><title>PythonisT happy guido ;-)</title><link href="https://blog.zoomquiet.io/140106-pycon2013tee-guido.html" rel="alternate"></link><published>2014-01-07T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-01-07:/140106-pycon2013tee-guido.html</id><summary type="html">&lt;p&gt;一切开始自2006年!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起初ZEUUX 作TEE 只是为了好玩,而且 Gudio 很喜欢: 有照片为证&lt;a href="http://wiki.woodpecker.org.cn/moin/ObpLovelyPython/LpyAttachZoomq#A.2BTrpyaQ-"&gt;ObpLovelyPython/LpyAttachZoomq - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,就没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后来, 好容易一个蠎年了! 为了蠎年的 PyCon2013China,&amp;nbsp;启动了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python-china.org/topic/544"&gt;蠎年蠎衫(PythonisT-shirt)设计大赛! — Python&amp;nbsp;China&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,也没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再然后,&lt;a href="https://twitter.com/stephanie__yu/status/381862928598577152"&gt;Twitter / stephanie__yu: @gvanrossum&amp;nbsp;http://t.co/WSAYnXhbt2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我蠎女神搭讪 Gudio&amp;nbsp;成功&lt;/li&gt;
&lt;li&gt;当年的蠎衫,老爹竟然一直在穿!&lt;/li&gt;
&lt;li&gt;于是又火了四处求购的呼声!&lt;/li&gt;
&lt;li&gt;然后,也没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终, 金山赞助了PyCon2013China 珠海+北京场,&amp;nbsp;俺就果断使用了封藏的设计,给所有来参加的行者 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;一切开始自2006年!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起初ZEUUX 作TEE 只是为了好玩,而且 Gudio 很喜欢: 有照片为证&lt;a href="http://wiki.woodpecker.org.cn/moin/ObpLovelyPython/LpyAttachZoomq#A.2BTrpyaQ-"&gt;ObpLovelyPython/LpyAttachZoomq - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,就没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后来, 好容易一个蠎年了! 为了蠎年的 PyCon2013China,&amp;nbsp;启动了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python-china.org/topic/544"&gt;蠎年蠎衫(PythonisT-shirt)设计大赛! — Python&amp;nbsp;China&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,也没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再然后,&lt;a href="https://twitter.com/stephanie__yu/status/381862928598577152"&gt;Twitter / stephanie__yu: @gvanrossum&amp;nbsp;http://t.co/WSAYnXhbt2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我蠎女神搭讪 Gudio&amp;nbsp;成功&lt;/li&gt;
&lt;li&gt;当年的蠎衫,老爹竟然一直在穿!&lt;/li&gt;
&lt;li&gt;于是又火了四处求购的呼声!&lt;/li&gt;
&lt;li&gt;然后,也没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终, 金山赞助了PyCon2013China 珠海+北京场,&amp;nbsp;俺就果断使用了封藏的设计,给所有来参加的行者,送了件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.zhgdg.org/2013-12/et16-pycon-zh/"&gt;PyCon2013China&amp;nbsp;珠海场小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另外,精制了一小批, &lt;span class="caps"&gt;EMS&lt;/span&gt; 给了大会上特别分享了视频的海外 Pythonner&lt;ul&gt;
&lt;li&gt;&lt;a href="http://v.youku.com/v_show/id_XNjQ1OTMzODQw.html"&gt;&lt;span class="caps"&gt;HRYR&lt;/span&gt;:用Python搭建信号采集分析系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://v.youku.com/v_show/id_XNjQ1OTM3MDk2.html"&gt;&lt;span class="caps"&gt;EKR&lt;/span&gt;:Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当然有 Guido:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/gvanrossum/status/420249260961968128"&gt;Twitter / gvanrossum: T shift from Chinese user group.&amp;nbsp;&amp;#8230;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="140107-guido-twitter.png(PNG 图像,558x580 像素)" src="http://zoomq.qiniudn.com/CPyUG/zoomquiet-design-collection/140107-guido-twitter.png"&gt;&lt;/p&gt;
&lt;p&gt;以上,有关蠎衫的故事,就是这些,再过12年,又能发生什么?!&lt;/p&gt;
&lt;p&gt;&lt;img alt="design-by zoomquiet " src="http://zoomq.qiniudn.com/CPyUG/zoomquiet-design-collection/favicon/140101-design-by.png"&gt;&lt;/p&gt;</content><category term="Pythonic"></category><category term="Guido"></category><category term="Pythonner"></category><category term="PyConChina"></category></entry><entry><title>Python 101: Writing a cleanup script</title><link href="https://blog.zoomquiet.io/py101-cleanup-script.html" rel="alternate"></link><published>2013-11-23T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-23:/py101-cleanup-script.html</id><summary type="html">&lt;p&gt;&lt;a href="http://freepythontips.wordpress.com/2014/01/23/python-101-writing-a-cleanup-script/"&gt;Python 101: Writing a cleanup script | Bite Sized Python&amp;nbsp;Tips&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So hi there guys! I hope you are fine. So what is in this post? Today we will be writing a cleanup script. The idea for this post came from Mike Driscol who recently wrote a very useful post about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://freepythontips.wordpress.com/2014/01/23/python-101-writing-a-cleanup-script/"&gt;Python 101: Writing a cleanup script | Bite Sized Python&amp;nbsp;Tips&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So hi there guys! I hope you are fine. So what is in this post? Today we will be writing a cleanup script. The idea for this post came from Mike Driscol who recently wrote a very useful post about writing a cleanup script in python. So how is my post different from his post? In my post I will be using path.py. When I used path.py for the first time I just fell in love with&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="installing-pathpy"&gt;Installing path.py:&lt;a class="headerlink" href="#installing-pathpy" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So there are several ways for installing path.py. Path.py may be installed using setuptools or distribute or pip:
easy_install path.py
The latest release is always updated to the Python Package Index. The source code is hosted on&amp;nbsp;Github.&lt;/p&gt;
&lt;h2 id="finding-the-number-of-files-in-a-directory"&gt;Finding the number of files in a directory:&lt;a class="headerlink" href="#finding-the-number-of-files-in-a-directory" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So our first task is to find the number of files present in a directory. In this example we will not iterate over subdirectories instead we will just count the number of files present in the top level directory. This one is simple. Here is my&amp;nbsp;solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="n"&gt;num_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num_files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this script we first of all imported the path module. Then we set the num_file variable to 0. This variable is going to keep count for the number of files in our directory. Then we call the path function with a directory name. Firthermore we iterate over the files present in the root of our directory and increment the num_files variable. Finally we print the value of num_files variable. Here is a litle bit modified version of this script which outputs the number of subdirectories present in the root of our&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="n"&gt;num_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num_dirs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="finding-the-number-of-files-recursively-in-a-directory"&gt;Finding the number of files recursively in a directory:&lt;a class="headerlink" href="#finding-the-number-of-files-recursively-in-a-directory" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That was easy! Wasn&amp;#8217;t it? So now our work is to find the number of files recursively in a directory. In order to acomplish this task we are given the walk() method by path.py. This is the same as os.walk(). So lets write a simple script for recursively listing all files in a directory and its subdirectories in&amp;nbsp;Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;file_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;dir_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;dir_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;print &amp;#8220;Total number of files == {0}&amp;#8221;.format(file_count)
print &amp;#8220;Total number of directories == {0}&amp;#8221;.format(dir_count)
That was again very easy. Now what if we want to pretty print the directory names? I know there are some terminal one-liners but here we are talking about Python only. Lets see how we can achieve&amp;nbsp;that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;files_loc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;file_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;dir_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;files_loc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;files_loc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i.dirname().basename()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;files_loc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i.dirname().basename()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;files_loc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i.dirname().basename()&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;file_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;elif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dir_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;files_loc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;|---&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;files_loc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;|   |&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;|   `---&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is nothing fancy here. In this script we are just pretty printing a directory and the files it contains. Now lets&amp;nbsp;continue.&lt;/p&gt;
&lt;h2 id="deleting-a-specific-file-from-a-directory"&gt;Deleting a specific file from a directory:&lt;a class="headerlink" href="#deleting-a-specific-file-from-a-directory" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So lets suppose we have a file called this_file_sucks.py. Now how do we delete it. Lets make this seranio more real by saying that we do not know in which directory it is placed. Its simple to solve this problem as well. Just go to the top level directory and execute this&amp;nbsp;script:&lt;/p&gt;
&lt;p&gt;from path import path
d = path(&lt;span class="caps"&gt;DIRECTORY&lt;/span&gt;)&lt;/p&gt;
&lt;h1 id="replace-directory-with-your-desired-directory"&gt;replace directory with your desired directory&lt;a class="headerlink" href="#replace-directory-with-your-desired-directory" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;for i in d.walk():
    if i.isfile():
        if i.name == &amp;#8216;php.py&amp;#8217;:
            i.remove()
In the above script I did not implement any logging and error handling. That is left as an exercise for the&amp;nbsp;reader.&lt;/p&gt;
&lt;h2 id="deleting-files-based-on-their-extension"&gt;Deleting files based on their extension&lt;a class="headerlink" href="#deleting-files-based-on-their-extension" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just suppose you want to remove all the &amp;#8216;.pyc&amp;#8217; files from the directory. How would you go about dealing with this problem. Here is a solution which I came up with in&amp;nbsp;path.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walkfiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Removed {} file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="deleting-files-based-on-their-size"&gt;Deleting files based on their size:&lt;a class="headerlink" href="#deleting-files-based-on-their-size" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So another interesting scenario. What if we want to delete those files which exceed 5Mb&amp;nbsp;size?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NOTE:&lt;/code&gt; There is a difference between Mb and &lt;span class="caps"&gt;MB&lt;/span&gt;. I will be covering Mb here. 
Is it possible with path.py? Yes it is! So here is a script which does this&amp;nbsp;work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;d = path(&amp;#39;./&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;del_size = 4522420&lt;/span&gt;
&lt;span class="err"&gt;for i in d.walk():&lt;/span&gt;
&lt;span class="err"&gt;    if i.isfile():&lt;/span&gt;
&lt;span class="err"&gt;        if i.size &amp;gt; del_size:&lt;/span&gt;
&lt;span class="err"&gt;        #4522420 is approximately equal to 4.1Mb&lt;/span&gt;
&lt;span class="err"&gt;        #Change it to your desired size&lt;/span&gt;
&lt;span class="err"&gt;            i.remove()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we saw how we can remove files based on their&amp;nbsp;size.&lt;/p&gt;
&lt;h2 id="deleting-files-based-on-their-last-access-time"&gt;Deleting files based on their last access time&lt;a class="headerlink" href="#deleting-files-based-on-their-last-access-time" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this part we will take a look on how to delete files based on their last access time. I have written the code below to achieve this target. Just change the number of days to anything you like. This script will remove the files which were last modified before the &lt;span class="caps"&gt;DAYS&lt;/span&gt;&amp;nbsp;variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;#Change the DAYS to your liking&lt;/span&gt;
&lt;span class="n"&gt;DAYS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="n"&gt;time_in_secs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DAYS&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mtime&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;time_in_secs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;removed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we have also learned how to remove files based on their last modified time. If you want to delete files based on last access time just change i.mtime to i.atime and you will be good to&amp;nbsp;go.&lt;/p&gt;
&lt;h2 id="goodbye"&gt;Goodbye&lt;a class="headerlink" href="#goodbye" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So that was it. I hope you liked the post. In the end I would like to make a public apology that my English is not good so you may find some grammar mistakes. You are requested to email them to me so that I can improve my English. If you liked this post then don&amp;#8217;t forget to follow me on twitter and facebook. A retweet won&amp;#8217;t hurt either! If you want to send me a pm then use this&amp;nbsp;email.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140125 翻译 Weekly issue:99.5&amp;nbsp;时发现,转抄学习&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="wordpress"></category><category term="101"></category><category term="Zh"></category></entry><entry><title>Letter to a young programmer</title><link href="https://blog.zoomquiet.io/guido-letter-2-young.html" rel="alternate"></link><published>2013-11-11T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-11:/guido-letter-2-young.html</id><summary type="html">&lt;p&gt;&lt;img alt="guido" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*2m0OBPBnBJu0WrobbfnBkg.png"&gt;
~ Guido van Rossum (inventor of&amp;nbsp;Python)&lt;/p&gt;
&lt;h1 id="letter-to-a-young-programmer"&gt;&lt;a href="http://neopythonic.blogspot.ca/2013/10/letter-to-young-programmer.html"&gt;Letter to a young programmer&lt;/a&gt;&lt;a class="headerlink" href="#letter-to-a-young-programmer" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Dear (insert name&amp;nbsp;here),&lt;/p&gt;
&lt;p&gt;I heard you enjoy a certain programming language named Python. Programming is a wonderful activity. I am a little jealous that you have access to computers at your age; when I grew up I didn …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="guido" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*2m0OBPBnBJu0WrobbfnBkg.png"&gt;
~ Guido van Rossum (inventor of&amp;nbsp;Python)&lt;/p&gt;
&lt;h1 id="letter-to-a-young-programmer"&gt;&lt;a href="http://neopythonic.blogspot.ca/2013/10/letter-to-young-programmer.html"&gt;Letter to a young programmer&lt;/a&gt;&lt;a class="headerlink" href="#letter-to-a-young-programmer" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Dear (insert name&amp;nbsp;here),&lt;/p&gt;
&lt;p&gt;I heard you enjoy a certain programming language named Python. Programming is a wonderful activity. I am a little jealous that you have access to computers at your age; when I grew up I didn&amp;#8217;t even know what a computer was! I was an electronics hobbyist though, and my big dream was to build my own electronic calculator from discrete components. I never did do that, but I did build several digital clocks, and it was amazing to build something that complex and see it work. I hope you dream big too — programmers can make computers (and robots!) do amazing things, and this is a great time to become a programmer. Just imagine how much faster computers will be in five or ten years, and what you will be able to do with your skills&amp;nbsp;then!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;—Guido van Rossum (inventor of Python)&lt;/span&gt;
&lt;span class="err"&gt;THURSDAY, OCTOBER 24, 2013&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从
&lt;a href="http://us4.campaign-archive1.com/?u=9735795484d2e4c204da82a29&amp;amp;id=c8c36205c4"&gt;Pycoder&amp;#8217;s Weekly (Issue #89): Mavericks&lt;/a&gt;
知道的 Guido&amp;nbsp;好萌信,`&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;尝试翻译一下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;亲&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="err"&gt;目测你正在享受一种叫&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;的编程语言&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;编程是种美妙的体验&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;俺很有点羡慕嫉妒恨你们&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;在这个年龄就能接触电脑&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;俺那会儿子&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;甚至不知道什么是计算机&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="err"&gt;俺算一个电子爱好者&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;那时&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;最大的梦想是&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;亲手完成一个计算元件&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;俺从未作到这点&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;不过&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;倒是完成了几件数字时钟&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;每当见到如此复杂的东西&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;终于能工作时&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;哗&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="err"&gt;那种感觉&lt;/span&gt;&lt;span class="o"&gt;,,,&lt;/span&gt;
&lt;span class="err"&gt;俺期望你的梦想也足够大&lt;/span&gt; &lt;span class="err"&gt;—&lt;/span&gt;
&lt;span class="err"&gt;程序可以控制计算机&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;机械人&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;做出令人惊叹的事儿&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;这是个令程序员伟大的时代&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;现在就设想&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;到&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;年后&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;能运用你的功能操作更快的计算机作到什么&lt;/span&gt;&lt;span class="o"&gt;?!&lt;/span&gt;

&lt;span class="err"&gt;哗&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131027 pub. &lt;a href="https://medium.com/i-m-h-o/e701a9dc714e"&gt;Letter to a young programmer — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="OSS"></category><category term="Think"></category><category term="China"></category></entry><entry><title>EKR to Chinese programmer</title><link href="https://blog.zoomquiet.io/ekr-selfintro-for-chinese.html" rel="alternate"></link><published>2013-11-06T00:00:00+08:00</published><updated>2019-09-08T12:14:36+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-06:/ekr-selfintro-for-chinese.html</id><summary type="html">&lt;h1 id="leo"&gt;Leo 作者向中国开发者的自述&lt;a class="headerlink" href="#leo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="EKR" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*yKVZtcJyfh-FHNEtXrqjPw.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://leoeditor.com/"&gt;Leo&lt;/a&gt; is OpenSource,written by Python,can run in M$/Linux/&lt;span class="caps"&gt;MAC&lt;/span&gt;/etc. ,Leo is Literate Environment Outline-oriented ;-)
&lt;span class="caps"&gt;EKR&lt;/span&gt; is her&amp;nbsp;father.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;, what is &amp;#8220;Literate&amp;#8221; ,is hard to explained,
i try and try and try to show/share to Chinese People, &lt;span class="caps"&gt;BUT&lt;/span&gt;&amp;#8230; 
next week,there is another …&lt;/p&gt;</summary><content type="html">&lt;h1 id="leo"&gt;Leo 作者向中国开发者的自述&lt;a class="headerlink" href="#leo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="EKR" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*yKVZtcJyfh-FHNEtXrqjPw.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://leoeditor.com/"&gt;Leo&lt;/a&gt; is OpenSource,written by Python,can run in M$/Linux/&lt;span class="caps"&gt;MAC&lt;/span&gt;/etc. ,Leo is Literate Environment Outline-oriented ;-)
&lt;span class="caps"&gt;EKR&lt;/span&gt; is her&amp;nbsp;father.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;, what is &amp;#8220;Literate&amp;#8221; ,is hard to explained,
i try and try and try to show/share to Chinese People, &lt;span class="caps"&gt;BUT&lt;/span&gt;&amp;#8230; 
next week,there is another chance for try again, and ask &lt;span class="caps"&gt;EKR&lt;/span&gt; say some abt. self&amp;#8230; 
So! &lt;span class="caps"&gt;EKR&lt;/span&gt; writed down his colorful&amp;nbsp;life!&lt;/p&gt;
&lt;p&gt;​I&amp;#8217;ve been interested in computers from the time I was about 10 years&amp;nbsp;old.&lt;/p&gt;
&lt;p&gt;I studied mathematics at Michigan State University and computer science at the University of Wisconsin, Madison. There I meant my friend and mentor, &lt;span class="caps"&gt;D.R.&lt;/span&gt;(Bob) Fitzwater. Bob encouraged me to focus more on design, less on the &amp;#8220;bits&amp;#8221;. He died several years ago—he would have enjoyed what has happened&amp;nbsp;since.&lt;/p&gt;
&lt;p&gt;When I first learned to program, my programs were &amp;#8220;brittle&amp;#8221;: changing one part would break another. For several years I wanted to know how to solve this&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;My first programming job was at &lt;span class="caps"&gt;IBM&lt;/span&gt; in Kingston New York. This was about 1974. I didn&amp;#8217;t like corporate culture. The problem was my own immaturity, not the people at &lt;span class="caps"&gt;IBM&lt;/span&gt;. Still, I&amp;#8217;m happy I&amp;nbsp;left.&lt;/p&gt;
&lt;p&gt;While at &lt;span class="caps"&gt;IBM&lt;/span&gt; I studied the ideas of people like Edsjer Dijkstra and especially the great David L. Parnas. Parnas was writing before languages had classes. In fact, his ideas are the reason that Leo&amp;#8217;s classes have remained unchanged in concept even though they have been rewritten many&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;I left &lt;span class="caps"&gt;IBM&lt;/span&gt; after less than a year. For a while I owned a computer store in Madison Wisconsin, where I have lived ever since. The store didn&amp;#8217;t turn out too&amp;nbsp;well&amp;#8230; &lt;/p&gt;
&lt;p&gt;I married Rebecca in 1980, and we have been a happy team ever since. Leo would not have been born without her. Rebecca and I have two children, James and Linda. James is 30, Linda&amp;nbsp;23.&lt;/p&gt;
&lt;p&gt;About this time I started a computer business selling Sherlock, a tracing tool for C programs:&amp;nbsp;https://sourceforge.net/projects/leo/files/Miscellaneous/Sherlock/ &lt;/p&gt;
&lt;p&gt;I received a patent for it, but the business went nowhere. Sherlock is not needed for tracing Python programs: the pattern used in Leo suffices.
The ideas behind Sherlock really ought to be part of Python&amp;#8217;s logging framework. Levels of logging are feeble compared to individually named and targeted&amp;nbsp;logs.&lt;/p&gt;
&lt;p&gt;I worked (from home) for about a year for a company called Tuple in Ballard, Washington. I wrote (in C) a very fast optimizing C compiler, assembler, linker and unix-like file system for them. See the &lt;span class="caps"&gt;CC2&lt;/span&gt; stuff at: 
https://sourceforge.net/projects/leo/files/Miscellaneous/&lt;span class="caps"&gt;CC2&lt;/span&gt;%20and%20Psyco/&lt;/p&gt;
&lt;p&gt;This was before the days of unit tests! At that time, having the compiler compile itself was pretty much how testing was&amp;nbsp;done!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been a fan of Donald Knuth ever since graduate school. I studied his books about&amp;nbsp;TeX:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;TeXbook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Reading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Massachusetts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Addison&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wesley&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1984&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;483&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="n"&gt;ISBN&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13447&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TeX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Reading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Massachusetts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Addison&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wesley&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1986&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;xviii&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;ISBN&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13437&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;written&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;Pascal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;organized&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Knuth&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;studied&lt;/span&gt; &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="n"&gt;intensely&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despite understanding bits and pieces of the 600-page code in volume B, I really didn&amp;#8217;t understand the code. I asked myself, why is this so hard to understand? After perhaps 6 months of wondering, the basis of Leo came to me: webs are outlines in disguise. Actually, &lt;em&gt;all&lt;/em&gt; programs are outlines in&amp;nbsp;disguise.&lt;/p&gt;
&lt;p&gt;You can read about the rest of Leo&amp;#8217;s history here:&amp;nbsp;http://leoeditor.com/appendices.html#history-of-leo&lt;/p&gt;
&lt;p&gt;I learned about Python in 2001. I was working on the Python version of Leo on September&amp;nbsp;11.&lt;/p&gt;
&lt;p&gt;Two years ago I got interested in Guido&amp;#8217;s keynote about static type checking. I contacted him and started this project:&amp;nbsp;https://groups.google.com/forum/#!forum/python-static-type-checking&lt;/p&gt;
&lt;p&gt;I spent lots of time learning how to traverse parse trees quickly. That&amp;#8217;s not nothing, but it&amp;#8217;s only the beginning of the task. Perhaps next year I&amp;#8217;ll be able to do for type analysis what I did for traversing parse trees&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;​
And that&amp;#8217;s about it. I&amp;#8217;ve ever only been interested in programming. I love seeing how other people use Leo, but such excursions are not for me. I remain interested in programming because it has never been easy for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;I am a mediocre wei chi player, despite many lessons from Yang Yi-Lun 杨以伦, pro 7 dan: 
https://en.wikipedia.org/wiki/Yilun_Yang 
I do know enough to appreciate famous&amp;nbsp;games. &lt;/p&gt;
&lt;p&gt;One of my favorites was played between the two great rivals Go Seigen 吳清源 and Kitani Minoru 木谷 実 on March 20, 1932. 
Go Seigen won by resignation, despite losing about 25&amp;nbsp;stones.&lt;/p&gt;
&lt;p&gt;I play the piano and take lessons from a great musician, Michael Butkus-Bomier: http://www.michaelbb.info/
I enjoy painting. About 20 years ago I received a black belt in&amp;nbsp;karate.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTH&lt;/span&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;试译如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;10岁开始,俺就对计算机上了心.&lt;/p&gt;
&lt;p&gt;俺是密歇根州立大学数学系的,也是威斯康星大学麦迪逊学院计算机系的.在那儿,遇到了俺的导师(Bob) Fitzwater教授,他建议俺多关注设计,而不仅仅是&amp;#8221;字节&amp;#8221;.
几年前,Bob&amp;nbsp;已仙去,不过,他要是知道俺在折腾什么一定会很高兴.&lt;/p&gt;
&lt;p&gt;开始编程时,俺的程序特色是&amp;#8221;脆&amp;#8221;:某处囧了,另外的也会杯具.&amp;nbsp;那些年俺一直在想法解决这种事儿!&lt;/p&gt;
&lt;p&gt;俺第一份程序猿工作是在1974年进入 &lt;span class="caps"&gt;IBM&lt;/span&gt; (Kingston New York). 俺并不喜欢企业文化,当然问题在俺不在 &lt;span class="caps"&gt;IBM&lt;/span&gt;,&amp;nbsp;总之很高兴俺及时离开了.&lt;/p&gt;
&lt;p&gt;有IBM 俺接触到象 Edsjer Dijkstra 或是 伟大的 David L. Parnas 们的想法.Parnas写的书面语言类, 诱发了 Leo&amp;nbsp;的类概念无论怎么重写都不会改变!&lt;/p&gt;
&lt;p&gt;离开 &lt;span class="caps"&gt;IBM&lt;/span&gt;&amp;nbsp;快一年时.有一阵子,俺在威斯康星的麦迪逊那儿有个电脑店.事儿并不忙&amp;#8230; &lt;/p&gt;
&lt;p&gt;1980年,俺同 Rebecca 结婚了,从此有了俺自个儿的快乐团队.如果没有她, Leo 也诞生不出来. Rebecca 和俺有两个娃儿,James 和 Linda. 现在 James 30, Linda&amp;nbsp;23.&lt;/p&gt;
&lt;p&gt;大约这时期,俺开始销售 Sherlock, 针对C程序的追踪工具.: https://sourceforge.net/projects/leo/files/Miscellaneous/Sherlock/
俺拥有相关专科,但是没什么业务.Sherlock 没必要对 Python 程序进行追踪: Leo 足够用了!
Sherlock背后的想法的确出自Python&amp;nbsp;的日志框架.分级的日志绝对比苍白的命名式日志要好用的多.&lt;/p&gt;
&lt;p&gt;俺为华盛顿一家名为&amp;#8221;Tuple in Ballard&amp;#8221;的公司SOHO 了一年, 写(用C)了些很快的编译器,汇编器,链接器,以及 Unix样的文件系统.参考 &lt;span class="caps"&gt;CC2&lt;/span&gt;: https://sourceforge.net/projects/leo/files/Miscellaneous/&lt;span class="caps"&gt;CC2&lt;/span&gt;%20and%20Psyco/&amp;nbsp;这儿是几天前的集成测试结果!当时,编译过编译器自身比跑通测试重要的多.&lt;/p&gt;
&lt;p&gt;毕业以来,俺一直是高纳德的粉丝. 学习过他有关TeX&amp;nbsp;的书.包括:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;卷&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TeXbook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;阅读&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;马萨诸塞州&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Addison&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wesley出版社&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1984&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;483&lt;/span&gt;&lt;span class="err"&gt;页&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;ISBN0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13447&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="err"&gt;卷&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TEX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;程序&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;阅读&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;马萨诸塞州&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Addison&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Wesley出版社&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1986&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="err"&gt;页&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;ISBN0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13437&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;B卷是用 Pascal(!) 完成并组织的(甚至于可以调用它),运用了 高纳德的 &lt;span class="caps"&gt;WEB&lt;/span&gt; 系统.俺立即对 &lt;span class="caps"&gt;WEB&lt;/span&gt;&amp;nbsp;系统着迷了.&lt;/p&gt;
&lt;p&gt;尽管对卷B 600多页中散布的代码进行了反复理解,依然一头雾水.俺反问自个儿,有这么难嘛?又过了大约半年, 完成了 Leo&amp;nbsp;的主要部分后,回过味儿来:&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;WEB&lt;/span&gt; 就是变形的大纲&amp;nbsp;事实上:&lt;/p&gt;
&lt;p&gt;一切程序都是大纲的变形 !
Leo 其余的历史可以在这儿查阅:&amp;nbsp;http://leoeditor.com/appendices.html#history-of-leo&lt;/p&gt;
&lt;p&gt;俺在2001 年才学的 Python.同年9月11日开始,就用Python 来构建 Leo&amp;nbsp;了.&lt;/p&gt;
&lt;p&gt;两年前俺关注到 Guido 有关静态类型检查的报告.于是联系上他启动了这个项目:&amp;nbsp;https://groups.google.com/forum/#!forum/python-static-type-checking&lt;/p&gt;
&lt;p&gt;俺花了大量的时间来学习如何快速遍历语法树.这不算什么事儿,但却是此任务的必然起点. 也许明年俺能基于语法树开展类型分析了&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;(嚓! 王珢的 https://github.com/yinwang0/pysonar2 已经折腾很NB&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;是也乎,俺就是对编程感兴趣.俺喜欢见证大家对 Leo 的喜爱,&amp;nbsp;但是,这不会是俺的一切.俺保持编程的兴趣,因为对俺这从来不是简单的事儿.&lt;/p&gt;
&lt;p&gt;俺是名普通的围棋爱好者, 从 Yang Yi-Lun (杨以伦)那儿学了很多, pro 7 dan: https://en.wikipedia.org/wiki/Yilun_Yang
俺能欣赏历史上知名的对弈, 其中最喜欢的是 1932年3月20号 吳清源 同 木谷 実(Kitani Minoru)的对战.尽管少了25颗棋子,但吳清源最终赢了!
俺也弹钢琴,并学习了伟大的 Michael Butkus-Bomier 的课程: http://www.michaelbb.info/
俺也享受绘画.&amp;nbsp;另外20年前,俺也拿到了空手道的黒带.&lt;/p&gt;
&lt;p&gt;以上.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;a class="headerlink" href="#changelog" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131106 pub. &lt;a href="https://medium.com/i-m-h-o/9520fee0b59f"&gt;&lt;span class="caps"&gt;EKR&lt;/span&gt; to Chinese programmer — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pythonic"></category><category term="EKR"></category><category term="Leo"></category><category term="PyConChina"></category><category term="Zh"></category></entry></feed>